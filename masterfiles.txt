
# 18-August-2024
# MASTERFILES 1 and 2 carry out the following pieces of work;
#Managing cancer driver mutations extracted for cancer driver genes from cBioPortal; 
#identifying OMIM-catalogued diseases for the cancer driver genes; working on 
#supplementary tables from Blair et al. [5] and Melamed et al. [6], to identify 
#MD genes comorbid with each cancer; 

#1) MASTERFILE1 = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/coadread/cmd1_coadread.sh

#home = /scratch/prasannalab
mkdir cancers_in_detail
cd cancers_in_detail/
mkdir coadread
cd coadread/
pwd = /scratch/prasannalab/cancers_in_detail/coadread
vi cmd1_coadread.sh

#For the TCGA COADREAD PanCan Atlas cohort, genes with driver mutations 
#(or driver genes) have been downloaded from cBioPortal; cBioPortal annotates
#driver genes and mutations from OncoKB and CancerHotspots; the list of 1066 
#cancer (or driver) genes in OncoKB are in the foll excel file and sheet:  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail\cancer_selection_oncokbgenes
#sheet = oncokb_gene_list 

#The subset of the oncokb set of driver genes, with driver mutations in COADREAD, are
#in the file: mutated_genes.txt
wc -l mutated_genes.txt
281    #there are 281 driver genes in coadread;

#To create a single file containing all coadread driver genes and mutations obtained from cbioportal,
#used the mutated_genes.txt file to create the .sh file: prep_coadread_drivers_file.sh
#the file contained commands of the following kind;
#awk -F"\t" '{IFS=OFS="\t"}{print "TET1", $0}' TET1.tsv >> coadread_drivers.txt

#created a subdir: /scratch/prasannalab/cancers_in_detail/coadread/cbio_coadread_tsvfiles
#moved all .tsv files to this sub-dir, in order to reduce the clutter; 
#cd /scratch/prasannalab/cancers_in_detail/coadread/cbio_coadread_tsvfiles
#mv ../*.tsv .
#mv ../prep_coadread_drivers_file.sh .
sh prep_coadread_drivers_file.sh > coadread_drivers.txt
#moved coadread_drivers.txt back to pwd;
#mv /scratch/prasannalab/cancers_in_detail/coadread/cbio_coadread_tsvfiles/coadread_drivers.txt /scratch/prasannalab/cancers_in_detail/coadread/.

awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/){print $1}' coadread_drivers.txt | uniq -c | \
awk -F" " '{OFS="\t"}{print $1, $2}' > counts_coadread.txt
sort -k1,1nr counts_coadread.txt > counts_coadread_sorted.txt

awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/){print $1}' coadread_drivers.txt | uniq -c | \
awk -F" " '{print $1}' | awk 'BEGIN {total=0}; {total=total+$1} END {print total}'
3303  #this is the total number of driver mutations in coadread;

#created a file with the list of 1066 oncokb genes;
vi oncokb_gene_list.txt

#copied this file as:
cp oncokb_gene_list.txt prep_xl_coadread_counts.sh
#modified prep_xl_coadread_counts.sh to get an output file with the 1066 gene names as in the oncokb
#list, and with counts for only those genes which are mutated in coadread; this file can be opened 
#in xl; the same procedure can be used to get counts for each cancer to make a grand table of 
#driver genes and driver mutations in all cancers;
sh prep_xl_coadread_counts.sh | grep -v ^$ > xl_coadread_counts.txt

#COADREAD: 281 driver genes; 3303 driver mutations

#Using DAVID showed that there are 205 OMIM diseases associated with 
#these 281 driver genes;

-------------------------------------------------------------------------

#Working with brca mutations;  

cd /scratch/prasannalab/cancers_in_detail

#In this directory, creating a symbolic link to the coadread cmd file;
ln -s /scratch/prasannalab/cancers_in_detail/coadread/cmd1_coadread.sh cmd1_all_cancers.sh 

vi cmd1_all_cancers.sh

mkdir brca

pwd = /scratch/prasannalab/cancers_in_detail/brca

#For the TCGA BRCA PanCan Atlas cohort, genes with driver mutations (or driver genes)
#have been downloaded from cBioPortal; cBioPortal annotates driver genes and mutations
#from OncoKB and CancerHotspots; the list of 1066 cancer (or driver) genes in OncoKB 
#are in the foll excel file and sheet:  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail\cancer_selection_oncokbgenes
#sheet = oncokb_gene_list 
#the subset of oncokb genes which have mutations in brca are listed in the file:
# d:\actrec_work\joined_actrec_nov21\cancer_MD_proj_ongoing3.docx
#copied and pasted these genes into the file: msword_list_brca_mutated_genes.txt
#this file needed to be modified to include newlines; hence foll. awk cmd used; 

awk -F", " 'BEGIN {RS = ", |\n"} {{for(i=1; i<=NF; i++) printf $i " "} print ""}' msword_list_brca_mutated_genes.txt > brca_mutated_genes.txt

#The subset of the oncokb set of driver genes, with driver mutations in BRCA, are
#in the file: brca_mutated_genes.txt
wc -l brca_mutated_genes.txt
266    #there are 266 driver genes in brca;

#To create a single file containing all brca driver genes and mutations obtained from cbioportal,
#used the brca_mutated_genes.txt file to create the .sh file: prep_brca_drivers_file.sh
#the file contained commands of the following kind;
#awk -F"\t" '{IFS=OFS="\t"}{print "ABL1", $0}' ABL1.tsv

#created a subdir: /scratch/prasannalab/cancers_in_detail/brca/cbio_brca_tsvfiles
#uploaded from windows all .tsv files to this sub-dir; 
#cd /scratch/prasannalab/cancers_in_detail/brca/cbio_brca_tsvfiles
#mv ../prep_brca_drivers_file.sh .
#edited: /scratch/prasannalab/cancers_in_detail/brca/cbio_brca_tsvfiles/prep_brca_drivers_file.sh
#and manually replaced file names of the type below: 
#e.g., HLA-A.tsv with HLA_A.tsv, HLA-B.tsv with HLA_B.tsv, HLA-C.tsv with HLA_C.tsv, NKX3-1.tsv with NKX3_1.tsv, 
#H1-5.tsv with H1_5.tsv

sh prep_brca_drivers_file.sh > brca_drivers.txt
#moved brca_drivers.txt back to pwd;
#mv /scratch/prasannalab/cancers_in_detail/brca/cbio_brca_tsvfiles/brca_drivers.txt /scratch/prasannalab/cancers_in_detail/brca/.

awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/){print $1}' brca_drivers.txt | uniq -c | \
awk -F" " '{OFS="\t"}{print $1, $2}' > counts_brca.txt

awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/){print $1}' brca_drivers.txt | uniq -c | \
awk -F" " '{print $1}' | awk 'BEGIN {total=0}; {total=total+$1} END {print total}'
2492  #this is the total number of driver mutations in brca;

#A file containing the list of 1066 oncokb genes was created previously, for coadread (by cutting and
#pasting the genes col from d:\actrec_work\joined_actrec_nov21\proj_in_detail\cancer_selection_oncokbgenes, 
#sheet = oncokb_gene_list, to the file oncokb_gene_list.txt); this file was then modified to the .sh file:
#/scratch/prasannalab/cancers_in_detail/coadread/prep_xl_coadread_counts.sh
#copied this prep file to pwd;

cp /scratch/prasannalab/cancers_in_detail/coadread/prep_xl_coadread_counts.sh /scratch/prasannalab/cancers_in_detail/brca/prep_xl_brca_counts.sh

#modified prep_xl_brca_counts.sh by replacing "counts_coadread.txt" with "counts_brca.txt";

sh prep_xl_brca_counts.sh | grep -v ^$ > xl_brca_counts.txt

#the file, xl_brca_counts.txt, contains 1066 gene names, which appear in the oncokb_gene_list 
#(sheet in above xl file) order; this file can be opened in xl, and used get grand table of all 
#driver genes and driver mutations in the different cancers;  

awk -F"\t" '(NF==3)' xl_brca_counts.txt | wc -l
266
awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/)' brca_drivers.txt | wc -l
2492

#BRCA: 266 driver genes; 2492 driver mutations

-------------------------------------------------------------------------

#Decided to use DAVID to, once and for all, identify OMIM diseases (if any) associated 
#with all 1066 oncokb genes; at the DAVID site, submitted the 1066 oncokb genes, and 
#obtained a "Functional Annotation Table"; (submitted genes, selected "Functional 
#Annotation Tool", under "Disease", selected only OMIM_DISEASE; by clicking on the 
#purple bar next to OMIM_DISEASE, obtained the Functional Annotation Table that I needed; 
#downloaded this table as:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_genes_omim_annotn.txt )

#created a directory called oncokb_to_omim;
cd /scratch/prasannalab/cancers_in_detail
mkdir oncokb_to_omim
#transferred above Functional Annotation Table file to this directory as: 
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/oncokb_genes_omim_annotn.txt 

pwd = /scratch/prasannalab/cancers_in_detail/oncokb_to_omim

####below, commands from pilot round are being repeated;
#The above file does not list OMIM diseases in a usable format; more than one disease is listed 
#in a line; hence tried the foll. commands to improve the format; also wrote a small perl program 
#to (almost) get the OMIM disease listed in a way that it could be used;

#Foll. commands all work;
#awk -F"\t" '{print $4}' oncokb_genes_omim_annotn.txt > junk
#sed 's/\(,\)\([0-9]\+\)/\1\n\2/g' junk | more
#sed 's/\(,\)\([0-9]\+\~\)/\1\n\2/g' junk | more
#sed 's/\(,\)\([[:digit:]]\+\)/\1\n\2/g' junk | more

#https://www.gnu.org/software/gawk/manual/html_node/String-Functions.html
#awk '{print gensub ( /(,)([0-9]+~)/, "\\1\n\\2","g", $0)}' junk | more
#awk -F"\t" '{print gensub ( /(,)([0-9]+~)/, "\\1\n\\2","g", $4); printf "\n"}' oncokb_genes_omim_annotn.txt | more

#awk -F"\t" '{print gensub ( /(,)([0-9]+~)/, "\\1\n\\2","g", $4); printf "\n"}' oncokb_genes_omim_annotn.txt | sed 's/\([a-zA-Z]\+\)\(\~[a-zA-Z]\+\)/\1\n\2/g' | more

#Create a file with cols 1 (ID), 2 (Gene Name), 3 (Species) of oncokb_genes_omim_annotn.txt
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3}' oncokb_genes_omim_annotn.txt > cols123_omim_oncokb.txt 
#awk -F"\t" '{print gensub ( /(,)([0-9]+~)/, "\\1\n\\2","g", $4); printf "\n"}' oncokb_genes_omim_annotn.txt | sed 's/\([a-zA-Z]\+\)\(\~[a-zA-Z]\+\)/\1\n\2/g' > cols123_omim_oncokb.txt

#Created a file containing only col 4 (OMIM_DISEASE) of oncokb_genes_omim_annotn.txt; the col
#has been modified to have one disease listed on one line;    
awk -F"\t" '{print gensub ( /(,)([0-9]+~)/, "\\1\n\\2","g", $4); printf "\n"}' oncokb_genes_omim_annotn.txt | sed 's/\([a-zA-Z]\+\)\(\~[a-zA-Z]\+\)/\1\n\2/g' | sed 's/\( \)\([[:digit:]]\{6\}\)\(\~[a-zA-Z]\+\)/\n\2\3/g' > col4_omim_oncokb.txt

#####3-August-22; foll lines are the modified lines; 
#edit col4_omim_oncokb.txt and manually adjust instances which have not been correctly taken care 
#of by above commands;
vi col4_omim_oncokb.txt
/\~.*\~
#shows that there is only one entry with 2 ~ ; i.e., the foll
610489~Pigmented nodular adrenocortical disease, primary, 1,Adrenocortical tumor, somatic,~Adrenocortical tumor, somatic,,
#manually pressed return on "A" of Adrenocortical to make it:
610489~Pigmented nodular adrenocortical disease, primary, 1,
Adrenocortical tumor, somatic,~Adrenocortical tumor, somatic,,
#there are several instances where a single line has been split into 2; e.g.,
275200~Hypothyroidism, congenital, nongoitrous, 1 275200,Thyroid adenoma, hyperfunctioning, somatic
~Thyroid adenoma, hyperfunctioning, somatic,Thyroid carcinoma with thyrotoxicosis
~Thyroid carcinoma with thyrotoxicosis,
#modified this to foll
275200~Hypothyroidism, congenital, nongoitrous, 1 275200,
Thyroid adenoma, hyperfunctioning, somatic~Thyroid adenoma, hyperfunctioning, somatic,
Thyroid carcinoma with thyrotoxicosis~Thyroid carcinoma with thyrotoxicosis,
#likewise, in the foll a single line has been split into 2
Transient erythroblastopenia of childhood
~Transient erythroblastopenia of childhood,
#modified this to foll
Transient erythroblastopenia of childhood~Transient erythroblastopenia of childhood,
#by giving foll search, identified instances of the above: 
/^\~
#after making modifications, checked using foll cmd:
/^[A-Za-z]


#####foll are the OLD lines; old col4 file has been renamed old_col4_omim_oncokb.txt
#edit col4_omim_oncokb.txt and manually press return before ~ for instances which have not been taken care 
#of by above commands (e.g., Leukemia/lymphoma, B-cell, 2~Leukemia/lymphoma, B-cell, 2 ; 
#Leukemia/lymphoma, B-cell, 3~Leukemia/lymphoma, B-cell, 3, ; )
#Pigmented nodular adrenocortical disease, primary, 1,Adrenocortical tumor, somatic,~Adrenocortical tumor, somatic,,
vi col4_omim_oncokb.txt
#####old cols1234 file has been renamed old_cols1234_omim_oncokb.txt
#####renamed old genes_oncokb_order_omim_diseases.txt as old_genes_oncokb_order_omim_diseases.txt
#####old lines END here


#Used the previously written join_drigenes_omimpheno.pl program; it adds cols 1 (ID), 2 (Gene Name), 3 (Species) 
#from cols123_omim_oncokb.txt, to each disease line in col4 (OMIM_DISEASE) from file col4_omim_oncokb.txt;
#the output file is cols1234_omim_oncokb.txt;

perl /scratch/prasannalab/43drigenes_to_omim/join_drigenes_omimpheno.pl cols123_omim_oncokb.txt col4_omim_oncokb.txt cols1234_omim_oncokb.txt 

#Out of 1066 oncokb driver genes, DAVID provides disease annotation for 555 genes;
cut -f1,1 oncokb_genes_omim_annotn.txt | grep -v ^ID$ | wc -l
555

#The genes and diseases need to be arranged in oncokb gene list order; used the prep_xl_brca_counts.sh 
#file to arrange the genes;
cp /scratch/prasannalab/cancers_in_detail/brca/prep_xl_brca_counts.sh /scratch/prasannalab/cancers_in_detail/oncokb_to_omim/prep_omim_oncokb.sh
vi prep_omim_oncokb.sh
#replaced filename counts_brca.txt with cols1234_omim_oncokb.txt
#replaced the grep command with an awk command;  
#ran the .sh script as follows:
sh prep_omim_oncokb.sh | awk -F"\t" '($1 == $2){sub($1 FS,"")}1' | more
#substitute $1 and Field Separator with a null string; 1 means print every line;
#following also works fine;
#sh prep_omim_oncokb.sh | awk -F"\t" '($1 == $2){sub($1FS,x)}1' | more

#Using above command to create a list of 1066 genes in oncokb order, which lists, 
#for those genes associated with omim diseases, the set of associated omim diseases;
#taking the output file below (i.e., 
# /scratch/prasannalab/cancers_in_detail/oncokb_to_omim/genes_oncokb_order_omim_diseases.txt )
#to the xl file: 
D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns; sheet = oncokb_b_m_g_omim_assocn
sh prep_omim_oncokb.sh | awk -F"\t" '($1 == $2){sub($1 FS,"")}1' | grep -v ^$ > genes_oncokb_order_omim_diseases.txt

#Number of genes not associated with any omim disease; i.e., DAVID does
#not provide omim disease annotation for 511 genes;
sh prep_omim_oncokb.sh | awk -F"\t" '($1 == $2){sub($1 FS,"")}1' | awk '(NF==1)' | wc -l
511
#Number of genes associated with one or more omim diseases; i.e., DAVID 
#provides omim disease annotation for 555 genes;
sh prep_omim_oncokb.sh | awk -F"\t" '($1 == $2){sub($1 FS,"")}1' | awk '(NF>2){print $1}' | sort | uniq | wc -l
555

#No. of OMIM disease entries in cols1234_omim_oncokb.txt
#That is, the 555 genes for which DAVID provides annotations, are 
#associated with 1201 diseases; some of the diseases may be duplicated;
grep -v ^$ cols1234_omim_oncokb.txt | wc -l
1179
#Foll. cmd gives same result as command above command;
awk -F"\t" '{print $4}' cols1234_omim_oncokb.txt | grep -v ^$ | wc -l
1179

#The 555 genes are associated with 1128 diseases with OMIM numbers; some
#of the diseases may be duplicated;  
awk -F"\t" '($4 ~ /^[[:digit:]]/){print $4}' cols1234_omim_oncokb.txt | wc -l
1128
#The 555 genes are associated with 895 unique diseases, with OMIM numbers;
awk -F"\t" '($4 ~ /^[[:digit:]]/){print $4}' cols1234_omim_oncokb.txt | sed 's/~/\t/' | cut -f1,1 | sort | uniq -c | wc -l
895
#Foll. cmd gives list of OMIM numbers for 895 unique diseases;
awk -F"\t" '($4 ~ /^[[:digit:]]/){print $4}' cols1234_omim_oncokb.txt | sed 's/~/\t/' | cut -f1,1 | sort | uniq -c | awk '{print $2}' > oncokb_uniq_diseases_lst.txt
wc -l oncokb_uniq_diseases_lst.txt
895 unique diseases

#Foll. cmd gives list of OMIM numbers for repeating diseases (97);
awk -F"\t" '($4 ~ /^[[:digit:]]/){print $4}' cols1234_omim_oncokb.txt | sed 's/~/\t/' | cut -f1,1 | sort | uniq -c | awk -F" " '($1 > 1){print}' | awk -F" " '{print $2}' > oncokb_repeating_diseases_lst.txt
wc -l oncokb_repeating_diseases_lst.txt
97 repeating diseases

cp oncokb_repeating_diseases_lst.txt oncokb_runrepeat.sh
#edited oncokb_runrepeat.sh and turned it into a cmd file with commands like:
#grep "101600" cols1234_omim_oncokb.txt
#grep "109400" cols1234_omim_oncokb.txt
#grep "109800" cols1234_omim_oncokb.txt
#grep "110100" cols1234_omim_oncokb.txt

sh oncokb_runrepeat.sh
#the genes associated with some repeating disease;
#109800 - HRAS, KRAS, RB1, FGFR3; bladder cancer, somatic;
#114480 - AKT1, ATM, BARD1, BRIP1, BRCA2, KRAS, RAD51, RAD54L, CDH1, 
#CASP8, CHEK2, ESR1, PALB2, PIK3CA, PPM1D, TP53; breast cancer, susceptibility to 

--------------------------------------------

#Plan to work on Blair et al. tables in unix; created sub-directory
cd /scratch/prasannalab/cancers_in_detail
mkdir blair_tbls
pwd = /scratch/prasannalab/cancers_in_detail/blair_tbls

#copied and pasted entire blair table s4 in file below:
vi blair_s4_complex_md.txt

#Melamed Supplementary Data 2 gives the equivalence between Blair Complex disease name 
#and the TCGA code:
#Blair Complex disease name = TCGA code

#Bladder Cancer = BLCA
#Breast Cancer = BRCA
#Colorectal Cancer = COAD, READ
#Gastric Cancer = STAD
#Kidney Cancer = KICH, KIRC, KIRP
#Lung Cancer = LUAD, LUSC
#Malignant Brain Neoplasm = GBM, LGG
#Melanoma = SKCM
#Prostate Cancer = PRAD
#Uterine Cancer = UCEC

#Thus, in the blair_s4_complex_md.txt file, search only for the above cancers,
#and obtain co-morbid MDs for each of them;

#The following TCGA cancers are not a part of Blair and Melamed studies;
#Thyroid carcinoma (THCA), Acute Myeloid Leukemia (LAML), 
#Ovarian serous cystadenocarcinoma (OV), Head and neck squamous cell carcinoma (HNSC)

awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $1,$2,$3,$8}' blair_s4_complex_md.txt | awk -F"\t" '{IFS=OFS="\t"}($1 ~ /Cancer/)||($1 ~ /Melanoma/)||($1 ~ /Malignant Brain Neoplasm/){print $1, $2, $3, $4}' | wc -l
318  #the total number of cancer-MD co-morbidity relations found in blair s4 table

awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $1,$2,$3,$8}' blair_s4_complex_md.txt | awk -F"\t" '{IFS=OFS="\t"}($1 ~ /Cancer/)||($1 ~ /Melanoma/)||($1 ~ /Malignant Brain Neoplasm/){print $4, $1, $2, $3}' | sort -k2,2 -k1,1nr | more

#Using sed to truncate to 4 decimal places;
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $1,$2,$3,$8}' blair_s4_complex_md.txt | awk -F"\t" '{IFS=OFS="\t"}($1 ~ /Cancer/)||($1 ~ /Melanoma/)||($1 ~ /Malignant Brain Neoplasm/){print $4, $1, $2, $3}' | sed -E 's/([0-9]*\.[0-9]{4})[0-9]*/\1/' | sort -k2,2 -k1,1nr | more

#as long as the decimal numbers col (i.e., global relative risk col) is the first col, sort works, even 
#if numbers have many decimal places; sort nr and gr work; however, if the decimal numbers col is not 
#the first col, sort does not work; 
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $1,$2,$3,$8}' blair_s4_complex_md.txt | awk -F"\t" '{IFS=OFS="\t"}($1 ~ /Cancer/)||($1 ~ /Melanoma/)||($1 ~ /Malignant Brain Neoplasm/){print $4, $1, $2, $3}' | sed -E 's/([0-9]*\.[0-9]{4})[0-9]*/\1/' | sort -k2,2 -k1,1gr | more

#Setting number of decimal places for reporting risk ratios: rule of four:
#"Round the risk ratio to two significant digits if the leading non-zero digit is four or more, 
#otherwise round to three;"
#The rule of four is recommended as the better way to report risk ratios; 

#awk built in arithmetic function, log($1), calculates the natural logarithm of a variable;
#the formula for calculating log to the base 10 is:
# log($1)/log(10) 

#Blair Figure 2 uses log base 10 (global relative risk); hence above command becomes the foll.;
#have used 4 decimal places for both global relative risk and its log10 value; sed -E is used to 
#support extended regular expressions;
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $1,$2,$3,$8}' blair_s4_complex_md.txt | awk -F"\t" '{IFS=OFS="\t"}($1 ~ /Cancer/)||($1 ~ /Melanoma/)||($1 ~ /Malignant Brain Neoplasm/){print $4, log($4)/log(10), $1, $2, $3}' | sed -E 's/([0-9]*\.[0-9]{4})[0-9]*/\1/g' | sort -k3,3 -k2,2gr > globalrisk_log10descordr2_canordr1_md.txt 

#introducing a header in above file;
mv globalrisk_log10descordr2_canordr1_md.txt temp
echo "Global relative risk\tlog10 global relative risk\tComplex Disease\tMendelian Disease\tGender\t" > globalrisk_log10descordr2_canordr1_md.txt
cat temp >> globalrisk_log10descordr2_canordr1_md.txt
rm temp

#Next, copied and pasted entire blair table s3 in file below:
vi blair_s3_mdnames_genes_systems.txt

awk -F"\t" '{IFS=OFS="\t"}{print $1, $4, $5, $6, $7}' blair_s3_mdnames_genes_systems.txt > md_summarynames_genes.txt
---------------------------------------------------------------------
---------------------------------------------------------------------
#NOTE: blair_s3_mdnames_genes_systems.txt was modified in melamed area to 
#/scratch/prasannalab/cancers_in_detail/melamed_tbls/blair_s3_mdnames_genes_systems_copy.txt
#this copy file has 13 more genes, added from Melamed supp tbl 2;
#commands below need to be used with this new file; see line down below called:
#"USING MODIFIED blair_s3_mdnames_genes_systems_copy.txt"
---------------------------------------------------------------------
---------------------------------------------------------------------

#Need to use the "Mendelian Disease" col in globalrisk_log10descordr2_canordr1_md.txt file, 
#as the search pattern, to search in the "Summary Name" col of md_summarynames_genes.txt (see below); 
#this will combine complex disease, comorbid MD information in the former file, with the genes and systems 
#involved information in the latter file; to do this used NR==FNR and associative arrays as described below;

#https://www.baeldung.com/linux/awk-multiple-input-files
#https://unix.stackexchange.com/questions/460182/using-awk-to-compare-files-and-combine-output-from-both-files
#https://stackoverflow.com/questions/42851582/find-in-word-from-one-file-to-another-file-using-awk-nr-fnr

#Header and 3 lines in file, md_summarynames_genes.txt
#Summary Name, Associated Mendelian Disorders, Genes, Primary Affected System, Secondary Affected Systems
#Turners Syndrome        45,X/46,XX syndrome     CHROM   Reproductive    Endocrine,Growth/Development
#Achromatopsia   Achromatopsia   CNGB3,CNGA3,GNAT2,PDE6C Visual
#Androgen Insensitivity Syndrome Androgen Insensitivity Syndrome AR      Reproductive    Endocrine,Growth/Development

#Header and 3 lines in file, globalrisk_log10descordr2_canordr1_md.txt
#  Global relative risk, log10 global relative risk, Complex Disease, Mendelian Disease, Gender
#  10.4568 1.0194  Bladder Cancer  Disorders of Phosphorous Metabolism     Both
#  9.0333  0.9558  Bladder Cancer  Diamond-Blackfan Anemia Both
#  7.5905  0.8802  Bladder Cancer  Degenerative Diseases of the Basal Ganglia      Both

#Desired header in output file; 
#Global relative risk, log10 global relative risk, Complex Disease, Mendelian Disease, Gender, Summary Name, Associated Mendelian Disorders, Genes, Primary Affected System, Secondary Affected Systems

#foll. command is for understanding NR, FNR
#awk '{ printf "Line:%s, NR:%d, FNR:%d\n", $0, NR, FNR}' md_summarynames_genes.txt globalrisk_log10descordr2_canordr1_md.txt | more

#Using NR==FNR and associative arrays;

#https://unix.stackexchange.com/questions/460182/using-awk-to-compare-files-and-combine-output-from-both-files
#awk 'NR==FNR{a[$1]=$2}NR!=FNR&&FNR>1&&a[$3]{print $1,a[$3]}' file2 file1
#If NR is same as FNR, we're on the first file, so populate the array.
#If NR isn't the same as FNR, we're on the 2nd file, so once we're past the first record of this file (header), 
#and if field 3 exists in the array, print it.
#based on above wrote foll. one-liner, which works; however, "summ_nm[$4]{print...}" part a little difficult to understand;
awk -F"\t" 'NR==FNR{summ_nm[$1]=$1; rest[$1]=$0; print summ_nm[$1], "***", rest[$1]; next} NR!=FNR && FNR>1 && summ_nm[$4]{print $1, $2, $3, $4, $5, summ_nm[$4], rest[$4]}' md_summarynames_genes.txt globalrisk_log10descordr2_canordr1_md.txt | more

#same as above, but without the print statement in the part, when NR==FNR
awk -F"\t" 'NR==FNR{summ_nm[$1]=$1; rest[$1]=$0; next} NR!=FNR && FNR>1 && summ_nm[$4]{print $1, $2, $3, $4, $5, summ_nm[$4], rest[$4]}' md_summarynames_genes.txt globalrisk_log10descordr2_canordr1_md.txt | more


#https://stackoverflow.com/questions/42851582/find-in-word-from-one-file-to-another-file-using-awk-nr-fnr
#awk 'FNR==NR{A[$2]=$1;next} ($1 in A){print A[$1], $2}'  Input_file1   Input_file2

#awk 'FNR==NR                   #### Checking condition of FNR==NR which will be TRUE when first Input_file1 is being read.
#{A[$2]=$1;                     #### create an array named A with index of field  2 and have value as first field.
#next}                          #### using next keyword(built-in awk) so it will skip all next statements.
#($1 in A)                      #### Now checking if first field of file2 is present in array A, this will be checked only when Input_file2 is being read.
#{print A[$1], $2               #### printing value of array A's value whose index is $1 and $2 of Input_file2.
#}' Input_file1  Input_file2    #### Mentioning the Input_file1 and Input_file2 here.

#based on above, wrote foll. one-liner, which works; "($4 in a){print...}" is easier to understand;
awk -F"\t" 'NR==FNR{summ_nm[$1]=$1; rest[$1]=$0; print summ_nm[$1], "***", rest[$1]; next} NR!=FNR && FNR>1 && ($4 in summ_nm){print $1, $2, $3, $4, $5, summ_nm[$4], rest[$4]}' md_summarynames_genes.txt globalrisk_log10descordr2_canordr1_md.txt | more

#same as above, but without the print statement in the part, when NR==FNR
awk -F"\t" 'NR==FNR{summ_nm[$1]=$1; rest[$1]=$0; next} NR!=FNR && FNR>1 && ($4 in summ_nm){print $1, $2, $3, $4, $5, summ_nm[$4], rest[$4]}' md_summarynames_genes.txt globalrisk_log10descordr2_canordr1_md.txt | more

#foll. command works;
awk -F"\t" '{IFS=OFS="\t"} BEGIN { print "Global relative risk", "\t", "log10 global relative risk", "\t", "Complex Disease", "\t", \
"Mendelian Disease", "\t", "Gender", "\t", "Summary Name", "\t", "Summary Name", "\t", "Associated Mendelian Disorders", \
"\t", "Genes", "\t", "Primary Affected System", "\t", "Secondary Affected Systems" } \
NR==FNR {summ_nm[$1]=$1; rest[$1]=$0; next} \
NR!=FNR && FNR>1 && summ_nm[$4]{print $1, $2, $3, $4, $5, summ_nm[$4], rest[$4]}' \
md_summarynames_genes.txt globalrisk_log10descordr2_canordr1_md.txt | more

#foll. command works; however, tabs and spacing in header line not ok;
awk -F"\t" '{IFS=OFS="\t"} BEGIN { print "Global relative risk", "\t", "log10 global relative risk", "\t", "Complex Disease", "\t", \
"Mendelian Disease", "\t", "Gender", "\t", "Summary Name", "\t", "Summary Name", "\t", "Associated Mendelian Disorders", \
"\t", "Genes", "\t", "Primary Affected System", "\t", "Secondary Affected Systems" } \
NR==FNR {summ_nm[$1]=$1; rest[$1]=$0; next} \
NR!=FNR && FNR>1 && ($4 in summ_nm){print $1, $2, $3, $4, $5, summ_nm[$4], rest[$4]}' \
md_summarynames_genes.txt globalrisk_log10descordr2_canordr1_md.txt | more

#Fixing tabs and spacing in header line; both the foll commands produce identical output;  
awk -F"\t" '{IFS=OFS="\t"} BEGIN { print "Global relative risk" "\t" "log10 global relative risk" "\t" "Complex Disease" "\t" "Mendelian Disease" "\t" "Gender" "\t" "Summary Name" "\t" "Summary Name" "\t" "Associated Mendelian Disorders" "\t" "Genes" "\t" "Primary Affected System" "\t" "Secondary Affected Systems" } \
NR==FNR {summ_nm[$1]=$1; rest[$1]=$0; next} \
NR!=FNR && FNR>1 && ($4 in summ_nm){print $1, $2, $3, $4, $5, summ_nm[$4], rest[$4]}' md_summarynames_genes.txt globalrisk_log10descordr2_canordr1_md.txt

#Final command;
awk -F"\t" '{IFS=OFS="\t"} BEGIN { print "Global relative risk\tlog10 global relative risk\tComplex Disease\tMendelian Disease\tGender\tSummary Name\tSummary Name\tAssociated Mendelian Disorders\tGenes\tPrimary Affected System\tSecondary Affected Systems" } \
NR==FNR {summ_nm[$1]=$1; rest[$1]=$0; next} \
NR!=FNR && FNR>1 && ($4 in summ_nm){print $1, $2, $3, $4, $5, summ_nm[$4], rest[$4]}' md_summarynames_genes.txt globalrisk_log10descordr2_canordr1_md.txt > temp.txt
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $5, $3, $4, $6, $8, $9, $10, $11}' temp.txt > complexdiseases_md_genes_merged.txt

###However, checking the count of the number of lines in the output file (temp.txt) showed that not all 
###lines in globalrisk_log10descordr2_canordr1_md.txt had been combined with the appropriate lines in 
###md_summarynames_genes.txt (wc -l temp.txt = 298; expected number of lines: 318 + 1 header line = 319);  
###Thorough checking (using an sh file with echo and grep commands) showed that for a few diseases, the 
###"Mendelian Disease" col in globalrisk_log10descordr2_canordr1_md.txt is NOT IDENTICAL to the
###"Summary Name" col in md_summarynames_genes.txt; the diseases are the following:

Mendelian Disease                        Summary Name
-----------------                        ------------
Spinocerebellar Ataxia                   Spinocerebellar ataxia
Li Fraumeni and Related Syndromes        Li-Fraumeni and Related Syndromes
Down Syndrome                            Downs Syndrome 
Congenital Hirschsprung Disease          Congenital Hirschsprungs Disease
Friedreich Ataxia                        Friedreichs Ataxia

###first, saved the old (wrong) globalrisk_log10descordr2_canordr1_md.txt file as follows: 
###cp globalrisk_log10descordr2_canordr1_md.txt as old_globalrisk_log10descordr2_canordr1_md.txt

###Then, went back and manually (using vi) changed the "Mendelian Disease" col in globalrisk_log10descordr2_canordr1_md.txt
###to match the "Summary Name" col of md_summarynames_genes.txt; e.g., changed all instances of "Ataxia" in former file to "ataxia",
###all instances of "Li Fraumeni" in former file to "Li-Fraumeni", etc.; then, re-ran above Final command; the command worked!
###wc -l temp.txt = 318 + 1 header line = 319 lines; also reran the command after Final command, to obtain the correct
###complexdiseases_md_genes_merged.txt; 

awk -F"\t" '{IFS=OFS="\t"}($4 ~ /^Breast Cancer$/)' complexdiseases_md_genes_merged.txt | wc -l
43
awk -F"\t" '{IFS=OFS="\t"}($4 ~ /^Colorectal Cancer$/)' complexdiseases_md_genes_merged.txt | wc -l
40
awk -F"\t" '{IFS=OFS="\t"}($4 ~ /^Kidney Cancer$/)' complexdiseases_md_genes_merged.txt | wc -l
32

awk -F"\t" '{IFS=OFS="\t"}($4 ~ /^Breast Cancer$/)' complexdiseases_md_genes_merged.txt > brca_md_assocns_blair.txt
awk -F"\t" '{IFS=OFS="\t"}($4 ~ /^Colorectal Cancer$/)' complexdiseases_md_genes_merged.txt > coadread_md_assocns_blair.txt
awk -F"\t" '{IFS=OFS="\t"}($4 ~ /^Kidney Cancer$/)' complexdiseases_md_genes_merged.txt > kirc_md_assocns_blair.txt

#Opening complexdiseases_md_genes_merged.txt, brca_md_assocns_blair.txt, coadread_md_assocns_blair.txt in xl;
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns
#sheets = comorbid_complex_md_genes, coadread_md_assocns_blair, brca_md_assocns_blair

#Opening kirc_md_assocns_blair.txt as: sheet = kirc_md_assocns_blair in above xl file;

pwd = /scratch/prasannalab/cancers_in_detail/blair_tbls

awk -F"\t" '{print $8}' coadread_md_assocns_blair.txt | sed 's/,/\n/g' | sort | uniq > coadread_md_genelist_blair.txt
wc -l coadread_md_genelist_blair.txt
301  #there are 301 genes associated with mds comorbid with coadread
awk -F"\t" '{print $8}' brca_md_assocns_blair.txt | sed 's/,/\n/g' | sort | uniq > brca_md_genelist_blair.txt
wc -l brca_md_genelist_blair.txt
335  #there are 335 genes associated with mds comorbid with brca
awk -F"\t" '{print $8}' kirc_md_assocns_blair.txt | sed 's/,/\n/g' | sort | uniq > kirc_md_genelist_blair.txt
wc -l kirc_md_genelist_blair.txt
262  #there are 262 genes associated with mds comorbid with brca

cp /scratch/prasannalab/cancers_in_detail/coadread/prep_xl_coadread_counts.sh /scratch/prasannalab/cancers_in_detail/blair_tbls/srch_oncokb_genes_in_coadread_md_genelist_blair.sh
#edit the copied file and replace filename, counts_coadread.txt, with filename, coadread_md_genelist_blair.txt
vi srch_oncokb_genes_in_coadread_md_genelist_blair.sh

sh srch_oncokb_genes_in_coadread_md_genelist_blair.sh | awk '(NF==2)' |  wc -l
48   #there are 48 oncokb genes which are associated with md which are comorbid with coadread;
sh srch_oncokb_genes_in_coadread_md_genelist_blair.sh | grep -v ^$ > coadread_md_genes_oncokb_order.txt

cp srch_oncokb_genes_in_coadread_md_genelist_blair.sh srch_oncokb_genes_in_brca_md_genelist_blair.sh
#edit copied file and replace filename, coadread_md_genelist_blair.txt, with filename, brca_md_genelist_blair.txt
sh srch_oncokb_genes_in_brca_md_genelist_blair.sh | awk '(NF==2)' |  wc -l
61   #there are 61 oncokb genes which are associated with md which are comorbid with brca; 
sh srch_oncokb_genes_in_brca_md_genelist_blair.sh | grep -v ^$ > brca_md_genes_oncokb_order.txt

cp srch_oncokb_genes_in_coadread_md_genelist_blair.sh srch_oncokb_genes_in_kirc_md_genelist_blair.sh
#edit copied file and replace filename, coadread_md_genelist_blair.txt, with filename, kirc_md_genelist_blair.txt
sh srch_oncokb_genes_in_kirc_md_genelist_blair.sh | awk '(NF==2)' |  wc -l
49   #there are 49 oncokb genes which are associated with md which are comorbid with kirc; 
sh srch_oncokb_genes_in_kirc_md_genelist_blair.sh | grep -v ^$ > kirc_md_genes_oncokb_order.txt

#Taking files, coadread_md_genes_oncokb_order.txt and brca_md_genes_oncokb_order.txt, to xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx , 
#sheet = oncokb_genes_in_comorbid_md_can ;

#Taking kirc_md_genes_oncokb_order.txt, to xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx , 
#sheet = oncokb_genes_in_comorbid_md_can ;

#Next, identifying genes associated with mds comorbid with cancer, which are also drivers in the cancer;
#copied and pasted oncokb driver genes identified for coadread from foll xl file: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx ; 
#sheet = can_wise_driver_counts ;
#into the file: coadread_driver_genelist.txt
#used this file to create an sh file;
cp coadread_driver_genelist.txt srch_coadread_drivers_in_md_genelist_blair.sh

#using vi, turned srch_coadread_drivers_in_md_genelist_blair.sh into appropriate sh file;
#(for two copies of gene name in a line use paste -d" " as below;
#paste -d" " srch_coadread_drivers_in_md_genelist_blair.sh coadread_driver_genelist.txt > t1
#cp t1 srch_coadread_drivers_in_md_genelist_blair.sh )

sh srch_coadread_drivers_in_md_genelist_blair.sh | awk '(NF==2)' | wc -l
21  #21 genes associated with mds comorbid with coadread are coadread drivers;
sh srch_coadread_drivers_in_md_genelist_blair.sh | grep -v ^$ > coadread_drivers_in_md.txt

#Likewise, get brca drivers that are found in the list of genes associated with comorbid mds;  
#copied and pasted oncokb driver genes identified for brca from foll xl file: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx ; 
#sheet = can_wise_driver_counts ;
#into the file: brca_driver_genelist.txt
#used this file to create an sh file;
cp brca_driver_genelist.txt srch_brca_drivers_in_md_genelist_blair.sh

#using vi, turned srch_brca_drivers_in_md_genelist_blair.sh into appropriate sh file;
#(for two copies of gene name in a line use paste -d" " as below;
#paste -d" " srch_brca_drivers_in_md_genelist_blair.sh brca_driver_genelist.txt > t1
#cp t1 srch_brca_drivers_in_md_genelist_blair.sh )

sh srch_brca_drivers_in_md_genelist_blair.sh | awk '(NF==2)' | wc -l
25  #25 genes associated with mds comorbid with brca are brca drivers;
sh srch_brca_drivers_in_md_genelist_blair.sh | grep -v ^$ > brca_drivers_in_md.txt

#taking coadread_drivers_in_md.txt and brca_drivers_in_md.txt to xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx , 
#sheet = mdgenes_are_candrivers ;

#Likewise, get kirc drivers that are found in the list of genes associated with comorbid mds;  
#copied and pasted oncokb driver genes identified for kirc from foll xl file: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx ; 
#sheet = can_wise_driver_counts ;
#into the file: kirc_driver_genelist.txt
#used this file to create an sh file;
cp kirc_driver_genelist.txt srch_kirc_drivers_in_md_genelist_blair.sh

#using vi, turned srch_kirc_drivers_in_md_genelist_blair.sh into appropriate sh file
#with commands of the foll kind:
#echo -e -n "VHL\t" ; grep "\bVHL\b" kirc_md_genelist_blair.txt ; echo "" ;
#(for two copies of gene name in a line use paste -d" " as below;
#paste -d" " srch_kirc_drivers_in_md_genelist_blair.sh kirc_driver_genelist.txt > t1
#cp t1 srch_kirc_drivers_in_md_genelist_blair.sh )

sh srch_kirc_drivers_in_md_genelist_blair.sh | awk '(NF==2)' | wc -l
13  #13 genes associated with mds comorbid with kirc are kirc drivers;
sh srch_kirc_drivers_in_md_genelist_blair.sh | grep -v ^$ > kirc_drivers_in_md.txt

#taking kirc_drivers_in_md.txt to xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx , 
#sheet = mdgenes_are_candrivers ;

#Do not plan to look at MD-MD comorbidity table of Blair et al., till a use can be found for doing so; 

-------------------------------------------------------------------------

#Working with KIRC mutations; KIRC = Kidney Renal Clear Cell Carcinoma; 512 samples;  

mkdir kirc

pwd = /scratch/prasannalab/cancers_in_detail/kirc

#For the TCGA KIRC PanCan Atlas cohort, genes with driver mutations (or driver genes)
#have been downloaded from cBioPortal; cBioPortal annotates driver genes and mutations
#from OncoKB and CancerHotspots; the list of 1066 cancer (or driver) genes in OncoKB 
#are in the foll excel file and sheet:  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail\cancer_selection_oncokbgenes
#sheet = oncokb_gene_list 
#the subset of oncokb genes which have mutations in kirc are listed in the file:
# d:\actrec_work\joined_actrec_nov21\cancer_MD_proj_ongoing3.docx
#copied and pasted these genes into the file: msword_list_kirc_mutated_genes.txt
#this file needed to be modified to include newlines; hence foll. awk cmd used; 

awk -F", " 'BEGIN {RS = ", |\n"} {{for(i=1; i<=NF; i++) printf $i " "} print ""}' msword_list_kirc_mutated_genes.txt > kirc_mutated_genes.txt

#The subset of the oncokb set of driver genes, with driver mutations in KIRC, are
#in the file: kirc_mutated_genes.txt
wc -l kirc_mutated_genes.txt
102    #there are 102 driver genes in kirc;

#To create a single file containing all kirc driver genes and mutations obtained from cbioportal,
#used the kirc_mutated_genes.txt file to create the .sh file: prep_kirc_drivers_file.sh
#the file contained commands of the following kind;
#awk -F"\t" '{IFS=OFS="\t"}{print "ABL1", $0}' ABL1.tsv
paste -d" " kirc_mutated_genes.txt kirc_mutated_genes.txt > prep_kirc_drivers_file.sh
#use vi to modify prep_kirc_drivers_file.sh
vi prep_kirc_drivers_file.sh

#created a subdir: /scratch/prasannalab/cancers_in_detail/kirc/cbio_kirc_tsvfiles
#uploaded from windows all .tsv files to this sub-dir; 
#cd /scratch/prasannalab/cancers_in_detail/kirc/cbio_kirc_tsvfiles
#mv ../prep_kirc_drivers_file.sh .
#edited: /scratch/prasannalab/cancers_in_detail/kirc/cbio_kirc_tsvfiles/prep_kirc_drivers_file.sh
#and manually replaced file names of the type below: 
#e.g., HLA-A.tsv with HLA_A.tsv, HLA-B.tsv with HLA_B.tsv, HLA-C.tsv with HLA_C.tsv, NKX3-1.tsv with NKX3_1.tsv, 
#H1-5.tsv with H1_5.tsv

sh prep_kirc_drivers_file.sh > kirc_drivers.txt
#moved kirc_drivers.txt back to pwd;
#mv /scratch/prasannalab/cancers_in_detail/kirc/cbio_kirc_tsvfiles/kirc_drivers.txt /scratch/prasannalab/cancers_in_detail/kirc/.

awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/){print $1}' kirc_drivers.txt | uniq -c | \
awk -F" " '{OFS="\t"}{print $1, $2}' | sort -k1,1nr > counts_kirc.txt

awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/){print $1}' kirc_drivers.txt | uniq -c | \
awk -F" " '{print $1}' | awk 'BEGIN {total=0}; {total=total+$1} END {print total}'
607  #this is the total number of driver mutations in kirc;

#A file containing the list of 1066 oncokb genes was created previously, for coadread (by cutting and
#pasting the genes col from d:\actrec_work\joined_actrec_nov21\proj_in_detail\cancer_selection_oncokbgenes, 
#sheet = oncokb_gene_list, to the file oncokb_gene_list.txt); this file was then modified to the .sh file:
#/scratch/prasannalab/cancers_in_detail/coadread/prep_xl_coadread_counts.sh
#copied this prep file to pwd;

cp /scratch/prasannalab/cancers_in_detail/coadread/prep_xl_coadread_counts.sh /scratch/prasannalab/cancers_in_detail/kirc/prep_xl_kirc_counts.sh

#modified prep_xl_kirc_counts.sh by replacing "counts_coadread.txt" with "counts_kirc.txt";

sh prep_xl_kirc_counts.sh | grep -v ^$ > xl_kirc_counts.txt

#the file, xl_kirc_counts.txt, contains 1066 gene names, which appear in the oncokb_gene_list 
#(sheet in above xl file) order; this file can be opened in xl, and used get grand table of all 
#driver genes and driver mutations in the different cancers;  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx ;
#sheet = oncokb_gene_order_driver_counts ;
#the file counts_kirc.txt contains mutated driver genes arranged in descending order; this file
#can be opened in the above xl file, in: sheet = can_wise_driver_counts ;


awk -F"\t" '(NF==3)' xl_kirc_counts.txt | wc -l
102
awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/)' kirc_drivers.txt | wc -l
607

#KIRC: 102 driver genes; 607 driver mutations
#Taking xl_kirc_counts.txt and counts_kirc.txt to open in above xl file:

-------------------------------------------------------------------------

#Working on melamed et al tables; created foll sub-directory:

cd /scratch/prasannalab/cancers_in_detail

mkdir melamed_tbls

#pwd = /scratch/prasannalab/cancers_in_detail/melamed_tbls

#copied and pasted the first 4 header lines and first 6 cols of 
#Melamed Supplementary Data 3; i.e.,   
# D:\wosa4\work_on_omim_proj\cancer_mendelian\can_mendel_ncomms_s4.xlsx ;
vi mel_suppdata3_including_germline_can_syndromes.txt

#copied and pasted the first 4 header lines and first 6 cols of 
#Melamed Supplementary Data 4; i.e., 
# D:\wosa4\work_on_omim_proj\cancer_mendelian\can_mendel_ncomms_s5.xlsx);
vi mel_suppdata4_excluding_germline_can_syndromes.txt

#Melamed Figure 2 - if you count the blue squares, there are 427
#MD-cancer comorbidities;
#(15*8)+(14*5)+(13*3)+(12*3)+(11*5)+9+(8*2)+(7*3)+(5*2)+(4*2)+(3*4)+(2*13)+(1*5)
#427
#56*15 (rows * cols)
#840   (840 possible comorbidities; of these, only 427 are observed);

#considered only first col in above 2 suppdata files; 
awk -F"\t" '{IFS=OFS="\t"}(NR>5){print $1}' mel_suppdata3_including_germline_can_syndromes.txt | sort | uniq | wc -l
36
awk -F"\t" '{IFS=OFS="\t"}(NR>5){print $1}' mel_suppdata4_excluding_germline_can_syndromes.txt | sort | uniq | wc -l
31

awk -F"\t" '{IFS=OFS="\t"}(NR>5){print $1}' mel_suppdata3_including_germline_can_syndromes.txt | sort | uniq > incl
awk -F"\t" '{IFS=OFS="\t"}(NR>5){print $1}' mel_suppdata4_excluding_germline_can_syndromes.txt | sort | uniq > excl
diff --side-by-side --suppress-common-lines incl excl
#Li Fraumeni and Related Syndromes                             <
#Neurofibromatosis                                             <
#Polycystic Kidney, Autosomal Dominant                         <
#Specified Hamartoses                                          <
#Tuberous Sclerosis                                            <
#thus, it seems like there are 5 hereditary cancer syndromes;
#they are the above ones; 

#Examining Melamed Supplementary Data 1 indicates that the above hereditary cancer syndromes
#(Blair_Summary_Name) are associated with the foll OMIM disorders:
#Li Fraumeni and Related Syndromes - Li-Fraumeni syndrome, Pancreatic cancer/melanoma syndrome, 
#   Melanoma and neural system tumor syndrome, {Melanoma, cutaneous malignant, 2}, 
#Neurofibromatosis - Schwannomatosis; Neurofibromatosis, type 2; Neurofibromatosis, type 1; Watson syndrome;
#Polycystic Kidney, Autosomal Dominant - Polycystic kidney disease, adult type I; Tuberous sclerosis-2,;
#   {TSC2 angiomyolipomas, renal, modifier of},
#Specified Hamartoses - Peutz-Jeghers syndrome, Lhermitte-Duclos syndrome; Cowden syndrome 1; 
#   Cowden syndrome 2; Cowden syndrome 3; {von Hippel-Lindau disease, modifier of},;
#   von Hippel-Lindau syndrome;
#Tuberous Sclerosis - Tuberous sclerosis-2,;{TSC2 angiomyolipomas, renal, modifier of}; Tuberous sclerosis-1;

#According to:  
#https://www.mdanderson.org/prevention-screening/family-history/hereditary-cancer-syndromes.html
#hereditary cancer syndromes are: Hereditary Breast & Ovarian Cancer Syndrome (HBOC), 
#Cowden Syndrome (CS), Lynch syndrome (hereditary Non-polyposis Colorectal Cancer Syndrome or HNPCC), 
#Hereditary Leukemia and Hematologic Malignancies Syndromes, Familial adenomatous polyposis (FAP) or 
#Gardner's syndrome, Li-Fraumeni Syndrome (LFS), Multiple endocrine neoplasias (MEN);


awk -F"\t" '{IFS=OFS="\t"}(NR>5){print $1}' mel_suppdata3_including_germline_can_syndromes.txt | sort > incl
awk -F"\t" '{IFS=OFS="\t"}(NR>5){print $1}' mel_suppdata4_excluding_germline_can_syndromes.txt | sort > excl

diff --side-by-side incl excl | grep "<" | uniq
#Haemophilia                                                   <
#Hereditary Hemorrhagic Telangiectasia                         <
#Hereditary Sensory Neuropathy                                 <
#Inherited Anomalies of the Skin                               <
#Li Fraumeni and Related Syndromes                             <
#Neurofibromatosis                                             <
#Polycystic Kidney, Autosomal Dominant                         <
#Specified Anomalies of the Musculoskeletal System             <
#Specified Hamartoses                                          <
#Tuberous Sclerosis                                            <
#the main differences are the absence of entries related to the above; 
#i.e., mainly, the hereditary cancer syndromes are absent (though there
#are some others that are absent);

diff --side-by-side incl excl | grep ">"
#                                                             > Inherited Adrenogenital Disorders
#above is absent in incl, present in excl;


#considering cols 1 and 2; the commands below show, again, that the main differences are 
#the presence of germline cancer syndromes in incl, and their absence in excl; 
awk -F"\t" '{IFS=OFS="\t"}(NR>5){print $1, $2}' mel_suppdata3_including_germline_can_syndromes.txt > incl
awk -F"\t" '{IFS=OFS="\t"}(NR>5){print $1, $2}' mel_suppdata4_excluding_germline_can_syndromes.txt > excl
diff --side-by-side --suppress-common-lines incl excl | grep "<"
diff --side-by-side --suppress-common-lines incl excl | grep ">"


#making lists of (a) common genes, and (b) shared pways, from the melamed MD-cancer table 
#including germline cancer syndromes;  

wc -l mel_suppdata3_including_germline_can_syndromes.txt
185  # 185 lines in mel supp data 3 table (including 5 header lines);
awk -F"\t" '{IFS=OFS="\t"}(NR<=5);(NR>5)&&(($4)||($6)){print $1, $2, $3, $4, $5, $6}' mel_suppdata3_including_germline_can_syndromes.txt | wc -l
113  # 5 header lines; 113-5=108; 108 lines with EITHER gene OR pway informn
awk -F"\t" '{IFS=OFS="\t"}(NR>5)&&!($4)&&!($6){print $1, $2, $3, $4, $5, $6}' mel_suppdata3_including_germline_can_syndromes.txt | wc -l
72   # 72 lines with NEITHER gene NOR pway informn (no header lines); 5+108+72=185, the total no. of lines in file; 

#creating files of enriched genes and pways, when germline cancer syndromes are included;
awk -F"\t" '{IFS=OFS="\t"}(NR<=5);(NR>5)&&(($4)||($6)){print $1, $2, $3, $4, $5, $6}' mel_suppdata3_including_germline_can_syndromes.txt | awk -F"\t" '{IFS=OFS="\t"}(NR<5);(NR==5)||((NR>5)&&($4)){print $1, $2, $3, $4}' > germline_incl_enriched_genes.txt
awk -F"\t" '{IFS=OFS="\t"}(NR<=5);(NR>5)&&(($4)||($6)){print $1, $2, $3, $4, $5, $6}' mel_suppdata3_including_germline_can_syndromes.txt | awk -F"\t" '{IFS=OFS="\t"}(NR<5);(NR==5)||((NR>5)&&($6)){print $1, $2, $5, $6}' > germline_incl_enriched_pways.txt

#making lists of enriched (a) genes, and (b) pways, from the melamed MD-cancer table 
#excluding germline cancer syndromes;  

wc -l mel_suppdata4_excluding_germline_can_syndromes.txt
144  # 144 lines in mel supp data 4 table (including 5 header lines);
awk -F"\t" '{IFS=OFS="\t"}(NR<=5);(NR>5)&&(($4)||($6)){print $1, $2, $3, $4, $5, $6}' mel_suppdata4_excluding_germline_can_syndromes.txt | wc -l
64  # 5 header lines; 64-5=59; 59 lines with EITHER gene OR pway informn
awk -F"\t" '{IFS=OFS="\t"}(NR>5)&&!($4)&&!($6){print $1, $2, $3, $4, $5, $6}' mel_suppdata4_excluding_germline_can_syndromes.txt | wc -l
80   # 80 lines with NEITHER gene NOR pway informn (no header lines); 5+59+80=144, the total no. of lines in file; 

#creating files of enriched genes and pways, when germline cancer syndromes are excluded;
awk -F"\t" '{IFS=OFS="\t"}(NR<=5);(NR>5)&&(($4)||($6)){print $1, $2, $3, $4, $5, $6}' mel_suppdata4_excluding_germline_can_syndromes.txt | awk -F"\t" '{IFS=OFS="\t"}(NR<5);(NR==5)||((NR>5)&&($4)){print $1, $2, $3, $4}' > germline_excl_enriched_genes.txt
awk -F"\t" '{IFS=OFS="\t"}(NR<=5);(NR>5)&&(($4)||($6)){print $1, $2, $3, $4, $5, $6}' mel_suppdata4_excluding_germline_can_syndromes.txt | awk -F"\t" '{IFS=OFS="\t"}(NR<5);(NR==5)||((NR>5)&&($6)){print $1, $2, $5, $6}' > germline_excl_enriched_pways.txt

#separating enriched genes that are similar, when the lists of enriched genes obtained by including 
#and excluding germline cancer syndromes are compared; 
awk -F"\t" '{IFS=OFS="\t"}(NR>5){print $1, $2, $4}' germline_incl_enriched_genes.txt > incl
awk -F"\t" '{IFS=OFS="\t"}(NR>5){print $1, $2, $4}' germline_excl_enriched_genes.txt > excl
#the foll genes are common because they are not involved in the germline cancer syndromes, which occur in the incl list;  
#these are the genes that are NOT INVOLVED in the germline cancer syndromes; 
#i.e., these are bonafide comorbidity genes?
diff --side-by-side --width=150 incl excl | grep -v "<" > common_genes_comorbid_md_can.txt
#the foll genes are absent because they belong to germline cancer syndromes which are absent in the excl list;  
#these are the genes that ARE INVOLVED in the germline cancer syndromes; 
diff --side-by-side --width=150 incl excl | grep "<" > absent_genes_comorbid_md_can.txt

awk -F"\t" '{print $3}' common_genes_comorbid_md_can.txt | sed 's/,/\n/g' | sort | uniq | wc -l
24
# bonafide comorbidity genes
# ATXN10, BRAF, BTK, CACNA1C, CRB1, CREBBP, CYP27B1, EP300, EYS,
# FGD1, FGFR3, G6PD, ITPR1, MC1R, MTTP, NTRK1, PDE6B, PHKG2,
# PRPF3, RPGR, RPL5, SLC34A3, TH, UBL4A

awk -F"\t" '{print $3}' absent_genes_comorbid_md_can.txt | sed 's/,/\n/g' | sort | uniq | wc -l
15
# genes associated with comorbidity arising due to germline cancer syndromes
# ATM, CDKN2A, DNM2, F8, INF2, MITF, NEFL, NF1, NF2, PTEN, 
# SMAD4, STK11, TERT, TP53, VHL
#the above sets of genes are common genes; not necessarily statistically enriched genes;

#separating enriched pways that are similar, when the lists of enriched genes obtained by including 
#and excluding germline cancer syndromes are compared; 
awk -F"\t" '{IFS=OFS="\t"}(NR>5){print $1, $2, $4}' germline_incl_enriched_pways.txt | sed 's/;/\n\t\t/g' > incl
awk -F"\t" '{IFS=OFS="\t"}(NR>5){print $1, $2, $4}' germline_excl_enriched_pways.txt | sed 's/;/\n\t\t/g' > excl

#the foll pways are common because they are not involved in the germline cancer syndromes;  
#comorbidity related pathways shared by cancers and mds that are not hereditary cancer syndromes;
diff --side-by-side --width=600 incl excl | grep -v -e "<" -e "|" > common_pways_comorbid_md_can.txt
awk -F"\t" '{print $1, $2, $3}' common_pways_comorbid_md_can.txt | more
#CREBBP, EP300 appear to occur frequently (on the MD side);

#the foll are the pways that are, in general though not always, involved in the germline cancer syndromes; 
#comorbidity related pathways shared by cancers and hereditary cancer syndromes;
diff --side-by-side --width=600 incl excl | grep -e "<" -e "|" > absent_pways_comorbid_md_can.txt
awk -F"\t" '{print $1, $2, $3}' common_pways_comorbid_md_can.txt | more
#TP53, ATM, PTEN are seen often (on the MD side); 


#comorbidity related pathways shared by cancers and mds that are not hereditary cancer syndromes;
wc -l common_pways_comorbid_md_can.txt
325
#comorbidity related pathways shared by cancers and hereditary cancer syndromes;
wc -l absent_pways_comorbid_md_can.txt
465
#the above are pathways showing enrichment; the number of pathways shared by cancers and hereditary 
#cancer syndromes is more than the number shared by cancers and mds that are not hereditary cancer
#syndromes;

##unix diff notes:
##Note that diff has a hard-coded maximum output width (130 columns). Add the diff option --width=$COLUMNS 
##to set this to your terminal width.
## | – the pipe symbol indicates a partial change of text in a line
## > – the right-angle bracket indicates that the line is added


#Looking into Melamed table Supplementary Data 1; trying to see if the 
#table has more information than is already present in the blair table;
#(D:\wosa4\work_on_omim_proj\cancer_mendelian\can_mendel_ncomms_s2.xlsx)
#examining if this table contains more information than:
# /scratch/prasannalab/cancers_in_detail/blair_tbls/blair_s3_mdnames_genes_systems.txt

#select cols 1 to 6 in Melamed Supplementary Data 1 (can_mendel_ncomms_s2.xlsx)
#and paste to foll file:
vi temp.txt
awk -F"\t" '{IFS=OFS="\t"}{print $1, $4, $5, $6}' temp.txt > mel_suppdata1_blairsummname_genes_omim.txt

cp /scratch/prasannalab/cancers_in_detail/blair_tbls/blair_s3_mdnames_genes_systems.txt /scratch/prasannalab/cancers_in_detail/melamed_tbls/blair_s3_mdnames_genes_systems_copy.txt

awk -F"\t" '{IFS=OFS="\t"}(NR!=1){print $1}' mel_suppdata1_blairsummname_genes_omim.txt | sort | uniq | wc -l
90

awk -F"\t" '{IFS=OFS="\t"}(NR!=1){print $2}' mel_suppdata1_blairsummname_genes_omim.txt | sort | uniq | wc -l
572

#Trying to check if all the Blair_Summary_Name entries in col1 of the Melamed table
#(mel_suppdata1_blairsummname_genes_omim.txt) are to be found in the Blair table
#(blair_s3_mdnames_genes_systems_copy.txt)
#creating a srch file to search for col1 of  mel_suppdata1_blairsummname_genes_omim.txt, in 
#col1 of blair_s3_mdnames_genes_systems_copy.txt ;

awk -F"\t" '(NR!=1){print $1}' blair_s3_mdnames_genes_systems_copy.txt | sort > col1blair.txt

awk -F"\t" '{IFS=OFS="\t"}(NR!=1){print $1}' mel_suppdata1_blairsummname_genes_omim.txt | sort | uniq > t1
cp t1 t2
#modified t1 to include commands such as:
#echo -e -n "Achromatopsia" ; grep "\b
vi t1
paste -d" " t1 t2 > t3
vi t3
#modified t3 to complete the above commands to:
#echo -e -n "Achromatopsia\t" ; grep "\bAchromatopsia\b" col1blair.txt ; echo "" ;
cp t3 srch_melbcol1_in_blaircol1.sh
##rm t1 t2 t3

sh srch_melbcol1_in_blaircol1.sh
#To identify entries in Mel col1 that do not occur in Blair col1, the foll cmd was used;
sh srch_melbcol1_in_blaircol1.sh | grep -v ^$ | awk -F"\t" '($2 ~ /^$/)'

Mel col1                              Blair col1
--------                              ----------
Bartter Syndrome                      Bartters Syndrome
Congenital Hirschsprung Disease       Congenital Hirschsprungs Disease
Fragile-X Syndrome                    Fragile X Syndrome
Friedreich Ataxia                     Friedreichs Ataxia
Li Fraumeni and Related Syndromes     Li-Fraumeni and Related Syndromes
Spinocerebellar Ataxia                Spinocerebellar ataxia

#made the above changes; i.e., in srch_melbcol1_in_blaircol1.sh, changed, for e.g.,
#"Bartter Syndrome" to "Bartters Syndrome", "Spinocerebellar Ataxia" to "Spinocerebellar ataxia", etc.;

sh srch_melbcol1_in_blaircol1.sh | grep -v ^$ | awk -F"\t" '($2 ~ /^$/)'
#now, there is no output; i.e., all the Mel col1 entries are found in Blair col1;
 
#next, have to check if all the genes in Mel col2 are to be found in Blair col5
#extracting genes from blair col5
awk -F"\t" '(NR!=1){print $5}' blair_s3_mdnames_genes_systems_copy.txt | sed 's/,/\n/g' | sort | uniq | wc -l
594
awk -F"\t" '(NR!=1){print $5}' blair_s3_mdnames_genes_systems_copy.txt | sed 's/,/\n/g' | sort | uniq > col5blair.txt
 
#extracting genes from mel col2
awk -F"\t" '{IFS=OFS="\t"}(NR!=1){print $2}' mel_suppdata1_blairsummname_genes_omim.txt | sort | uniq | wc -l
572
awk -F"\t" '{IFS=OFS="\t"}(NR!=1){print $2}' mel_suppdata1_blairsummname_genes_omim.txt | sort | uniq > t1

cp t1 t2
#modified t1 to include commands such as:
#echo -e -n "ABCA1" ; grep "\b
vi t1
paste -d" " t1 t2 > t3
vi t3
#modified t3 to complete the above commands to:
#echo -e -n "ABCA1\t" ; grep "\bABCA1\b" col5blair.txt ; echo "" ;
cp t3 srch_melbcol5_in_blaircol5.sh

sh srch_melbcol5_in_blaircol5.sh
##rm t1 t2 t3
#To identify entries in Mel col2 that do not occur in Blair col5, the foll cmd was used;
sh srch_melbcol5_in_blaircol5.sh | grep -v ^$ | awk -F"\t" '($2 ~ /^$/)'
ATXN8  - Spinocerebellar Ataxia
EXT3   - Non-Specified Osteodystrophy
FAM3A  - Disorders of Branched Chain Amino Acid Metabolism
FRAXA  - Fragile-X Syndrome
LDHD   - Disorders of Branched Chain Amino Acid Metabolism
PEX2   - Peroxisomal Disorders
PMPCA  - Congenital Hydrocephalus
SFTPA1 - Degenerative Diseases of the Basal Ganglia
SFTPA2 - Degenerative Diseases of the Basal Ganglia
TACR1  - Dopa-Responsive Dystonia
TRNL1  - Chronic Progressive External Ophthalmoplegia
TRNS2  - Retinitis Pigmentosa
UBL4A  - Glucose-6-Phosphate Dehydrogenase Deficiency
#Thus, above 13 genes in mel col2 are not found in blair col5; 
#using vi to see which blair_summary_name they belong to; 
vi mel_suppdata1_blairsummname_genes_omim.txt
#the blair_summary_name for the 13 genes is given above;

#Thus, all diseases in Mel col1 are present in Blair col1
#However, the above 13 genes are present in Mel col 2, but are absent in Blair col5;

#MANUALLY introducing these genes in: 
#/scratch/prasannalab/cancers_in_detail/melamed_tbls/blair_s3_mdnames_genes_systems_copy.txt
#Note: the file is a COPY of the original file (which is: 
#/scratch/prasannalab/cancers_in_detail/blair_tbls/blair_s3_mdnames_genes_systems.txt);
vi blair_s3_mdnames_genes_systems_copy.txt

#Regenerating coadread, brca, kirc files using this file;

#USING MODIFIED blair_s3_mdnames_genes_systems_copy.txt , created above;
#rerunning the foll commands from line 332 above, because blair_s3_mdnames_genes_systems_copy.txt
#has changed with the addition of 13 genes
awk -F"\t" '{IFS=OFS="\t"}{print $1, $4, $5, $6, $7}' blair_s3_mdnames_genes_systems_copy.txt > md_summarynames_genes_copy.txt


#Final command;
awk -F"\t" '{IFS=OFS="\t"} BEGIN { print "Global relative risk\tlog10 global relative risk\tComplex Disease\tMendelian Disease\tGender\tSummary Name\tSummary Name\tAssociated Mendelian Disorders\tGenes\tPrimary Affected System\tSecondary Affected Systems" } \
NR==FNR {summ_nm[$1]=$1; rest[$1]=$0; next} \
NR!=FNR && FNR>1 && ($4 in summ_nm){print $1, $2, $3, $4, $5, summ_nm[$4], rest[$4]}' md_summarynames_genes_copy.txt /scratch/prasannalab/cancers_in_detail/blair_tbls/globalrisk_log10descordr2_canordr1_md.txt > temp.txt
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $5, $3, $4, $6, $8, $9, $10, $11}' temp.txt > complexdiseases_md_genes_merged_copy.txt

awk -F"\t" '{IFS=OFS="\t"}($4 ~ /^Breast Cancer$/)' complexdiseases_md_genes_merged_copy.txt > brca_md_assocns_blair_copy.txt
awk -F"\t" '{IFS=OFS="\t"}($4 ~ /^Colorectal Cancer$/)' complexdiseases_md_genes_merged_copy.txt > coadread_md_assocns_blair_copy.txt
awk -F"\t" '{IFS=OFS="\t"}($4 ~ /^Kidney Cancer$/)' complexdiseases_md_genes_merged_copy.txt > kirc_md_assocns_blair_copy.txt

#Opening complexdiseases_md_genes_merged_copy.txt, brca_md_assocns_blair_copy.txt, coadread_md_assocns_blair_copy.txt in xl;
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns
#sheets = comorbid_complex_md_genes, coadread_md_assocns_blair, brca_md_assocns_blair

#Opening kirc_md_assocns_blair_copy.txt as: sheet = kirc_md_assocns_blair in above xl file;

pwd = /scratch/prasannalab/cancers_in_detail/melamed_tbls

#the counts of genes below have changed for each cancer;
awk -F"\t" '{print $8}' coadread_md_assocns_blair_copy.txt | sed 's/,/\n/g' | sort | uniq > coadread_md_genelist_blair_copy.txt
wc -l coadread_md_genelist_blair_copy.txt
307  #there are 307 genes associated with mds comorbid with coadread
awk -F"\t" '{print $8}' brca_md_assocns_blair_copy.txt | sed 's/,/\n/g' | sort | uniq > brca_md_genelist_blair_copy.txt
wc -l brca_md_genelist_blair_copy.txt
342  #there are 342 genes associated with mds comorbid with brca
awk -F"\t" '{print $8}' kirc_md_assocns_blair_copy.txt | sed 's/,/\n/g' | sort | uniq > kirc_md_genelist_blair_copy.txt
wc -l kirc_md_genelist_blair_copy.txt
266  #there are 266 genes associated with mds comorbid with brca


#the numbers below (48, 61, 49) do not change because the none of the additional 13 genes from the melamed 
#supp table 2 are in oncokb;
cp /scratch/prasannalab/cancers_in_detail/blair_tbls/srch_oncokb_genes_in_coadread_md_genelist_blair.sh srch_oncokb_genes_in_coadread_md_genelist_blair_copy.sh
#edit the copied file and replace filename, coadread_md_genelist_blair.txt, with filename coadread_md_genelist_blair_copy.txt
vi srch_oncokb_genes_in_coadread_md_genelist_blair_copy.sh

sh srch_oncokb_genes_in_coadread_md_genelist_blair_copy.sh | awk '(NF==2)' |  wc -l
48   #there are 48 oncokb genes which are associated with md which are comorbid with coadread;
sh srch_oncokb_genes_in_coadread_md_genelist_blair_copy.sh | grep -v ^$ > coadread_md_genes_oncokb_order_copy.txt

cp srch_oncokb_genes_in_coadread_md_genelist_blair_copy.sh srch_oncokb_genes_in_brca_md_genelist_blair_copy.sh
#edit copied file and replace filename, coadread_md_genelist_blair_copy.txt, with filename, brca_md_genelist_blair_copy.txt
sh srch_oncokb_genes_in_brca_md_genelist_blair_copy.sh | awk '(NF==2)' |  wc -l
61   #there are 61 oncokb genes which are associated with md which are comorbid with brca; 
sh srch_oncokb_genes_in_brca_md_genelist_blair_copy.sh | grep -v ^$ > brca_md_genes_oncokb_order_copy.txt

cp srch_oncokb_genes_in_coadread_md_genelist_blair_copy.sh srch_oncokb_genes_in_kirc_md_genelist_blair_copy.sh
#edit copied file and replace filename, coadread_md_genelist_blair_copy.txt, with filename, kirc_md_genelist_blair_copy.txt
sh srch_oncokb_genes_in_kirc_md_genelist_blair_copy.sh | awk '(NF==2)' |  wc -l
49   #there are 49 oncokb genes which are associated with md which are comorbid with kirc; 
sh srch_oncokb_genes_in_kirc_md_genelist_blair_copy.sh | grep -v ^$ > kirc_md_genes_oncokb_order_copy.txt

#No need to do the foll because the new files are same as old;
#Taking files, coadread_md_genes_oncokb_order_copy.txt and brca_md_genes_oncokb_order_copy.txt, to xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx , 
#sheet = oncokb_genes_in_comorbid_md_can ;

#Taking kirc_md_genes_oncokb_order_copy.txt, to xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx , 
#sheet = oncokb_genes_in_comorbid_md_can ;


#Identifying genes associated with mds comorbid with cancer, which are also drivers in the cancer;
cp /scratch/prasannalab/cancers_in_detail/blair_tbls/srch_coadread_drivers_in_md_genelist_blair.sh /scratch/prasannalab/cancers_in_detail/melamed_tbls/srch_coadread_drivers_in_md_genelist_blair_copy.sh
#edit srch_coadread_drivers_in_md_genelist_blair_copy.sh and replace filename 
#coadread_md_genelist_blair.txt with coadread_md_genelist_blair_copy.txt

sh srch_coadread_drivers_in_md_genelist_blair_copy.sh | awk '(NF==2)' | wc -l
21  #21 genes associated with mds comorbid with coadread are coadread drivers;
sh srch_coadread_drivers_in_md_genelist_blair_copy.sh | grep -v ^$ > coadread_drivers_in_md_copy.txt

#Likewise, get brca drivers that are found in the list of genes associated with comorbid mds;  
cp /scratch/prasannalab/cancers_in_detail/blair_tbls/srch_brca_drivers_in_md_genelist_blair.sh /scratch/prasannalab/cancers_in_detail/melamed_tbls/srch_brca_drivers_in_md_genelist_blair_copy.sh
#edit srch_brca_drivers_in_md_genelist_blair_copy.sh and replace filename 
#brca_md_genelist_blair.txt with brca_md_genelist_blair_copy.txt

sh srch_brca_drivers_in_md_genelist_blair_copy.sh | awk '(NF==2)' | wc -l
25  #25 genes associated with mds comorbid with brca are brca drivers;
sh srch_brca_drivers_in_md_genelist_blair_copy.sh | grep -v ^$ > brca_drivers_in_md_copy.txt

#above and below, the numbers (21, 25, 13) do not change; hence, maybe no need to update
#the xl file below;
#taking coadread_drivers_in_md_copy.txt and brca_drivers_in_md_copy.txt to xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx , 
#sheet = mdgenes_are_candrivers ;

#Likewise, get kirc drivers that are found in the list of genes associated with comorbid mds;  
cp /scratch/prasannalab/cancers_in_detail/blair_tbls/srch_kirc_drivers_in_md_genelist_blair.sh /scratch/prasannalab/cancers_in_detail/melamed_tbls/srch_kirc_drivers_in_md_genelist_blair_copy.sh
#edit srch_kirc_drivers_in_md_genelist_blair_copy.sh and replace filename 
#kirc_md_genelist_blair.txt with kirc_md_genelist_blair_copy.txt

sh srch_kirc_drivers_in_md_genelist_blair_copy.sh | awk '(NF==2)' | wc -l
13  #13 genes associated with mds comorbid with kirc are kirc drivers;
sh srch_kirc_drivers_in_md_genelist_blair_copy.sh | grep -v ^$ > kirc_drivers_in_md_copy.txt

#taking kirc_drivers_in_md_copy.txt to xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx , 
#sheet = mdgenes_are_candrivers ;

--------------------------------------------------

#30-August-22
#Decided to use DAVID to complete the table listing genes and omim diseases (i.e., 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx );
#omim diseases have not been identified for blair-mel-genes-not-in-oncokb; hence, decided to
#identify them and complete the table; 

#pwd = /scratch/prasannalab/cancers_in_detail/oncokb_to_omim/blair_mel_genes_not_in_oncokb_to_omim

cp /scratch/prasannalab/cancers_in_detail/holiday_work_may2022/blair_mel_genes_not_in_oncokb.txt b_m_g_not_in_oncokb.txt
wc -l b_m_g_not_in_oncokb.txt
396

#Went to DAVID site (https://david.ncifcrf.gov/home.jsp); clicked Start Analysis;
#downloaded the above file to windows 
#(D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\b_m_g_not_in_oncokb.txt), 
#and opened it using Notepad++; copied and pasted the set of 396 genes from Notepad++ 
#to DAVID Enter Gene List box; 
#Set Select Identifier to OFFICIAL_GENE_SYMBOL; for Select species - entered Homo sapiens;
#List type - Gene List; clicked Submit List; 
#selected "Functional Annotation Tool", under "Disease", selected only OMIM_DISEASE; 
#by clicking on the purple bar next to OMIM_DISEASE, obtained the Functional Annotation Table 
#that I needed; downloaded this table as:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\b_m_g_not_in_oncokb_omim_annotn.txt

#There are 396 Ids in the submitted list (b_m_g_not_in_oncokb.txt) 
#However, DAVID identifies omim diseases only for 367 out of 396 Ids; 
#DAVID indicates that 383 Homo sapiens Ids have been submitted; 
#the UNMAPPED Ids are the foll 13: 
CHROM  KARS  C10orf2  WHSC1  IKBKAP  GARS  TRNS2  G6PC  TRNL1  C2orf71  YARS  LEPRE1  KAL1  
#367+13=380; 
#thus, presumably, for 16 genes, DAVID does not assign omim diseases; 

#transferred above Functional Annotation Table (b_m_g_not_in_oncokb_omim_annotn.txt) file to foll directory: 
#pwd = /scratch/prasannalab/cancers_in_detail/oncokb_to_omim/blair_mel_genes_not_in_oncokb_to_omim

####below, commands from pilot round are being repeated;
#The above file does not list OMIM diseases in a usable format; more than one disease is listed 
#in a line; hence tried the foll. commands to improve the format; also wrote a small perl program 
#to (almost) get the OMIM disease listed in a way that it could be used;

#Foll. commands all work;
#awk -F"\t" '{print $4}' b_m_g_not_in_oncokb_omim_annotn.txt > junk
#sed 's/\(,\)\([0-9]\+\)/\1\n\2/g' junk | more
#sed 's/\(,\)\([0-9]\+\~\)/\1\n\2/g' junk | more
#sed 's/\(,\)\([[:digit:]]\+\)/\1\n\2/g' junk | more

#https://www.gnu.org/software/gawk/manual/html_node/String-Functions.html
#awk '{print gensub ( /(,)([0-9]+~)/, "\\1\n\\2","g", $0)}' junk | more
#awk -F"\t" '{print gensub ( /(,)([0-9]+~)/, "\\1\n\\2","g", $4); printf "\n"}' b_m_g_not_in_oncokb_omim_annotn.txt | more

#awk -F"\t" '{print gensub ( /(,)([0-9]+~)/, "\\1\n\\2","g", $4); printf "\n"}' b_m_g_not_in_oncokb_omim_annotn.txt | sed 's/\([a-zA-Z]\+\)\(\~[a-zA-Z]\+\)/\1\n\2/g' | more

#Create a file with cols 1 (ID), 2 (Gene Name), 3 (Species) of oncokb_genes_omim_annotn.txt
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3}' b_m_g_not_in_oncokb_omim_annotn.txt > cols123_b_m_g_not_in_oncokb_omim_annotn.txt 
#awk -F"\t" '{print gensub ( /(,)([0-9]+~)/, "\\1\n\\2","g", $4); printf "\n"}' b_m_g_not_in_oncokb_omim_annotn.txt | sed 's/\([a-zA-Z]\+\)\(\~[a-zA-Z]\+\)/\1\n\2/g' > cols123_b_m_g_not_in_oncokb_omim_annotn.txt

#Created a file containing only col 4 (OMIM_DISEASE) of b_m_g_not_in_oncokb_omim_annotn.txt; the col
#has been modified to have one disease listed on one line;    
awk -F"\t" '{print gensub ( /(,)([0-9]+~)/, "\\1\n\\2","g", $4); printf "\n"}' b_m_g_not_in_oncokb_omim_annotn.txt | sed 's/\([a-zA-Z]\+\)\(\~[a-zA-Z]\+\)/\1\n\2/g' | sed 's/\( \)\([[:digit:]]\{6\}\)\(\~[a-zA-Z]\+\)/\n\2\3/g' > col4_b_m_g_not_in_oncokb_omim_annotn.txt

#edit col4_b_m_g_not_in_oncokb_omim_annotn.txt and manually adjust instances which have not been correctly 
#taken care of by above commands (e.g., 
vi col4_b_m_g_not_in_oncokb_omim_annotn.txt
/\~.*\~
#There were no instances of multiple ~ in a line; 
#however, there are instances where a single entry has been split into two because of the ~ and above commands;
#manually appropriately restored these to a single line;
#e.g., restored the foll entry:  
Hypertrypsinemia, neonatal
~Hypertrypsinemia, neonatal,Sweat chloride elevation without CF
~Sweat chloride elevation without CF,
#to the one below;
Hypertrypsinemia, neonatal~Hypertrypsinemia, neonatal,
Sweat chloride elevation without CF~Sweat chloride elevation without CF,
#Likwise, restored the foll entry:
EBD, localisata variant
~EBD, localisata variant,
#to the one below;
EBD, localisata variant~EBD, localisata variant,
 

#Used the previously written join_drigenes_omimpheno.pl program; it adds cols 1 (ID), 2 (Gene Name), 3 (Species) 
#from cols123_b_m_g_not_in_oncokb_omim_annotn.txt, to each disease line in col4 (OMIM_DISEASE) from file 
#col4_b_m_g_not_in_oncokb_omim_annotn.txt;
#the output file is cols1234_b_m_g_not_in_oncokb_omim_annotn.txt;

perl /scratch/prasannalab/43drigenes_to_omim/join_drigenes_omimpheno.pl cols123_b_m_g_not_in_oncokb_omim_annotn.txt col4_b_m_g_not_in_oncokb_omim_annotn.txt cols1234_b_m_g_not_in_oncokb_omim_annotn.txt 

#Out of 396 blair_mel genes, DAVID provides disease annotation for 367 genes;
cut -f1,1 b_m_g_not_in_oncokb_omim_annotn.txt | grep -v ^ID$ | wc -l
367


##27-Aug-2022
#some lines below were modified on 27-Aug-2022 as the xl table showed an error in "Species" col;
#The genes and diseases need to be arranged in b_m_g_not_in_oncokb_omim.txt order;  
#A prep file has to be created; the file should be along the lines of ONE of the foll files:
#/scratch/prasannalab/cancers_in_detail/brca/prep_xl_brca_counts.sh OR  
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/prep_omim_oncokb.sh ; 
#the prep file below is based on the former file (prep_xl_brca_counts.sh),  
#but the output file is as in the latter file (prep_omim_oncokb.sh);
#i.e., used the grep command of former file; used filename cols1234_b_m_g_not_in_oncokb_omim_annotn.txt  
#as in latter file; 

### using grep cmd instead of awk DID NOT WORK, because there was an error in xl table; 
### hence decided to use the awk cmd instead of grep; i.e., create a file along the lines
### of /scratch/prasannalab/cancers_in_detail/oncokb_to_omim/prep_omim_oncokb.sh ; 
### pwd = /scratch/prasannalab/cancers_in_detail/oncokb_to_omim/blair_mel_genes_not_in_oncokb_to_omim
### mv prep_b_m_order.sh old_prep_b_m_order_grep_cmd.sh
cp b_m_g_not_in_oncokb.txt prep_b_m_order.sh
#edited the file prep_b_m_order.sh to include cmds of the foll kind; 
#echo -e -n "ABL1\t" ; awk -F"\t" '{IFS=OFS="\t"}($1 ~ /^ABL1$/)' cols1234_omim_oncokb.txt ; echo "" ;
vi prep_b_m_order.sh
#:1,$s/^/echo -e -n "/
#:1,$s/\t//
#:1,$s/$/\\t"/
#:1,$s/$/ ; awk -F"\\t" '{IFS=OFS="\\t"}(\$1 \~ \/\^/
#:wq
paste -d" " prep_b_m_order.sh b_m_g_not_in_oncokb.txt > temp
vi temp
#:1,$s/\^ /\^/
#:1,$s/\t//
#:1,$s/$/\$\/)' cols1234_b_m_g_not_in_oncokb_omim_annotn.txt ; echo "" ;/
#:wq
cp temp prep_b_m_order.sh

#ran the .sh script as follows:
sh prep_b_m_order.sh | awk -F"\t" '($1 == $2){sub($1 FS,"")}1' | more
#substitute $1 and Field Separator with a null string; 1 means print every line;
#following also works fine;
#sh prep_b_m_order.sh | awk -F"\t" '($1 == $2){sub($1FS,x)}1' | more

#Using above command to create a list of 396 genes in b_m_g_not_in_oncokb.txt order, which lists, 
#for those genes associated with omim diseases, the set of associated omim diseases;
### mv omim_diseases_for_b_m_g_not_in_oncokb.txt old_omim_diseases_for_b_m_g_not_in_oncokb.txt
sh prep_b_m_order.sh | awk -F"\t" '($1 == $2){sub($1 FS,"")}1' | grep -v ^$ > omim_diseases_for_b_m_g_not_in_oncokb.txt
##ends here;

#taking this output file, i.e., 
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/blair_mel_genes_not_in_oncokb_to_omim/omim_diseases_for_b_m_g_not_in_oncokb.txt
#to the xl file: 
D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns; sheet = oncokb_b_m_g_omim_assocn

#also taking the equivalent file created for oncokb genes (i.e., 
# /scratch/prasannalab/cancers_in_detail/oncokb_to_omim/genes_oncokb_order_omim_diseases.txt )
#to the above excel file and sheet; plan to include both oncokb and blair_mel genes, and their 
#omim associations on the same sheet; 

#Number of genes not associated with any omim disease; i.e., DAVID does
#not provide omim disease annotation for 29 genes;
sh prep_b_m_order.sh | awk -F"\t" '($1 == $2){sub($1 FS,"")}1' | awk '(NF==1)' | wc -l
#29     among these 29, unmapped gene IDs are 13 in number (as mentioned above);
#checking (by removing wc -l in above cmd) showed that the above 13 unmapped ids occur in this list;
#29 - 13 = 16  i.e., 16 genes with mapped gene IDs, but no associated omim disease; the numbers tally 
#with those given above

#Number of genes associated with one or more omim diseases; i.e., DAVID 
#provides omim disease annotation for 367 genes;
sh prep_b_m_order.sh | awk -F"\t" '($1 == $2){sub($1 FS,"")}1' | awk '(NF>2){print $1}' | sort | uniq | wc -l
#367
#367 + 29 = 396

#No. of OMIM disease entries in cols1234_omim_oncokb.txt
#That is, the 555 genes for which DAVID provides annotations, are 
#associated with 1201 diseases; some of the diseases may be duplicated;
grep -v ^$ cols1234_b_m_g_not_in_oncokb_omim_annotn.txt | wc -l
770
#Foll. cmd gives same result as command above command;
awk -F"\t" '{print $4}' cols1234_b_m_g_not_in_oncokb_omim_annotn.txt | grep -v ^$ | wc -l
770

#The 367 genes are associated with 762 diseases with OMIM numbers; some
#of the diseases may be duplicated;  
awk -F"\t" '($4 ~ /^[[:digit:]]/){print $4}' cols1234_b_m_g_not_in_oncokb_omim_annotn.txt | wc -l
762
#The 367 genes are associated with 680 unique diseases, with OMIM numbers;
awk -F"\t" '($4 ~ /^[[:digit:]]/){print $4}' cols1234_b_m_g_not_in_oncokb_omim_annotn.txt | sed 's/~/\t/' | cut -f1,1 | sort | uniq -c | wc -l
680
#Foll. cmd gives list of OMIM numbers for 680 unique diseases;
awk -F"\t" '($4 ~ /^[[:digit:]]/){print $4}' cols1234_b_m_g_not_in_oncokb_omim_annotn.txt | sed 's/~/\t/' | cut -f1,1 | sort | uniq -c | awk '{print $2}' > b_m_g_not_in_oncokb_uniq_diseases_lst.txt
wc -l b_m_g_not_in_oncokb_uniq_diseases_lst.txt
680 unique diseases

#Foll. cmd gives list of OMIM numbers for repeating diseases (63);
awk -F"\t" '($4 ~ /^[[:digit:]]/){print $4}' cols1234_b_m_g_not_in_oncokb_omim_annotn.txt | sed 's/~/\t/' | cut -f1,1 | sort | uniq -c | awk -F" " '($1 > 1){print}' | awk -F" " '{print $2}' > b_m_g_not_in_oncokb_repeating_diseases_lst.txt
wc -l b_m_g_not_in_oncokb_repeating_diseases_lst.txt
63 repeating diseases

cp b_m_g_not_in_oncokb_repeating_diseases_lst.txt not_in_oncokb_runrepeat.sh
#edited not_in_oncokb_runrepeat.sh and turned it into a cmd file with commands like:
grep "102700" cols1234_b_m_g_not_in_oncokb_omim_annotn.txt
grep "106210" cols1234_b_m_g_not_in_oncokb_omim_annotn.txt
grep "113900" cols1234_b_m_g_not_in_oncokb_omim_annotn.txt
grep "120430" cols1234_b_m_g_not_in_oncokb_omim_annotn.txt

#the genes associated with some repeating diseases may be identified by the foll cmd;
awk -F"\t" '($4 ~ /^[[:digit:]]/){print $4}' cols1234_b_m_g_not_in_oncokb_omim_annotn.txt | sed 's/~/\t/' | cut -f1,1 | sort | uniq -c | awk -F" " '($1 > 1){print}' | sort -k1,1r
#136880 - PRPH2, RLBP1, RHO
#145900 - EGR2, MPZ, PRX, PMP22 
#209920 - RFXAP, RFX5, RFX5 
#140700 - HBA1, HBA2, HBB

--------------------------------------------

#Plan to work on Blair et al. tables in unix; created sub-directory
cd /scratch/prasannalab/cancers_in_detail
mkdir blair_tbls
pwd = /scratch/prasannalab/cancers_in_detail/blair_tbls

#copied and pasted entire blair table s4 in file below:
vi blair_s4_complex_md.txt

#Melamed Supplementary Data 2 gives the equivalence between Blair Complex disease name 
#and the TCGA code:
#Blair Complex disease name = TCGA code

#Bladder Cancer = BLCA
#Breast Cancer = BRCA
#Colorectal Cancer = COAD, READ
#Gastric Cancer = STAD
#Kidney Cancer = KICH, KIRC, KIRP
#Lung Cancer = LUAD, LUSC
#Malignant Brain Neoplasm = GBM, LGG
#Melanoma = SKCM
#Prostate Cancer = PRAD
#Uterine Cancer = UCEC

#Thus, in the blair_s4_complex_md.txt file, search only for the above cancers,
#and obtain co-morbid MDs for each of them;

#The following TCGA cancers are not a part of Blair and Melamed studies;
#Thyroid carcinoma (THCA), Acute Myeloid Leukemia (LAML), 
#Ovarian serous cystadenocarcinoma (OV), Head and neck squamous cell carcinoma (HNSC)

awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $1,$2,$3,$8}' blair_s4_complex_md.txt | awk -F"\t" '{IFS=OFS="\t"}($1 ~ /Cancer/)||($1 ~ /Melanoma/)||($1 ~ /Malignant Brain Neoplasm/){print $1, $2, $3, $4}' | wc -l
318  #the total number of cancer-MD co-morbidity relations found in blair s4 table

awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $1,$2,$3,$8}' blair_s4_complex_md.txt | awk -F"\t" '{IFS=OFS="\t"}($1 ~ /Cancer/)||($1 ~ /Melanoma/)||($1 ~ /Malignant Brain Neoplasm/){print $4, $1, $2, $3}' | sort -k2,2 -k1,1nr | more

#Using sed to truncate to 4 decimal places;
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $1,$2,$3,$8}' blair_s4_complex_md.txt | awk -F"\t" '{IFS=OFS="\t"}($1 ~ /Cancer/)||($1 ~ /Melanoma/)||($1 ~ /Malignant Brain Neoplasm/){print $4, $1, $2, $3}' | sed -E 's/([0-9]*\.[0-9]{4})[0-9]*/\1/' | sort -k2,2 -k1,1nr | more

#as long as the decimal numbers col (i.e., global relative risk col) is the first col, sort works, even 
#if numbers have many decimal places; sort nr and gr work; however, if the decimal numbers col is not 
#the first col, sort does not work; 
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $1,$2,$3,$8}' blair_s4_complex_md.txt | awk -F"\t" '{IFS=OFS="\t"}($1 ~ /Cancer/)||($1 ~ /Melanoma/)||($1 ~ /Malignant Brain Neoplasm/){print $4, $1, $2, $3}' | sed -E 's/([0-9]*\.[0-9]{4})[0-9]*/\1/' | sort -k2,2 -k1,1gr | more

#Setting number of decimal places for reporting risk ratios: rule of four:
#"Round the risk ratio to two significant digits if the leading non-zero digit is four or more, 
#otherwise round to three;"
#The rule of four is recommended as the better way to report risk ratios; 

#awk built in arithmetic function, log($1), calculates the natural logarithm of a variable;
#the formula for calculating log to the base 10 is:
# log($1)/log(10) 

#Blair Figure 2 uses log base 10 (global relative risk); hence above command becomes the foll.;
#have used 4 decimal places for both global relative risk and its log10 value; sed -E is used to 
#support extended regular expressions;
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $1,$2,$3,$8}' blair_s4_complex_md.txt | awk -F"\t" '{IFS=OFS="\t"}($1 ~ /Cancer/)||($1 ~ /Melanoma/)||($1 ~ /Malignant Brain Neoplasm/){print $4, log($4)/log(10), $1, $2, $3}' | sed -E 's/([0-9]*\.[0-9]{4})[0-9]*/\1/g' | sort -k3,3 -k2,2gr > globalrisk_log10descordr2_canordr1_md.txt 

#introducing a header in above file;
mv globalrisk_log10descordr2_canordr1_md.txt temp
echo "Global relative risk\tlog10 global relative risk\tComplex Disease\tMendelian Disease\tGender\t" > globalrisk_log10descordr2_canordr1_md.txt
cat temp >> globalrisk_log10descordr2_canordr1_md.txt
rm temp

#Next, copied and pasted entire blair table s3 in file below:
vi blair_s3_mdnames_genes_systems.txt

awk -F"\t" '{IFS=OFS="\t"}{print $1, $4, $5, $6, $7}' blair_s3_mdnames_genes_systems.txt > md_summarynames_genes.txt
---------------------------------------------------------------------
---------------------------------------------------------------------
#NOTE: blair_s3_mdnames_genes_systems.txt was modified in melamed area to 
#/scratch/prasannalab/cancers_in_detail/melamed_tbls/blair_s3_mdnames_genes_systems_copy.txt
#this copy file has 13 more genes, added from Melamed supp tbl 2;
#commands below need to be used with this new file; see line down below called:
#"USING MODIFIED blair_s3_mdnames_genes_systems_copy.txt"
---------------------------------------------------------------------
---------------------------------------------------------------------

#Need to use the "Mendelian Disease" col in globalrisk_log10descordr2_canordr1_md.txt file, 
#as the search pattern, to search in the "Summary Name" col of md_summarynames_genes.txt (see below); 

---------------------------------------------------------------------

#20-8-22
#Created a new .sh file to complete cancer mutation collection:
# /scratch/prasannalab/cancers_in_detail/cmd2_completing_cancer_mutn_collection.sh
#i.e., to compile the mutations of HNSC, GBM, LAML, LUAD, SKCM;

---------------------------------------------------------------------
############################################################

#2) MASTERFILE2 = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/cmd2_completing_cancer_mutn_collection.sh

#Working with HNSC mutations; HNSC = Head and Neck Squamous Cell Carcinoma; 523 samples;  

cd /scratch/prasannalab/cancers_in_detail

mkdir hnsc

pwd = /scratch/prasannalab/cancers_in_detail/hnsc

#For the TCGA HNSC PanCan Atlas cohort, genes with driver mutations (or driver genes)
#have been downloaded from cBioPortal; cBioPortal annotates driver genes and mutations
#from OncoKB and CancerHotspots; the list of 1066 cancer (or driver) genes in OncoKB 
#is in the foll excel file and sheet:  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail\cancer_selection_oncokbgenes
#sheet = oncokb_gene_list 
#the subset of oncokb genes which have mutations in hnsc are listed in the file:
# d:\actrec_work\joined_actrec_nov21\cancer_MD_proj_ongoing4_tcga_data_collection.docx
#copied and pasted these genes into the file: msword_list_hnsc_mutated_genes.txt
#this file needed to be modified to include newlines; hence foll. awk cmd used; 

awk -F", " 'BEGIN {RS = ", |\n"} {{for(i=1; i<=NF; i++) printf $i " "} print ""}' msword_list_hnsc_mutated_genes.txt > hnsc_mutated_genes.txt

#The subset of the oncokb set of driver genes, with driver mutations in HNSC, are
#in the file: hnsc_mutated_genes.txt
wc -l hnsc_mutated_genes.txt
214    #there are 214 driver genes in hnsc;

#To create a single file containing all hnsc driver genes and mutations obtained from cbioportal,
#used the hnsc_mutated_genes.txt file to create the .sh file: prep_hnsc_drivers_file.sh
#the file contained commands of the following kind;
#awk -F"\t" '{IFS=OFS="\t"}{print "ABL1", $0}' ABL1.tsv
cp hnsc_mutated_genes.txt prep_hnsc_drivers_file.sh
vi prep_hnsc_drivers_file.sh
#:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}{print "/
#:1,$s/$/", \$0}'/
#:wq
paste -d" " prep_hnsc_drivers_file.sh hnsc_mutated_genes.txt > temp.txt 
cp temp.txt prep_hnsc_drivers_file.sh
vi prep_hnsc_drivers_file.sh
#:1,$s/$/.tsv/
#:1,$s/ .tsv/.tsv/
#:wq

#created a subdir: /scratch/prasannalab/cancers_in_detail/hnsc/cbio_hnsc_tsvfiles
#uploaded all .tsv files from the foll windows area:
# d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\HNSC\hnsc_driver_tsvfiles
#to the foll sub-dir; 
#cd /scratch/prasannalab/cancers_in_detail/hnsc/cbio_hnsc_tsvfiles
mv ../prep_hnsc_drivers_file.sh .
#edited the file: /scratch/prasannalab/cancers_in_detail/hnsc/cbio_hnsc_tsvfiles/prep_hnsc_drivers_file.sh
#and manually replaced file names of the type below: 
#e.g., HLA-A.tsv with HLA_A.tsv, HLA-B.tsv with HLA_B.tsv, HLA-C.tsv with HLA_C.tsv, NKX3-1.tsv with NKX3_1.tsv, 
#H1-5.tsv with H1_5.tsv; i.e., MADE NO CHANGE in the gene name col; made the change only in the 
#.tsv filename col; 
#in hnsc, the .tsv files that need to be changed are: HLA_A.tsv, HLA_B.tsv, H1_5.tsv, HLA_C.tsv

#checking the number of lines in the .tsv files showed that one gene (EPHA7) had
#no mutation entry; 
wc -l *.tsv | grep "1 "
#  1 EPHA7.tsv
#went back to cbioportal and checked hnsc EPHA7 again; found that the correct file has one
#nonsense mutation; downloaded the correct file and transferred it to prasannalab area;
#now, the above wc -l *.tsv command shows that there are no .tsv files with 0 mutations;

sh prep_hnsc_drivers_file.sh > hnsc_drivers.txt
#moved hnsc_drivers.txt back to pwd;
mv /scratch/prasannalab/cancers_in_detail/hnsc/cbio_hnsc_tsvfiles/hnsc_drivers.txt /scratch/prasannalab/cancers_in_detail/hnsc/.

awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/){print $1}' hnsc_drivers.txt | uniq -c | \
awk -F" " '{IFS=OFS="\t"}{print $1, $2}' | sort -k1,1nr > counts_hnsc.txt

awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/){print $1}' hnsc_drivers.txt | uniq -c | \
awk -F" " '{print $1}' | awk 'BEGIN {total=0}; {total=total+$1} END {print total}'
1646  #this is the total number of driver mutations in hnsc;

#A file containing the list of 1066 oncokb genes was created previously, for coadread (by cutting and
#pasting the genes col from d:\actrec_work\joined_actrec_nov21\proj_in_detail\cancer_selection_oncokbgenes, 
#sheet = oncokb_gene_list, to the file oncokb_gene_list.txt); this file was then modified to the .sh file:
#/scratch/prasannalab/cancers_in_detail/coadread/prep_xl_coadread_counts.sh
#copied this prep file to pwd;

cp /scratch/prasannalab/cancers_in_detail/coadread/prep_xl_coadread_counts.sh /scratch/prasannalab/cancers_in_detail/hnsc/prep_xl_hnsc_counts.sh

#modified prep_xl_hnsc_counts.sh by replacing "counts_coadread.txt" with "counts_hnsc.txt";
vi prep_xl_hnsc_counts.sh
:1,$s/coadread/hnsc/
:wq

sh prep_xl_hnsc_counts.sh | grep -v ^$ > xl_hnsc_counts.txt

#the file, xl_hnsc_counts.txt, contains 1066 gene names, which appear in the oncokb_gene_list 
#(sheet in above xl file) order; this file can be opened in xl, and used to get grand table of all 
#driver genes and driver mutations in the different cancers;  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx ;
#sheet = oncokb_gene_order_driver_counts ;
#the file counts_hnsc.txt contains mutated driver genes arranged in descending order; this file
#can be opened in the above xl file, in: sheet = can_wise_driver_counts ;


awk -F"\t" '(NF==3)' xl_hnsc_counts.txt | wc -l
214
awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/)' hnsc_drivers.txt | wc -l
1646

#HNSC: 214 driver genes; 1646 driver mutations
#Taking xl_hnsc_counts.txt and counts_hnsc.txt to open in above xl file:

-------------------------------------------------------------------------

#Working with GBM mutations; GBM = Glioblastoma Multiforme; 592 samples;  

cd /scratch/prasannalab/cancers_in_detail

mkdir gbm

pwd = /scratch/prasannalab/cancers_in_detail/gbm

#For the TCGA GBM PanCan Atlas cohort, genes with driver mutations (or driver genes)
#have been downloaded from cBioPortal; cBioPortal annotates driver genes and mutations
#from OncoKB and CancerHotspots; the list of 1066 cancer (or driver) genes in OncoKB 
#is in the foll excel file and sheet:  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail\cancer_selection_oncokbgenes
#sheet = oncokb_gene_list 
#the subset of oncokb genes which have mutations in gbm are listed in the file:
# d:\actrec_work\joined_actrec_nov21\cancer_MD_proj_ongoing4_tcga_data_collection.docx
#copied and pasted these genes into the file: msword_list_gbm_mutated_genes.txt
#this file needed to be modified to include newlines; hence foll. awk cmd used; 

awk -F", " 'BEGIN {RS = ", |\n"} {{for(i=1; i<=NF; i++) printf $i " "} print ""}' msword_list_gbm_mutated_genes.txt > gbm_mutated_genes.txt

#The subset of the oncokb set of driver genes, with driver mutations in GBM, are
#in the file: gbm_mutated_genes.txt
wc -l gbm_mutated_genes.txt
149    #there are 149 driver genes in gbm;

#To create a single file containing all gbm driver genes and mutations obtained from cbioportal,
#used the gbm_mutated_genes.txt file to create the .sh file: prep_gbm_drivers_file.sh
#the file contained commands of the following kind;
#awk -F"\t" '{IFS=OFS="\t"}{print "ABL1", $0}' ABL1.tsv
cp gbm_mutated_genes.txt prep_gbm_drivers_file.sh
vi prep_gbm_drivers_file.sh
#:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}{print "/
#:1,$s/$/", \$0}'/
#:wq
paste -d" " prep_gbm_drivers_file.sh gbm_mutated_genes.txt > temp.txt 
cp temp.txt prep_gbm_drivers_file.sh
vi prep_gbm_drivers_file.sh
#:1,$s/$/.tsv/
#:1,$s/ .tsv/.tsv/
#:wq

#created a subdir: /scratch/prasannalab/cancers_in_detail/gbm/cbio_gbm_tsvfiles
#uploaded all .tsv files from the foll windows area:
# d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\GBM\gbm_driver_tsvfiles
#to the foll sub-dir; 
#cd /scratch/prasannalab/cancers_in_detail/gbm/cbio_gbm_tsvfiles
mv ../prep_gbm_drivers_file.sh .
#edited the file: /scratch/prasannalab/cancers_in_detail/gbm/cbio_gbm_tsvfiles/prep_gbm_drivers_file.sh
#and manually replaced file names of the type below: 
#e.g., HLA-A.tsv with HLA_A.tsv, HLA-B.tsv with HLA_B.tsv, HLA-C.tsv with HLA_C.tsv, NKX3-1.tsv with NKX3_1.tsv, 
#H1-5.tsv with H1_5.tsv; i.e., MADE NO CHANGE in the gene name col; made the change only in the 
#.tsv filename col; 
#in gbm, the .tsv files that need to be changed are: H3-3A.tsv to H3_3A.tsv  

#checking the number of lines in the .tsv files showed that no gene had 0 mutation entries;
wc -l *.tsv | grep "1 "

sh prep_gbm_drivers_file.sh > gbm_drivers.txt
#moved gbm_drivers.txt back to pwd;
mv /scratch/prasannalab/cancers_in_detail/gbm/cbio_gbm_tsvfiles/gbm_drivers.txt /scratch/prasannalab/cancers_in_detail/gbm/.

awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/){print $1}' gbm_drivers.txt | uniq -c | \
awk -F" " '{OFS="\t"}{print $1, $2}' | sort -k1,1nr > counts_gbm.txt

awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/){print $1}' gbm_drivers.txt | uniq -c | \
awk -F" " '{print $1}' | awk 'BEGIN {total=0}; {total=total+$1} END {print total}'
805  #this is the total number of driver mutations in gbm;

#A file containing the list of 1066 oncokb genes was created previously, for coadread (by cutting and
#pasting the genes col from d:\actrec_work\joined_actrec_nov21\proj_in_detail\cancer_selection_oncokbgenes, 
#sheet = oncokb_gene_list, to the file oncokb_gene_list.txt); this file was then modified to the .sh file:
#/scratch/prasannalab/cancers_in_detail/coadread/prep_xl_coadread_counts.sh
#copied this prep file to pwd;

cp /scratch/prasannalab/cancers_in_detail/coadread/prep_xl_coadread_counts.sh /scratch/prasannalab/cancers_in_detail/gbm/prep_xl_gbm_counts.sh

#modified prep_xl_gbm_counts.sh by replacing "counts_coadread.txt" with "counts_gbm.txt";
vi prep_xl_gbm_counts.sh
#:1,$s/coadread/gbm/
#:wq

sh prep_xl_gbm_counts.sh | grep -v ^$ > xl_gbm_counts.txt

#the file, xl_gbm_counts.txt, contains 1066 gene names, which appear in the oncokb_gene_list 
#(sheet in above xl file) order; this file can be opened in xl, and used to get grand table of all 
#driver genes and driver mutations in the different cancers;  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx ;
#sheet = oncokb_gene_order_driver_counts ;
#the file counts_gbm.txt contains mutated driver genes arranged in descending order; this file
#can be opened in the above xl file, in: sheet = can_wise_driver_counts ;

awk -F"\t" '(NF==3)' xl_gbm_counts.txt | wc -l
149
awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/)' gbm_drivers.txt | wc -l
805

#GBM: 149 driver genes; 805 driver mutations
#Taking xl_gbm_counts.txt and counts_gbm.txt to open in above xl file:

-------------------------------------------------------------------------

#Working with SKCM mutations; SKCM = Skin Cutaneous Melanoma; 448 samples;  

cd /scratch/prasannalab/cancers_in_detail

mkdir skcm

pwd = /scratch/prasannalab/cancers_in_detail/skcm

#For the TCGA SKCM PanCan Atlas cohort, genes with driver mutations (or driver genes)
#have been downloaded from cBioPortal; cBioPortal annotates driver genes and mutations
#from OncoKB and CancerHotspots; the list of 1066 cancer (or driver) genes in OncoKB 
#is in the foll excel file and sheet:  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail\cancer_selection_oncokbgenes
#sheet = oncokb_gene_list 
#the subset of oncokb genes which have mutations in skcm are listed in the file:
# d:\actrec_work\joined_actrec_nov21\cancer_MD_proj_ongoing4_tcga_data_collection.docx
#copied and pasted these genes into the file: msword_list_skcm_mutated_genes.txt
#this file needed to be modified to include newlines; hence foll. awk cmd used; 

awk -F", " 'BEGIN {RS = ", |\n"} {{for(i=1; i<=NF; i++) printf $i " "} print ""}' msword_list_skcm_mutated_genes.txt > skcm_mutated_genes.txt

#The subset of the oncokb set of driver genes, with driver mutations in SKCM, are
#in the file: skcm_mutated_genes.txt
wc -l skcm_mutated_genes.txt
273    #there are 273 driver genes in skcm;

#To create a single file containing all skcm driver genes and mutations obtained from cbioportal,
#used the skcm_mutated_genes.txt file to create the .sh file: prep_skcm_drivers_file.sh
#the file contained commands of the following kind;
#awk -F"\t" '{IFS=OFS="\t"}{print "ABL1", $0}' ABL1.tsv
cp skcm_mutated_genes.txt prep_skcm_drivers_file.sh
vi prep_skcm_drivers_file.sh
#:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}{print "/
#:1,$s/$/", \$0}'/
#:wq
paste -d" " prep_skcm_drivers_file.sh skcm_mutated_genes.txt > temp.txt 
cp temp.txt prep_skcm_drivers_file.sh
vi prep_skcm_drivers_file.sh
#:1,$s/$/.tsv/
#:1,$s/ .tsv/.tsv/
#:wq

#created a subdir: /scratch/prasannalab/cancers_in_detail/skcm/cbio_skcm_tsvfiles
#uploaded all .tsv files from the foll windows area:
# d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\SKCM\skcm_driver_tsvfiles
#to the foll sub-dir; 
#cd /scratch/prasannalab/cancers_in_detail/skcm/cbio_skcm_tsvfiles
mv ../prep_skcm_drivers_file.sh .
#edited the file: /scratch/prasannalab/cancers_in_detail/skcm/cbio_skcm_tsvfiles/prep_skcm_drivers_file.sh
#and manually replaced file names of the type below: 
#e.g., HLA-A.tsv with HLA_A.tsv, HLA-B.tsv with HLA_B.tsv, HLA-C.tsv with HLA_C.tsv, NKX3-1.tsv with NKX3_1.tsv, 
#H1-5.tsv with H1_5.tsv; i.e., MADE NO CHANGE in the gene name col; made the change only in the 
#.tsv filename col; 
#in skcm, the .tsv files that need to be changed are: H1-3.tsv to H1_3.tsv, 
#HLA-B.tsv to HLA_B.tsv, HLA-C.tsv to HLA_C.tsv 

#checking the number of lines in the .tsv files showed that no gene had 0 mutation entries;
wc -l *.tsv | grep "1 "

sh prep_skcm_drivers_file.sh > skcm_drivers.txt
#moved skcm_drivers.txt back to pwd;
mv /scratch/prasannalab/cancers_in_detail/skcm/cbio_skcm_tsvfiles/skcm_drivers.txt /scratch/prasannalab/cancers_in_detail/skcm/.

awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/){print $1}' skcm_drivers.txt | uniq -c | \
awk -F" " '{OFS="\t"}{print $1, $2}' | sort -k1,1nr > counts_skcm.txt

awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/){print $1}' skcm_drivers.txt | uniq -c | \
awk -F" " '{print $1}' | awk 'BEGIN {total=0}; {total=total+$1} END {print total}'
1668  #this is the total number of driver mutations in skcm;

#A file containing the list of 1066 oncokb genes was created previously, for coadread (by cutting and
#pasting the genes col from d:\actrec_work\joined_actrec_nov21\proj_in_detail\cancer_selection_oncokbgenes, 
#sheet = oncokb_gene_list, to the file oncokb_gene_list.txt); this file was then modified to the .sh file:
#/scratch/prasannalab/cancers_in_detail/coadread/prep_xl_coadread_counts.sh
#copied this prep file to pwd;

cp /scratch/prasannalab/cancers_in_detail/coadread/prep_xl_coadread_counts.sh /scratch/prasannalab/cancers_in_detail/skcm/prep_xl_skcm_counts.sh

#modified prep_xl_skcm_counts.sh by replacing "counts_coadread.txt" with "counts_skcm.txt";
vi prep_xl_skcm_counts.sh
#:1,$s/coadread/skcm/
#:wq

sh prep_xl_skcm_counts.sh | grep -v ^$ > xl_skcm_counts.txt

#the file, xl_skcm_counts.txt, contains 1066 gene names, which appear in the oncokb_gene_list 
#(sheet in above xl file) order; this file can be opened in xl, and used to get grand table of all 
#driver genes and driver mutations in the different cancers;  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx ;
#sheet = oncokb_gene_order_driver_counts ;
#the file counts_skcm.txt contains mutated driver genes arranged in descending order; this file
#can be opened in the above xl file, in: sheet = can_wise_driver_counts ;

awk -F"\t" '(NF==3)' xl_skcm_counts.txt | wc -l
273
awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/)' skcm_drivers.txt | wc -l
1668

#SKCM: 273 driver genes; 1668 driver mutations
#Taking xl_skcm_counts.txt and counts_skcm.txt to open in above xl file:

-------------------------------------------------------------------------

#Working with LUAD mutations; LUAD = Lung Adenocarcinoma; 566 samples;  

cd /scratch/prasannalab/cancers_in_detail

mkdir luad

pwd = /scratch/prasannalab/cancers_in_detail/luad

#For the TCGA LUAD PanCan Atlas cohort, genes with driver mutations (or driver genes)
#have been downloaded from cBioPortal; cBioPortal annotates driver genes and mutations
#from OncoKB and CancerHotspots; the list of 1066 cancer (or driver) genes in OncoKB 
#is in the foll excel file and sheet:  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail\cancer_selection_oncokbgenes
#sheet = oncokb_gene_list 
#the subset of oncokb genes which have mutations in luad are listed in the file:
# d:\actrec_work\joined_actrec_nov21\cancer_MD_proj_ongoing4_tcga_data_collection.docx
#copied and pasted these genes into the file: msword_list_luad_mutated_genes.txt
#this file needed to be modified to include newlines; hence foll. awk cmd used; 

awk -F", " 'BEGIN {RS = ", |\n"} {{for(i=1; i<=NF; i++) printf $i " "} print ""}' msword_list_luad_mutated_genes.txt > luad_mutated_genes.txt

#The subset of the oncokb set of driver genes, with driver mutations in LUAD, are
#in the file: luad_mutated_genes.txt
wc -l luad_mutated_genes.txt
262    #there are 262 driver genes in luad;

#To create a single file containing all luad driver genes and mutations obtained from cbioportal,
#used the luad_mutated_genes.txt file to create the .sh file: prep_luad_drivers_file.sh
#the file contained commands of the following kind;
#awk -F"\t" '{IFS=OFS="\t"}{print "ABL1", $0}' ABL1.tsv
cp luad_mutated_genes.txt prep_luad_drivers_file.sh
vi prep_luad_drivers_file.sh
#:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}{print "/
#:1,$s/$/", \$0}'/
#:wq
paste -d" " prep_luad_drivers_file.sh luad_mutated_genes.txt > temp.txt 
cp temp.txt prep_luad_drivers_file.sh
vi prep_luad_drivers_file.sh
#:1,$s/$/.tsv/
#:1,$s/ .tsv/.tsv/
#:wq

#created a subdir: /scratch/prasannalab/cancers_in_detail/luad/cbio_luad_tsvfiles
#uploaded all .tsv files from the foll windows area:
# d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\LUAD\luad_driver_tsvfiles
#to the foll sub-dir; 
#cd /scratch/prasannalab/cancers_in_detail/luad/cbio_luad_tsvfiles
mv ../prep_luad_drivers_file.sh .
#edited the file: /scratch/prasannalab/cancers_in_detail/luad/cbio_luad_tsvfiles/prep_luad_drivers_file.sh
#and manually replaced file names of the type below: 
#e.g., HLA-A.tsv with HLA_A.tsv, HLA-B.tsv with HLA_B.tsv, HLA-C.tsv with HLA_C.tsv, NKX3-1.tsv with NKX3_1.tsv, 
#H1-5.tsv with H1_5.tsv; i.e., MADE NO CHANGE in the gene name col; made the change only in the 
#.tsv filename col; 
#in luad, the .tsv files that need to be changed are: NKX2-1.tsv to NKX2_1.tsv, 
#HLA-A.tsv to HLA_A.tsv, NKX3-1.tsv to NKX3_1.tsv, HLA-C.tsv to HLA_C.tsv 

#checking the number of lines in the .tsv files showed that no gene had 0 mutation entries;
wc -l *.tsv | grep "1 "

sh prep_luad_drivers_file.sh > luad_drivers.txt
#moved luad_drivers.txt back to pwd;
mv /scratch/prasannalab/cancers_in_detail/luad/cbio_luad_tsvfiles/luad_drivers.txt /scratch/prasannalab/cancers_in_detail/luad/.

awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/){print $1}' luad_drivers.txt | uniq -c | \
awk -F" " '{OFS="\t"}{print $1, $2}' | sort -k1,1nr > counts_luad.txt

awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/){print $1}' luad_drivers.txt | uniq -c | \
awk -F" " '{print $1}' | awk 'BEGIN {total=0}; {total=total+$1} END {print total}'
1663  #this is the total number of driver mutations in luad;

#A file containing the list of 1066 oncokb genes was created previously, for coadread (by cutting and
#pasting the genes col from d:\actrec_work\joined_actrec_nov21\proj_in_detail\cancer_selection_oncokbgenes, 
#sheet = oncokb_gene_list, to the file oncokb_gene_list.txt); this file was then modified to the .sh file:
#/scratch/prasannalab/cancers_in_detail/coadread/prep_xl_coadread_counts.sh
#copied this prep file to pwd;

cp /scratch/prasannalab/cancers_in_detail/coadread/prep_xl_coadread_counts.sh /scratch/prasannalab/cancers_in_detail/luad/prep_xl_luad_counts.sh

#modified prep_xl_luad_counts.sh by replacing "counts_coadread.txt" with "counts_luad.txt";
vi prep_xl_luad_counts.sh
#:1,$s/coadread/luad/
#:wq

sh prep_xl_luad_counts.sh | grep -v ^$ > xl_luad_counts.txt

#the file, xl_luad_counts.txt, contains 1066 gene names, which appear in the oncokb_gene_list 
#(sheet in above xl file) order; this file can be opened in xl, and used to get grand table of all 
#driver genes and driver mutations in the different cancers;  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx ;
#sheet = oncokb_gene_order_driver_counts ;
#the file counts_luad.txt contains mutated driver genes arranged in descending order; this file
#can be opened in the above xl file, in: sheet = can_wise_driver_counts ;

awk -F"\t" '(NF==3)' xl_luad_counts.txt | wc -l
262
awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/)' luad_drivers.txt | wc -l
1663

#LUAD: 262 driver genes; 1663 driver mutations
#Taking xl_luad_counts.txt and counts_luad.txt to open in above xl file:

-------------------------------------------------------------------------

#Working with LAML mutations; LAML = Acute Myeloid Leukemia ; 200 samples;  

cd /scratch/prasannalab/cancers_in_detail

mkdir laml

pwd = /scratch/prasannalab/cancers_in_detail/laml

#For the TCGA LAML PanCan Atlas cohort, genes with driver mutations (or driver genes)
#have been downloaded from cBioPortal; cBioPortal annotates driver genes and mutations
#from OncoKB and CancerHotspots; the list of 1066 cancer (or driver) genes in OncoKB 
#is in the foll excel file and sheet:  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail\cancer_selection_oncokbgenes
#sheet = oncokb_gene_list 
#the subset of oncokb genes which have mutations in laml are listed in the file:
# d:\actrec_work\joined_actrec_nov21\cancer_MD_proj_ongoing4_tcga_data_collection.docx
#copied and pasted these genes into the file: msword_list_laml_mutated_genes.txt
#this file needed to be modified to include newlines; hence foll. awk cmd used; 

awk -F", " 'BEGIN {RS = ", |\n"} {{for(i=1; i<=NF; i++) printf $i " "} print ""}' msword_list_laml_mutated_genes.txt > laml_mutated_genes.txt

#The subset of the oncokb set of driver genes, with driver mutations in LUAD, are
#in the file: laml_mutated_genes.txt
wc -l laml_mutated_genes.txt
92    #there are 92 driver genes in laml;

#To create a single file containing all laml driver genes and mutations obtained from cbioportal,
#used the laml_mutated_genes.txt file to create the .sh file: prep_laml_drivers_file.sh
#the file contained commands of the following kind;
#awk -F"\t" '{IFS=OFS="\t"}{print "ABL1", $0}' ABL1.tsv
cp laml_mutated_genes.txt prep_laml_drivers_file.sh
vi prep_laml_drivers_file.sh
#:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}{print "/
#:1,$s/$/", \$0}'/
#:wq
paste -d" " prep_laml_drivers_file.sh laml_mutated_genes.txt > temp.txt 
cp temp.txt prep_laml_drivers_file.sh
vi prep_laml_drivers_file.sh
#:1,$s/$/.tsv/
#:1,$s/ .tsv/.tsv/
#:wq

#created a subdir: /scratch/prasannalab/cancers_in_detail/laml/cbio_laml_tsvfiles
#uploaded all .tsv files from the foll windows area:
# d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\LAML\laml_driver_tsvfiles
#to the foll sub-dir; 
#cd /scratch/prasannalab/cancers_in_detail/laml/cbio_laml_tsvfiles
mv ../prep_laml_drivers_file.sh .
#edited the file: /scratch/prasannalab/cancers_in_detail/laml/cbio_laml_tsvfiles/prep_laml_drivers_file.sh
#and manually replaced file names of the type below: 
#e.g., HLA-A.tsv with HLA_A.tsv, HLA-B.tsv with HLA_B.tsv, HLA-C.tsv with HLA_C.tsv, NKX3-1.tsv with NKX3_1.tsv, 
#H1-5.tsv with H1_5.tsv; i.e., MADE NO CHANGE in the gene name col; made the change only in the 
#.tsv filename col; 
#in laml, there are no .tsv files that need to be changed; 

#checking the number of lines in the .tsv files showed that no gene had 0 mutation entries;
wc -l *.tsv | grep "1 "

sh prep_laml_drivers_file.sh > laml_drivers.txt
#moved laml_drivers.txt back to pwd;
mv /scratch/prasannalab/cancers_in_detail/laml/cbio_laml_tsvfiles/laml_drivers.txt /scratch/prasannalab/cancers_in_detail/laml/.

awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/){print $1}' laml_drivers.txt | uniq -c | \
awk -F" " '{OFS="\t"}{print $1, $2}' | sort -k1,1nr > counts_laml.txt

awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/){print $1}' laml_drivers.txt | uniq -c | \
awk -F" " '{print $1}' | awk 'BEGIN {total=0}; {total=total+$1} END {print total}'
510  #this is the total number of driver mutations in laml;

#A file containing the list of 1066 oncokb genes was created previously, for coadread (by cutting and
#pasting the genes col from d:\actrec_work\joined_actrec_nov21\proj_in_detail\cancer_selection_oncokbgenes, 
#sheet = oncokb_gene_list, to the file oncokb_gene_list.txt); this file was then modified to the .sh file:
#/scratch/prasannalab/cancers_in_detail/coadread/prep_xl_coadread_counts.sh
#copied this prep file to pwd;

cp /scratch/prasannalab/cancers_in_detail/coadread/prep_xl_coadread_counts.sh /scratch/prasannalab/cancers_in_detail/laml/prep_xl_laml_counts.sh

#modified prep_xl_laml_counts.sh by replacing "counts_coadread.txt" with "counts_laml.txt";
vi prep_xl_laml_counts.sh
#:1,$s/coadread/laml/
#:wq

sh prep_xl_laml_counts.sh | grep -v ^$ > xl_laml_counts.txt

#the file, xl_laml_counts.txt, contains 1066 gene names, which appear in the oncokb_gene_list 
#(sheet in above xl file) order; this file can be opened in xl, and used to get grand table of all 
#driver genes and driver mutations in the different cancers;  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx ;
#sheet = oncokb_gene_order_driver_counts ;
#the file counts_laml.txt contains mutated driver genes arranged in descending order; this file
#can be opened in the above xl file, in: sheet = can_wise_driver_counts ;

awk -F"\t" '(NF==3)' xl_laml_counts.txt | wc -l
92
awk -F"\t" '{IFS=OFS="\t"}($2 !~ /Study of Origin/)' laml_drivers.txt | wc -l
510

#LAML: 92 driver genes; 510 driver mutations
#Taking xl_laml_counts.txt and counts_laml.txt to open in above xl file:

-------------------------------------------------------------------------

##27-Aug-22 
#copied foll lines from cmd1_all_cancers.sh; modified some of the lines 
#to complete the work for gbm, skcm, luad; no informn in blair tables for hnsc, laml; 
#below, the modified or added lines begin with "##27-Aug-22" and end with "##ends here; "
#pwd = /scratch/prasannalab/cancers_in_detail/melamed_tbls ; 
ATXN8  - Spinocerebellar Ataxia
EXT3   - Non-Specified Osteodystrophy
FAM3A  - Disorders of Branched Chain Amino Acid Metabolism
FRAXA  - Fragile-X Syndrome
LDHD   - Disorders of Branched Chain Amino Acid Metabolism
PEX2   - Peroxisomal Disorders
PMPCA  - Congenital Hydrocephalus
SFTPA1 - Degenerative Diseases of the Basal Ganglia
SFTPA2 - Degenerative Diseases of the Basal Ganglia
TACR1  - Dopa-Responsive Dystonia
TRNL1  - Chronic Progressive External Ophthalmoplegia
TRNS2  - Retinitis Pigmentosa
UBL4A  - Glucose-6-Phosphate Dehydrogenase Deficiency
#Thus, above 13 genes in mel col2 are not found in blair col5; 
#using vi to see which blair_summary_name they belong to; 
vi mel_suppdata1_blairsummname_genes_omim.txt
#the blair_summary_name for the 13 genes is given above;

#Thus, all diseases in Mel col1 are present in Blair col1
#However, the above 13 genes are present in Mel col 2, but are absent in Blair col5;

#MANUALLY introducing these genes in: 
#/scratch/prasannalab/cancers_in_detail/melamed_tbls/blair_s3_mdnames_genes_systems_copy.txt
#Note: the file is a COPY of the original file (which is: 
#/scratch/prasannalab/cancers_in_detail/blair_tbls/blair_s3_mdnames_genes_systems.txt);
vi blair_s3_mdnames_genes_systems_copy.txt

#Regenerating coadread, brca, kirc files using this file;

#USING MODIFIED blair_s3_mdnames_genes_systems_copy.txt , created above;
#rerunning the foll commands from line 332 above, because blair_s3_mdnames_genes_systems_copy.txt
#has changed with the addition of 13 genes
awk -F"\t" '{IFS=OFS="\t"}{print $1, $4, $5, $6, $7}' blair_s3_mdnames_genes_systems_copy.txt > md_summarynames_genes_copy.txt


#Final command;
awk -F"\t" '{IFS=OFS="\t"} BEGIN { print "Global relative risk\tlog10 global relative risk\tComplex Disease\tMendelian Disease\tGender\tSummary Name\tSummary Name\tAssociated Mendelian Disorders\tGenes\tPrimary Affected System\tSecondary Affected Systems" } \
NR==FNR {summ_nm[$1]=$1; rest[$1]=$0; next} \
NR!=FNR && FNR>1 && ($4 in summ_nm){print $1, $2, $3, $4, $5, summ_nm[$4], rest[$4]}' md_summarynames_genes_copy.txt /scratch/prasannalab/cancers_in_detail/blair_tbls/globalrisk_log10descordr2_canordr1_md.txt > temp.txt
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $5, $3, $4, $6, $8, $9, $10, $11}' temp.txt > complexdiseases_md_genes_merged_copy.txt

awk -F"\t" '{IFS=OFS="\t"}($4 ~ /^Breast Cancer$/)' complexdiseases_md_genes_merged_copy.txt > brca_md_assocns_blair_copy.txt
awk -F"\t" '{IFS=OFS="\t"}($4 ~ /^Colorectal Cancer$/)' complexdiseases_md_genes_merged_copy.txt > coadread_md_assocns_blair_copy.txt
awk -F"\t" '{IFS=OFS="\t"}($4 ~ /^Kidney Cancer$/)' complexdiseases_md_genes_merged_copy.txt > kirc_md_assocns_blair_copy.txt

##27-Aug-22; executing cmds for remaining 3 cancers; pwd = /scratch/prasannalab/cancers_in_detail/melamed_tbls
#Note: In Blair table, Breast Cancer = BRCA ; Colorectal Cancer = COAD, READ ; 
#Kidney Cancer = KICH, KIRC, KIRP ; Lung Cancer = LUAD, LUSC ;  Malignant Brain Neoplasm = GBM, LGG ; 
#Melanoma = SKCM
awk -F"\t" '{IFS=OFS="\t"}($4 ~ /^Lung Cancer$/)' complexdiseases_md_genes_merged_copy.txt > luad_md_assocns_blair_copy.txt
awk -F"\t" '{IFS=OFS="\t"}($4 ~ /^Melanoma$/)' complexdiseases_md_genes_merged_copy.txt > skcm_md_assocns_blair_copy.txt
awk -F"\t" '{IFS=OFS="\t"}($4 ~ /^Malignant Brain Neoplasm$/)' complexdiseases_md_genes_merged_copy.txt > gbm_md_assocns_blair_copy.txt
##ends here; 

#Opening complexdiseases_md_genes_merged_copy.txt, brca_md_assocns_blair_copy.txt, coadread_md_assocns_blair_copy.txt in xl;
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns
#sheets = comorbid_complex_md_genes, coadread_md_assocns_blair, brca_md_assocns_blair

#Opening kirc_md_assocns_blair_copy.txt as: sheet = kirc_md_assocns_blair in above xl file;

##27-Aug-22; 
#Opening luad_md_assocns_blair_copy.txt as: sheet - luad_md_assocns_blair in above xl file;
#Opening skcm_md_assocns_blair_copy.txt as: sheet - skcm_md_assocns_blair in above xl file;
#Opening gbm_md_assocns_blair_copy.txt as: sheet - gbm_md_assocns_blair in above xl file;
##ends here;

pwd = /scratch/prasannalab/cancers_in_detail/melamed_tbls

#the counts of genes below have changed for each cancer;
awk -F"\t" '{print $8}' coadread_md_assocns_blair_copy.txt | sed 's/,/\n/g' | sort | uniq > coadread_md_genelist_blair_copy.txt
wc -l coadread_md_genelist_blair_copy.txt
307  #there are 307 genes associated with mds comorbid with coadread
awk -F"\t" '{print $8}' brca_md_assocns_blair_copy.txt | sed 's/,/\n/g' | sort | uniq > brca_md_genelist_blair_copy.txt
wc -l brca_md_genelist_blair_copy.txt
342  #there are 342 genes associated with mds comorbid with brca
awk -F"\t" '{print $8}' kirc_md_assocns_blair_copy.txt | sed 's/,/\n/g' | sort | uniq > kirc_md_genelist_blair_copy.txt
wc -l kirc_md_genelist_blair_copy.txt
266  #there are 266 genes associated with mds comorbid with brca

##27-Aug-22; 
awk -F"\t" '{print $8}' luad_md_assocns_blair_copy.txt | sed 's/,/\n/g' | sort | uniq > luad_md_genelist_blair_copy.txt
wc -l luad_md_genelist_blair_copy.txt
301  #there are 301 genes associated with mds comorbid with luad
awk -F"\t" '{print $8}' skcm_md_assocns_blair_copy.txt | sed 's/,/\n/g' | sort | uniq > skcm_md_genelist_blair_copy.txt
wc -l skcm_md_genelist_blair_copy.txt
287  #there are 287 genes associated with mds comorbid with skcm
awk -F"\t" '{print $8}' gbm_md_assocns_blair_copy.txt | sed 's/,/\n/g' | sort | uniq > gbm_md_genelist_blair_copy.txt
wc -l gbm_md_genelist_blair_copy.txt
337  #there are 337 genes associated with mds comorbid with gbm
##ends here;

#the numbers below (48, 61, 49) do not change because none of the additional 13 genes from the melamed 
#supp table 2 are in oncokb;
cp /scratch/prasannalab/cancers_in_detail/blair_tbls/srch_oncokb_genes_in_coadread_md_genelist_blair.sh srch_oncokb_genes_in_coadread_md_genelist_blair_copy.sh
#edit the copied file and replace filename, coadread_md_genelist_blair.txt, with filename coadread_md_genelist_blair_copy.txt
vi srch_oncokb_genes_in_coadread_md_genelist_blair_copy.sh

sh srch_oncokb_genes_in_coadread_md_genelist_blair_copy.sh | awk '(NF==2)' |  wc -l
48   #there are 48 oncokb genes which are associated with md which are comorbid with coadread;
sh srch_oncokb_genes_in_coadread_md_genelist_blair_copy.sh | grep -v ^$ > coadread_md_genes_oncokb_order_copy.txt

cp srch_oncokb_genes_in_coadread_md_genelist_blair_copy.sh srch_oncokb_genes_in_brca_md_genelist_blair_copy.sh
#edit copied file and replace filename, coadread_md_genelist_blair_copy.txt, with filename, brca_md_genelist_blair_copy.txt
sh srch_oncokb_genes_in_brca_md_genelist_blair_copy.sh | awk '(NF==2)' |  wc -l
61   #there are 61 oncokb genes which are associated with md which are comorbid with brca; 
sh srch_oncokb_genes_in_brca_md_genelist_blair_copy.sh | grep -v ^$ > brca_md_genes_oncokb_order_copy.txt

cp srch_oncokb_genes_in_coadread_md_genelist_blair_copy.sh srch_oncokb_genes_in_kirc_md_genelist_blair_copy.sh
#edit copied file and replace filename, coadread_md_genelist_blair_copy.txt, with filename, kirc_md_genelist_blair_copy.txt
sh srch_oncokb_genes_in_kirc_md_genelist_blair_copy.sh | awk '(NF==2)' |  wc -l
49   #there are 49 oncokb genes which are associated with md which are comorbid with kirc; 
sh srch_oncokb_genes_in_kirc_md_genelist_blair_copy.sh | grep -v ^$ > kirc_md_genes_oncokb_order_copy.txt

##27-Aug-2022; 
cp srch_oncokb_genes_in_coadread_md_genelist_blair_copy.sh srch_oncokb_genes_in_skcm_md_genelist_blair_copy.sh
#edit copied file and replace filename, coadread_md_genelist_blair_copy.txt, with filename, skcm_md_genelist_blair_copy.txt
vi srch_oncokb_genes_in_skcm_md_genelist_blair_copy.sh
:1,$s/coadread/skcm/
sh srch_oncokb_genes_in_skcm_md_genelist_blair_copy.sh | awk '(NF==2)' |  wc -l
40   #there are 40 oncokb genes which are associated with md which are comorbid with skcm; 
sh srch_oncokb_genes_in_skcm_md_genelist_blair_copy.sh | grep -v ^$ > skcm_md_genes_oncokb_order_copy.txt

cp srch_oncokb_genes_in_coadread_md_genelist_blair_copy.sh srch_oncokb_genes_in_luad_md_genelist_blair_copy.sh
#edit copied file and replace filename, coadread_md_genelist_blair_copy.txt, with filename, luad_md_genelist_blair_copy.txt
vi srch_oncokb_genes_in_luad_md_genelist_blair_copy.sh
:1,$s/coadread/luad/
sh srch_oncokb_genes_in_luad_md_genelist_blair_copy.sh | awk '(NF==2)' |  wc -l
48   #there are 48 oncokb genes which are associated with md which are comorbid with luad; 
sh srch_oncokb_genes_in_luad_md_genelist_blair_copy.sh | grep -v ^$ > luad_md_genes_oncokb_order_copy.txt

cp srch_oncokb_genes_in_coadread_md_genelist_blair_copy.sh srch_oncokb_genes_in_gbm_md_genelist_blair_copy.sh
#edit copied file and replace filename, coadread_md_genelist_blair_copy.txt, with filename, gbm_md_genelist_blair_copy.txt
vi srch_oncokb_genes_in_gbm_md_genelist_blair_copy.sh
:1,$s/coadread/gbm/
sh srch_oncokb_genes_in_gbm_md_genelist_blair_copy.sh | awk '(NF==2)' |  wc -l
62   #there are 62 oncokb genes which are associated with md which are comorbid with gbm; 
sh srch_oncokb_genes_in_gbm_md_genelist_blair_copy.sh | grep -v ^$ > gbm_md_genes_oncokb_order_copy.txt
##ends here; 

#No need to do the foll because the new files are same as old;
#Taking files, coadread_md_genes_oncokb_order_copy.txt and brca_md_genes_oncokb_order_copy.txt, to xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx , 
#sheet = oncokb_genes_in_comorbid_md_can ;

#Taking kirc_md_genes_oncokb_order_copy.txt, to xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx , 
#sheet = oncokb_genes_in_comorbid_md_can ;

##27-Aug-22
#Taking luad_md_genes_oncokb_order_copy.txt, gbm_md_genes_oncokb_order_copy.txt, 
#skcm_md_genes_oncokb_order_copy.txt to xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx , 
#sheet = oncokb_genes_in_comorbid_md_can ;
##ends here; 

#Identifying genes associated with mds comorbid with cancer, which are also drivers in the cancer;
cp /scratch/prasannalab/cancers_in_detail/blair_tbls/srch_coadread_drivers_in_md_genelist_blair.sh /scratch/prasannalab/cancers_in_detail/melamed_tbls/srch_coadread_drivers_in_md_genelist_blair_copy.sh
#edit srch_coadread_drivers_in_md_genelist_blair_copy.sh and replace filename 
#coadread_md_genelist_blair.txt with coadread_md_genelist_blair_copy.txt

sh srch_coadread_drivers_in_md_genelist_blair_copy.sh | awk '(NF==2)' | wc -l
21  #21 genes associated with mds comorbid with coadread are coadread drivers;
sh srch_coadread_drivers_in_md_genelist_blair_copy.sh | grep -v ^$ > coadread_drivers_in_md_copy.txt

#Likewise, get brca drivers that are found in the list of genes associated with comorbid mds;  
cp /scratch/prasannalab/cancers_in_detail/blair_tbls/srch_brca_drivers_in_md_genelist_blair.sh /scratch/prasannalab/cancers_in_detail/melamed_tbls/srch_brca_drivers_in_md_genelist_blair_copy.sh
#edit srch_brca_drivers_in_md_genelist_blair_copy.sh and replace filename 
#brca_md_genelist_blair.txt with brca_md_genelist_blair_copy.txt

sh srch_brca_drivers_in_md_genelist_blair_copy.sh | awk '(NF==2)' | wc -l
25  #25 genes associated with mds comorbid with brca are brca drivers;
sh srch_brca_drivers_in_md_genelist_blair_copy.sh | grep -v ^$ > brca_drivers_in_md_copy.txt

#above and below, the numbers (21, 25, 13) do not change; hence, maybe no need to update
#the xl file below;
#taking coadread_drivers_in_md_copy.txt and brca_drivers_in_md_copy.txt to xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx , 
#sheet = mdgenes_are_candrivers ;

#Likewise, get kirc drivers that are found in the list of genes associated with comorbid mds;  
cp /scratch/prasannalab/cancers_in_detail/blair_tbls/srch_kirc_drivers_in_md_genelist_blair.sh /scratch/prasannalab/cancers_in_detail/melamed_tbls/srch_kirc_drivers_in_md_genelist_blair_copy.sh
#edit srch_kirc_drivers_in_md_genelist_blair_copy.sh and replace filename 
#kirc_md_genelist_blair.txt with kirc_md_genelist_blair_copy.txt

sh srch_kirc_drivers_in_md_genelist_blair_copy.sh | awk '(NF==2)' | wc -l
13  #13 genes associated with mds comorbid with kirc are kirc drivers;
sh srch_kirc_drivers_in_md_genelist_blair_copy.sh | grep -v ^$ > kirc_drivers_in_md_copy.txt

#taking kirc_drivers_in_md_copy.txt to xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx , 
#sheet = mdgenes_are_candrivers ;

##27-Aug-22
#pwd = /scratch/prasannalab/cancers_in_detail/blair_tbls
#Get luad drivers that are found in the list of genes associated with comorbid mds;
#copied and pasted oncokb driver genes identified for luad from foll xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx ;
#sheet = can_wise_driver_counts ;
#into the file: luad_driver_genelist.txt
#used this file to create an sh file;
cp luad_driver_genelist.txt srch_luad_drivers_in_md_genelist_blair.sh

#using vi, turned srch_luad_drivers_in_md_genelist_blair.sh into appropriate sh file
#with commands of the foll kind:
#echo -e -n "VHL\t" ; grep "\bVHL\b" luad_md_genelist_blair.txt ; echo "" ;
#(for two copies of gene name in a line use paste -d" " as below;
vi srch_luad_drivers_in_md_genelist_blair.sh
#:1,$s/^/echo -e -n "/
#:1,$s/$/\\t" ; grep "\\b/
#:wq
#paste -d" " srch_luad_drivers_in_md_genelist_blair.sh luad_driver_genelist.txt > t1
vi t1
#:1,$s/\\b /\\b/
#:1,$s/$/\\b" luad_md_genelist_blair.txt ; echo "" ;
#:wq
cp t1 srch_luad_drivers_in_md_genelist_blair.sh 

#pwd = /scratch/prasannalab/cancers_in_detail/melamed_tbls
cp /scratch/prasannalab/cancers_in_detail/blair_tbls/srch_luad_drivers_in_md_genelist_blair.sh /scratch/prasannalab/cancers_in_detail/melamed_tbls/srch_luad_drivers_in_md_genelist_blair_copy.sh
#edit srch_luad_drivers_in_md_genelist_blair_copy.sh and replace filename 
#luad_md_genelist_blair.txt with luad_md_genelist_blair_copy.txt
vi srch_luad_drivers_in_md_genelist_blair_copy.sh
#:1,$s/luad_md_genelist_blair.txt/luad_md_genelist_blair_copy.txt/
#:wq

sh srch_luad_drivers_in_md_genelist_blair_copy.sh | awk '(NF==2)' | wc -l
21  #21 genes associated with mds comorbid with luad are luad drivers;
sh srch_luad_drivers_in_md_genelist_blair_copy.sh | grep -v ^$ > luad_drivers_in_md_copy.txt

#taking luad_drivers_in_md_copy.txt to xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx , 
#sheet = mdgenes_are_candrivers ;


#pwd = /scratch/prasannalab/cancers_in_detail/blair_tbls
#Get skcm drivers that are found in the list of genes associated with comorbid mds;
#copied and pasted oncokb driver genes identified for skcm from foll xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx ;
#sheet = can_wise_driver_counts ;
#into the file: skcm_driver_genelist.txt
#used this file to create an sh file;
cp skcm_driver_genelist.txt srch_skcm_drivers_in_md_genelist_blair.sh

#using vi, turned srch_skcm_drivers_in_md_genelist_blair.sh into appropriate sh file
#with commands of the foll kind:
#echo -e -n "VHL\t" ; grep "\bVHL\b" skcm_md_genelist_blair.txt ; echo "" ;
#(for two copies of gene name in a line use paste -d" " as below;
vi srch_skcm_drivers_in_md_genelist_blair.sh
#:1,$s/^/echo -e -n "/
#:1,$s/$/\\t" ; grep "\\b/
#:wq
paste -d" " srch_skcm_drivers_in_md_genelist_blair.sh skcm_driver_genelist.txt > t1
vi t1
#:1,$s/\\b /\\b/
#:1,$s/$/\\b" skcm_md_genelist_blair.txt ; echo "" ;
#:wq
cp t1 srch_skcm_drivers_in_md_genelist_blair.sh 

#pwd = /scratch/prasannalab/cancers_in_detail/melamed_tbls
cp /scratch/prasannalab/cancers_in_detail/blair_tbls/srch_skcm_drivers_in_md_genelist_blair.sh /scratch/prasannalab/cancers_in_detail/melamed_tbls/srch_skcm_drivers_in_md_genelist_blair_copy.sh
#edit srch_skcm_drivers_in_md_genelist_blair_copy.sh and replace filename 
#skcm_md_genelist_blair.txt with skcm_md_genelist_blair_copy.txt
vi srch_skcm_drivers_in_md_genelist_blair_copy.sh
#:1,$s/skcm_md_genelist_blair.txt/skcm_md_genelist_blair_copy.txt/
#:wq

sh srch_skcm_drivers_in_md_genelist_blair_copy.sh | awk '(NF==2)' | wc -l
23  #23 genes associated with mds comorbid with skcm are skcm drivers;
sh srch_skcm_drivers_in_md_genelist_blair_copy.sh | grep -v ^$ > skcm_drivers_in_md_copy.txt

#taking skcm_drivers_in_md_copy.txt to xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx , 
#sheet = mdgenes_are_candrivers ;


#pwd = /scratch/prasannalab/cancers_in_detail/blair_tbls
#Get gbm drivers that are found in the list of genes associated with comorbid mds;
#copied and pasted oncokb driver genes identified for gbm from foll xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx ;
#sheet = can_wise_driver_counts ;
#into the file: gbm_driver_genelist.txt
#used this file to create an sh file;
cp gbm_driver_genelist.txt srch_gbm_drivers_in_md_genelist_blair.sh

#using vi, turned srch_gbm_drivers_in_md_genelist_blair.sh into appropriate sh file
#with commands of the foll kind:
#echo -e -n "VHL\t" ; grep "\bVHL\b" gbm_md_genelist_blair.txt ; echo "" ;
#(for two copies of gene name in a line use paste -d" " as below;
vi srch_gbm_drivers_in_md_genelist_blair.sh
#:1,$s/^/echo -e -n "/
#:1,$s/$/\\t" ; grep "\\b/
#:wq
paste -d" " srch_gbm_drivers_in_md_genelist_blair.sh gbm_driver_genelist.txt > t1
vi t1
#:1,$s/\\b /\\b/
#:1,$s/$/\\b" gbm_md_genelist_blair.txt ; echo "" ;
#:wq
cp t1 srch_gbm_drivers_in_md_genelist_blair.sh 

#pwd = /scratch/prasannalab/cancers_in_detail/melamed_tbls
cp /scratch/prasannalab/cancers_in_detail/blair_tbls/srch_gbm_drivers_in_md_genelist_blair.sh /scratch/prasannalab/cancers_in_detail/melamed_tbls/srch_gbm_drivers_in_md_genelist_blair_copy.sh
#edit srch_gbm_drivers_in_md_genelist_blair_copy.sh and replace filename 
#gbm_md_genelist_blair.txt with gbm_md_genelist_blair_copy.txt
vi srch_gbm_drivers_in_md_genelist_blair_copy.sh
#:1,$s/gbm_md_genelist_blair.txt/gbm_md_genelist_blair_copy.txt/
#:wq

sh srch_gbm_drivers_in_md_genelist_blair_copy.sh | awk '(NF==2)' | wc -l
23  #23 genes associated with mds comorbid with gbm are gbm drivers;
sh srch_gbm_drivers_in_md_genelist_blair_copy.sh | grep -v ^$ > gbm_drivers_in_md_copy.txt

#taking gbm_drivers_in_md_copy.txt to xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx , 
#sheet = mdgenes_are_candrivers ;

#i.e., took the files below to foll area in windows: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\LUAD
#luad_md_assocns_blair_copy.txt, luad_md_genes_oncokb_order_copy.txt, luad_drivers_in_md_copy.txt; 

#took the files below to foll area in windows: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\SKCM
#skcm_md_assocns_blair_copy.txt, skcm_md_genes_oncokb_order_copy.txt, skcm_drivers_in_md_copy.txt; 

#i.e., took the files below to foll area in windows: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\GBM
#gbm_md_assocns_blair_copy.txt, gbm_md_genes_oncokb_order_copy.txt, gbm_drivers_in_md_copy.txt; 

--------------------------------------------------

#starting a new cmd file to compare cbio and omim mutations:
# /scratch/prasannalab/cancers_in_detail/cmd3_mutns_cbio_omim.sh

############################################################
############################################################
############################################################

# MASTERFILE3 carries out the following piece of work;
#Comparing cancer driver mutations in cancer driver genes in 8 cancers collected 
#from cBioPortal, with the AVs catalogued for the same genes in OMIM;  

#3) MASTERFILE3 = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/cmd3_mutns_cbio_omim.sh

#Comparing tcga mutations collected for 8 cancers, for oncokb genes, with the mutations catalogued 
#for the genes in OMIM; lines below have been copied from /scratch/prasannalab/43drigenes_to_omim/cmd1contd1.sh ,
#and have been appropriately modified;

mkdir /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim

#All driver genes and mutations obtained from cbioportal, for each of the 8 cancers being studied, 
#are in the foll files; 
/scratch/prasannalab/cancers_in_detail/coadread/coadread_drivers.txt
/scratch/prasannalab/cancers_in_detail/brca/brca_drivers.txt
/scratch/prasannalab/cancers_in_detail/kirc/kirc_drivers.txt
/scratch/prasannalab/cancers_in_detail/hnsc/hnsc_drivers.txt
/scratch/prasannalab/cancers_in_detail/gbm/gbm_drivers.txt
/scratch/prasannalab/cancers_in_detail/luad/luad_drivers.txt
/scratch/prasannalab/cancers_in_detail/skcm/skcm_drivers.txt
/scratch/prasannalab/cancers_in_detail/laml/laml_drivers.txt

grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/coadread/coadread_drivers.txt | wc -l
#3303 drivers
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/brca/brca_drivers.txt | wc -l
#2492 drivers
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/kirc/kirc_drivers.txt | wc -l
#607 drivers
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/hnsc/hnsc_drivers.txt | wc -l
#1646 drivers
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/gbm/gbm_drivers.txt | wc -l
#805 drivers
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/luad/luad_drivers.txt | wc -l
#1663 drivers
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/skcm/skcm_drivers.txt | wc -l
#1668 drivers
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/laml/laml_drivers.txt | wc -l
#510 drivers

#https://askubuntu.com/questions/592273/count-the-number-of-unique-values-based-on-two-columns-in-a-spreadsheet
#Below, $1 = Gene name; $6 = "Protein Change"; i in a = loop through gene names; 
#j in a[i] = loop through "Protein Change" col associated with each gene name; 
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/coadread/coadread_drivers.txt | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$6]++} END {for (i in a) for (j in a[i]) print a[i][j], i, j}' | more
#wc -l = 2060

#Below, $32 = "ClinVar"; $6 = "Protein Change";  
#$32 is replaced by an integer: if mutn is documented in clinvar, $32 = 1; if no mention of mutn in clinvar, $32 = 0;
#grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/coadread/coadread_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int, $32}' | more
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/coadread/coadread_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int}' | more
#wc -l = 3303 lines

#foll. command seems to work; using a 3-d array (instead of the 2-d array in the gawk command above);
#$1=gene; $6="Protein Change"; $32=clinvar_as_int (which is 1 if mutn is mentioned in clinvar, 0 if it is not);
#all three can be counted together because, if a mutn repeats, the clinvar status will also repeat;
#Note: wc -l for cmd below (2071) does not match wc -l for the cmd above (2060);
#this is because a protein mutn can occur in several ways, and each mutn can have a different clinvar status; e.g., 
#1       APC     S1356*  0   5:g.112175358del   0
#3       APC     S1356*  1   5:g.112175358C>G   1 (Pathogenic)
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/coadread/coadread_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int}' | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$2][$3]++} END {for (i in a) for (j in a[i]) for (k in a[i][j]) print a[i][j][k], i, j, k}' > coadread_pr_mut_clinv_count.txt
#wc -l = 2071

#Latest and most accurate version of command; here, the definition of mutation has been expanded to include
#$6 (protein change), $16 (chromosome), $17 (start pos), $18 (end pos), $19 (ref), $20 (var) in 
#/scratch/prasannalab/cancers_in_detail/coadread/coadread_drivers.txt; thus, mutn definition is more 
#complete and accurate, and hence the mutn counts are more accurate; above, only $2 (protein change) was used to define mutn.
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/coadread/coadread_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6 "_" $16 "_" $17 "_" $18 "_" $19 "_" $20, clinvar_as_int}' | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$2][$3]++} END {for (i in a) for (j in a[i]) for (k in a[i][j]) print a[i][j][k], i, j, k}' > coadread_nt_mut_clinv_count.txt
#wc -l = 2099

#Both files may have their uses; two mutns may be different at nucleotide level, but may be the same
#at protein level;

wc -l coadread_pr_mut_clinv_count.txt coadread_nt_mut_clinv_count.txt
  2071 coadread_pr_mut_clinv_count.txt
  2099 coadread_nt_mut_clinv_count.txt
#thus, by improving mutn definition, the number of lines in file has increased (from 2071 to 2099);
#i.e., more unique mutations, and fewer repeating mutations;

#counting no. of unique mutns (protein level and nt level mutns) in each gene
awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count){print count[var], var}}' coadread_nt_mut_clinv_count.txt > coadread_nt_n_uniqmutns.txt
wc -l coadread_nt_n_uniqmutns.txt
281     #checking if things are ok, by counting no. of genes;

awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count){print count[var], var}}' coadread_pr_mut_clinv_count.txt > coadread_pr_n_uniqmutns.txt
wc -l coadread_pr_n_uniqmutns.txt
281     #checking if things are ok, by counting no. of genes;

#counting no. of repeating mutns in each gene;
awk -F"\t" '{IFS=OFS="\t"} ($1>1){print $0}' coadread_nt_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count) print count[var], var}' > coadread_nt_n_repeatmutns.txt
wc -l coadread_nt_n_repeatmutns.txt
116

awk -F"\t" '{IFS=OFS="\t"} ($1>1){print $0}' coadread_pr_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count) print count[var], var}' > coadread_pr_n_repeatmutns.txt  
wc -l coadread_pr_n_repeatmutns.txt
118

#counting no. of protein mutns, and nt mutns mentioned in clinvar in each gene;
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' coadread_pr_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {print $2, $3, $4}' | awk -F"\t" '{IFS=OFS="\t"} {count[$1]++} END {for (var in count) print count[var], var}' > coadread_pr_n_clinmutns.txt
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' coadread_nt_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {print $2, $3, $4}' | awk -F"\t" '{IFS=OFS="\t"} {count[$1]++} END {for (var in count) print count[var], var}' > coadread_nt_n_clinmutns.txt


#Total no. of genes = 281;

#counting total no. of unique protein mutns, and total no. of unique nt mutns;  
awk -F"\t" '{nuniqmutns += $1}END {print nuniqmutns}' coadread_pr_n_uniqmutns.txt
2071     #this is equal to no. of lines in file coadread_pr_mut_clinv_count.txt 
awk -F"\t" '{nuniqmutns += $1}END {print nuniqmutns}' coadread_nt_n_uniqmutns.txt
2099     #this is equal to no. of lines in file coadread_nt_mut_clinv_count.txt 

#counting total no. of repeating protein mutns, and total no. of repeating nt mutns;  
awk -F"\t" '{nrepmutns += $1}END {print nrepmutns}' coadread_pr_n_repeatmutns.txt
363
awk -F"\t" '{nrepmutns += $1}END {print nrepmutns}' coadread_nt_n_repeatmutns.txt
352

#Thus, above, the 6 files listed below have been created; 
#coadread_pr_n_uniqmutns.txt; coadread_pr_n_repeatmutns.txt; coadread_pr_n_clinmutns.txt
#coadread_nt_n_uniqmutns.txt; coadread_nt_n_repeatmutns.txt; coadread_nt_n_clinmutns.txt

#counting total no. of protein mutns mentioned in clinvar, and total no. of nt mutns mentioned in clinvar;  
#use foll. two commands OR the two below them;
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' coadread_pr_mut_clinv_count.txt | wc -l
621
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' coadread_nt_mut_clinv_count.txt | wc -l
632   

awk -F"\t" '{nclinmutns += $1}END {print nclinmutns}' coadread_pr_n_clinmutns.txt
621
awk -F"\t" '{nclinmutns += $1}END {print nclinmutns}' coadread_nt_n_clinmutns.txt
632

#Foll cmd gives total no. of mutations for each gene;
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/coadread/coadread_drivers.txt | gawk -F"\t" '{IFS=OFS="\t"}{a[$1]++} END {for (i in a) print a[i], i}' > coadread_totalmutns_per_gene.txt

#used the above file to create the foll seven cmd files; 
#the basic cmd in the cmd files is:
#echo -n -e "HLA-C\t\c" ; grep -w "HLA-C" coadread_totalmutns_per_gene.txt ; echo -n -e ""

awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" coadread_totalmutns_per_gene.txt ; echo -n -e \"\\n\""}' coadread_totalmutns_per_gene.txt > coadread_cmdlite_totalmutns_pergene.sh

awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" coadread_pr_n_clinmutns.txt ; echo -n -e \"\\n\""}' coadread_totalmutns_per_gene.txt > coadread_cmdlite_pr_clin.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" coadread_pr_n_repeatmutns.txt ; echo -n -e \"\\n\""}' coadread_totalmutns_per_gene.txt > coadread_cmdlite_pr_rep.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" coadread_pr_n_uniqmutns.txt ; echo -n -e \"\\n\""}' coadread_totalmutns_per_gene.txt > coadread_cmdlite_pr_uniq.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" coadread_nt_n_clinmutns.txt ; echo -n -e \"\\n\""}' coadread_totalmutns_per_gene.txt > coadread_cmdlite_nt_clin.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" coadread_nt_n_repeatmutns.txt ; echo -n -e \"\\n\""}' coadread_totalmutns_per_gene.txt > coadread_cmdlite_nt_rep.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" coadread_nt_n_uniqmutns.txt ; echo -n -e \"\\n\""}' coadread_totalmutns_per_gene.txt > coadread_cmdlite_nt_uniq.sh

sh coadread_cmdlite_totalmutns_pergene.sh | grep -v ^$ > coadread_countoftotalmutns.txt

sh coadread_cmdlite_pr_clin.sh | grep -v ^$ > coadread_pr_countofclinmutns.txt
sh coadread_cmdlite_pr_rep.sh | grep -v ^$ > coadread_pr_countofrepmutns.txt
sh coadread_cmdlite_pr_uniq.sh | grep -v ^$ > coadread_pr_countofuniqmutns.txt
sh coadread_cmdlite_nt_clin.sh | grep -v ^$ > coadread_nt_countofclinmutns.txt
sh coadread_cmdlite_nt_rep.sh | grep -v ^$ > coadread_nt_countofrepmutns.txt
sh coadread_cmdlite_nt_uniq.sh | grep -v ^$ > coadread_nt_countofuniqmutns.txt

#for protein mutns;
#Total no. of unique mutns in 281 genes = 2071
#Total no. of repeating mutns in 281 genes = 363
#Total no. of mutns mentioned in clinvar in 281 genes = 621

#for nt mutns;
#Total no. of unique mutns in 281 genes = 2099
#Total no. of repeating mutns in 281 genes = 352
#Total no. of mutns mentioned in clinvar in 281 genes = 632

#Downloaded the 6 files created above and listed below, to windows area:
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\COADREAD
#coadread_countoftotalmutns.txt    
#coadread_pr_countofuniqmutns.txt  coadread_pr_countofclinmutns.txt
#coadread_pr_countofrepmutns.txt  coadread_nt_countofuniqmutns.txt  
#coadread_nt_countofclinmutns.txt  coadread_nt_countofrepmutns.txt   

#imported the above files to excel; 
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx
#sheet = coadread_counting_dri_genes


#Working with tcga-cbio and omim mutations;

#Reactome pway informn is available for 862 oncokb + 324 blair_mel = 1186 genes; 
#plan to work with cbio and omim mutations of only these genes; 
#the list of 1186 genes is in the file:
#/scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/lst_1186_oncokb_blair_mel_genes.txt ;

#omim diseases for all oncokb genes are in the file: 
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/genes_oncokb_order_omim_diseases.txt

#omim diseases for blair-mel-genes-not-in-oncokb are in file:
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/blair_mel_genes_not_in_oncokb_to_omim/omim_diseases_for_b_m_g_not_in_oncokb.txt

#these files are also in the excel table:
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx
#sheet = oncokb_b_m_g_omim_assocn

#the above 2 files have to be trimmed to include only those genes that are in the
#1186 set; 

mkdir /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists

cp /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/lst_1186_oncokb_blair_mel_genes.txt \
lst_1186_o862_bm324.txt

cp /scratch/prasannalab/cancers_in_detail/oncokb_to_omim/genes_oncokb_order_omim_diseases.txt \
all_oncokb_omim_diseases.txt
cp /scratch/prasannalab/cancers_in_detail/oncokb_to_omim/blair_mel_genes_not_in_oncokb_to_omim/omim_diseases_for_b_m_g_not_in_oncokb.txt \
all_bmg_not_in_oncokb_omim_diseases.txt

cp lst_1186_o862_bm324.txt prep_only1186_omim_diseases.sh

vi prep_only1186_omim_diseases.sh
#:1,$s/^/awk -F"\\t" '(\$1 \~ \/\^/
#:1,$s/$/\$\/)'/
#:1,862s/$/ all_oncokb_omim_diseases.txt/
#:863,$s/$/ all_bmg_not_in_oncokb_omim_diseases.txt/
#:wq

#in the all_oncokb_omim_diseases.txt: 
#H1_2 is H1-2, H3_3A is H3-3A, HLA_A is HLA-A, H1_3 is H1-3, H1_4 is H1-4, H3_4 is H3-4, 
#HLA_B is HLA-B, H1_5 is H1-5, HLA_C is HLA-C
#manually edited prep_only1186_omim_diseases.sh to change H1_2 to H1-2, H3_3A to H3-3a, etc..
vi prep_only1186_omim_diseases.sh
#:1,$s/H1_2/H1-2/
#:1,$s/H3_3A/H3-3A/
#:1,$s/HLA_A/HLA-A/
#:1,$s/H1_3/H1-3/
#:1,$s/H1_4/H1-4/
#:1,$s/H3_4/H3-4/
#:1,$s/HLA_B/HLA-B/
#:1,$s/H1_5/H1-5/
#:1,$s/HLA_C/HLA-C/
#:wq

#for an explanation of foll vi, see below ("####explanation for "vi prep_only1186_omim_diseases.sh");
#note: prep_only1186_omim_diseases.sh now has 1183 lines;
vi prep_only1186_omim_diseases.sh
#deleted one of 2 CDKN2A lines
#deleted one of 2 CUX1 lines
#deleted one of 2 GNAS lines

sh prep_only1186_omim_diseases.sh > only1186_omim_diseases.txt

wc -l all_*
# 799 all_bmg_not_in_oncokb_omim_diseases.txt
#1690 all_oncokb_omim_diseases.txt
#2489 total

wc -l only1186_omim_diseases.txt
#2127 only1186_omim_diseases.txt  #2489 - 2127 = 362 lines have been left out when only
                                  #1186 genes are considered;

#foll cmd indicates that 392 out of 1186 genes are not associated with any disease in omim;  
awk -F"\t" '(NF < 4)' only1186_omim_diseases.txt | wc -l
#392  #392 genes are not associated with an omim disease; or 1186-392=794 genes are associated
      #with an omim disease; no gene name will be available from omim for the 392 genes;

#the file, only1186_omim_diseases.txt, lists the 1186 genes for which pway informn is available
#and, for each gene, indicates the omim disease(s), if any, the gene is associated with; 
#downloaded the foll file: 
#/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/only1186_omim_diseases.txt
#to windows area: d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files ;
#opened it in xl file: 
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\oncokb_complexdisease_md_assocns_new1186.xlsx
#sheet = oncokb_b_m_g_omim_assocn


####explanation for "vi prep_only1186_omim_diseases.sh"
awk -F"\t" '{print NF}' only1186_omim_diseases.txt | sort | uniq -c
#  392 2  # there are 392 2-field lines
# 1735 4  # there are 1735 4 field lines
awk -F"\t" '(NF == 2)' only1186_omim_diseases.txt | sort | uniq -c | sort -k1,1gr | more
#wc -l = 392 ; 
awk -F"\t" '(NF == 4){print $1}' only1186_omim_diseases.txt | sort | uniq | wc -l
#791  #this should have been 794, because 794+392=1186;
#foll cmd showed that there are 2 occurrences each of CDKN2A, CUX1, GNAS; 
sort lst_1186_o862_bm324.txt | uniq -c | sort -k1,1rg | more
# 2 CDKN2A
# 2 CUX1
# 2 GNAS

#An examination of foll file:
#/scratch/prasannalab/cancers_in_detail/pway_anal/1066oncokbpways/final_1066_reactome_uniprot_ids.txt
#showed that each of these genes - CDKN2A, CUX1, GNAS - has 2 uniprot ids; 
#in the grand genes vs reactions matrix, too, each of these genes appears twice; both GNAS entries
#behave similarly in the matrix, but the 2 CDKN2A and 2 CUX1 entries behave differently; 
#thus, went back above, edited prep_only1186_omim_diseases.sh, to retain only 1 CDKN2A, 1 CUX1, 1 GNAS; 
#then re-ran the prep file and regenerated only1186_omim_diseases.txt;
#this is because omim does not see uniprot id differences, and omim informn for each of these 3 genes 
#will needlessly appear twice in the only1186_omim_diseases.txt file and xl table; 
####ends here;


#using only1186_omim_diseases.txt to create 2 lists of genes that are associated with omim diseases; 
#one list contains oncokb genes that are associated with omim diseases; the other list contains 
#blair_mel genes that are associated with omim diseases; the oncokb list will be used to extract 
#cbio-tcga driver mutations for coadread (or any other cancer) from the driver mutations file; 
#the blair_mel list will be used to go back to cbio to see if the genes are mutated in cancers;  

vi only1186_omim_diseases.txt
#lines 1 to 1446 = oncokb genes;
#lines 1447 to 2127 = blair_mel genes; 

awk -F"\t" '((NR >= 1) && (NR <= 1446) && (NF == 4)){print $1}' only1186_omim_diseases.txt | sort | uniq \
> 485_ogenes_with_omimdiseases.txt
#wc -l = 485   oncokb genes with omim diseases
awk -F"\t" '((NR >= 1447) && (NR <= 2127) && (NF == 4)){print $1}' only1186_omim_diseases.txt | sort | uniq \
> 306_bmgenes_with_omimdiseases.txt 
#wc -l = 306   blair_mel genes with omim diseases

#there are 485 oncokb genes which are associated with omim diseases; and there are 306 blair_mel genes 
#associated with omim diseases; eventually, the allelic variants for these 485 + 306 = 791 genes have 
#to be downloaded from omim; to begin with, however, plan to download the allelic variants for the 
#coadread oncokb genes which are associated with omim diseases; i.e., out of the set of 485 oncokb genes
#associated with omim diseases, to identify the subset of genes with driver mutations in coadread, and 
#to download from omim the allelic variants for these genes; 
cp 485_ogenes_with_omimdiseases.txt prep_coadread_485onco_diseasegene_dri.sh
#include cmds of foll kind:
#awk -F"\t" '(($1 ~ /^AKT1$/) && ($2 !~ /^Study of Origin$/))' /scratch/prasannalab/cancers_in_detail/coadread/coadread_drivers.txt
vi prep_coadread_485onco_diseasegene_dri.sh
:1,$s/^/awk -F"\\t" '((\$1 \~ \/\^/
:1,$s/$/\$\/) \&\& (\$2 \!\~ \/\^Study of Origin\$\/))' \/scratch\/prasannalab\/cancers_in_detail\/coadread\/coadread_drivers.txt/
:wq
sh prep_coadread_485onco_diseasegene_dri.sh > coadread_drivers_for_ogenes_with_omimdiseases.txt

#foll cmd gives list of genes in above file; i.e., coadread genes associated with omim diseases; 
awk -F"\t" '{print $1}' coadread_drivers_for_ogenes_with_omimdiseases.txt | sort | uniq > tmplst1.sh
#wc -l tmplst1.sh = 189  there are 189 oncokb genes in coadread that are associated with omim diseases;
#turning tmplst1.sh to a cmd file;
vi tmplst1.sh
:1,$s/^/grep "\\b/
:1,$s/$/\\b" 485_ogenes_with_omimdiseases.txt/
:wq
sh tmplst1.sh > tmplst1out.txt
#wc -l tmplst1out.txt = 189
#tmplst1out.txt lists the 189 coadread genes whose allelic variants files need to be downloaded from omim;


vi /scratch/prasannalab/cancers_in_detail/coadread/coadread_drivers.txt
#/\t

#Useful cols;
#$1 = gene name; $6 = Protein Change; $7 = Annotation; $8 = Functional Impact; $9 = Mutation Type; 
#$10 = Variant Type; $11 = Copy #; $16 = Chromosome; $17 = Start Pos; 
#$18 = End Pos; $19 = Ref; $20 = Var; $22 = HGVSc; $32 = ClinVar; $33 = dbSNP; 

#ENST informn is important; it is in the HGVSc col, or $22;

#HGVS = Human Genome Variation Society; 
#"a letter prefix is mandatory to indicate the type of reference sequence used. Accepted prefixes are;
#“c.” for a coding DNA reference sequence
#“g.” for a linear genomic reference sequence
#“m.” for a mitochondrial DNA reference sequence
#“n.” for a non-coding DNA reference sequence
#“o.” for a circular genomic reference sequence
#“p.” for a protein reference sequence
#“r.” for an RNA reference sequence (transcript)"

#Less useful cols;
#$2 = Study of Origin; $3 = Sample ID; $4 = Cancer Type; $5 = Cancer Type Detailed; 
#$12 = COSMIC; $13 = MS; $14 = VS; $15 = Center; $21 = HGVSg; $23 = Allele Freq (T); $24 = Allele Freq (N); 
#$25 = Variant Reads; $26 = Ref Reads; $27 = Variant Reads (Normal); $28 = Ref Reads (Normal);  
#$29 = # Mut in Sample; $30 =  Exon; $31 = gnomAD; 


#awk -F"\t" '{IFS=OFS="\t"} {print $1,$6,$7,$8,$9,$10,$11,$16,$17,$18,$19,$20,$22,$32,$33}' coadread_drivers_for_ogenes_with_omimdiseases.txt | cut -f1,1 | uniq
#wc -l = 189

#awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6,$16,$17,$18,$19,$20,$9,$10,$11,$32,$33,$7,$8}' coadread_drivers_for_ogenes_with_omimdiseases.txt 
#wc -l = 2779

awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' coadread_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq -c 
#wc -l = 1687
#wc -l coadread_drivers_for_ogenes_with_omimdiseases.txt = 2779 ; thus, sort and uniq reduces 
#the number of mutns; 

awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' coadread_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > coadread_uniq_drivers_for_ogenes_with_omdis.txt 
#there are 1687 unique mutations in 189 coadread driver genes; the 189 genes are
#associated with omim diseases, and are listed in tmplst1out.txt; 


#https://www.ncbi.nlm.nih.gov/clinvar/docs/identifiers/
#ClinVar assigns accession numbers to its records. Accession numbers in ClinVar have the pattern of 3 letters and 
#9 numerals.  The letters are either SCV (think of it as Submitted record in ClinVar), RCV (Reference ClinVar record) 
#or VCV (Variation ClinVar record). These accession numbers also are assigned a version number. The version is 
#incremented when a submitter updates a record or when the contents of a reference or variation record change because 
#of addition to, updates of, or deletion of the SCV accessions on which it is based.

#https://bitesizebio.com/37885/using-dbsnp-and-clinvar-to-classify-gene-variants/
#dbSNP and ClinVar are both from NCBI;

#Heard about variant_summary.txt file from foll. site;
#https://www.ncbi.nlm.nih.gov/clinvar/docs/faq/#var_gene_order
#link to variant_summary.txt is the foll:
#https://ftp.ncbi.nlm.nih.gov/pub/clinvar/tab_delimited/variant_summary.txt.gz
#downloaded variant_summary.txt as follows: 
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists 
wget ftp.ncbi.nlm.nih.gov/pub/clinvar/tab_delimited/variant_summary.txt.gz

#variant_summary.txt.gz = 130 MB (8-9-2022)
gunzip variant_summary.txt.gz

#variant_summary.txt = 1.2 GB (8-9-2022)

#deleted old variant_summary.txt (930M) and variant_GRCh37.txt (471M); 
rm /scratch/prasannalab/luad_drivr_mutns/variant_summary.txt
rm /scratch/prasannalab/luad_drivr_mutns/variant_GRCh37.txt

#for a description of cols in variant_summary.txt, go to https://ftp.ncbi.nlm.nih.gov/pub/clinvar/README.txt
#variant_summary.txt
#Generated weekly
#Archived monthly (first Thurday of each month)

#nl variant_summary.txt | awk -F"\t" '/TP53/ && /c.927del/ && /GRCh37/ {print}'

#A tab-delimited report based on each variant at a location on the genome for which data have been submitted to ClinVar.  
#The data for the variant are reported for each assembly, so most variants have a line for GRCh37 (hg19) and another 
#line for GRCh38 (hg38).
#AlleleID               integer value as stored in the AlleleID field in ClinVar  (//Measure/@ID in the XML)
#Type                   character, the type of variant represented by the AlleleID
#Name                   character, ClinVar's preferred name for the record with this AlleleID
#GeneID                 integer, GeneID in NCBI's Gene database, reported if there is a single gene, otherwise reported as -1.
#GeneSymbol             character, comma-separated list of GeneIDs overlapping the variant
#HGNC_ID                string, of format HGNC:integer, reported if there is a single GeneID. Otherwise reported as '-'
#ClinicalSignificance   character, comma-separated list of aggregate values of clinical significance calculated for this variant
#ClinSigSimple          integer, 0 = no current value of Likely pathogenic or Pathogenic
#LastEvaluated          date, the latest date any submitter reported clinical significance
#RS# (dbSNP)            integer, rs# in dbSNP, reported as -1 if missing
#nsv/esv (dbVar)        character, the NSV identifier for the region in dbVar
#RCVaccession           character, list of RCV accessions that report this variant
#PhenotypeIDs           character, list of identifiers for phenotype(s) interpreted for this variant. If more than 5 conditions are reported,
#		        the number of conditions is reported instead.
#PhenotypeList          character, list of names corresponding to PhenotypeIDs. If more than 5 conditions are reported, the number of conditions
#		        is reported instead.
#Origin                 character, list of all allelic origins for this variant
#OriginSimple           character, processed from Origin to make it easier to distinguish between germline and somatic
#Assembly               character, name of the assembly on which locations are based  
#ChromosomeAccession    Accession and version of the RefSeq sequence defining the position reported in the start and stop columns. 
#Chromosome             character, chromosomal location
#Start                  integer, starting location, right-shifted, in pter->qter orientation
#Stop                   integer, end location, right-shifted, in pter->qter orientation
#ReferenceAllele        The reference allele using the right-shifted location in Start and Stop.
#AlternateAllele        The alternate allele using the right-shifted location in Start and Stop.
#Cytogenetic            character, ISCN band
#ReviewStatus           character, highest review status for reporting this measure. For the key to the terms, 
#NumberSubmitters       integer, number of submitters describing this variant
#Guidelines             character, ACMG only right now, for the reporting of incidental variation in a Gene 
#TestedInGTR            character, Y/N for Yes/No if there is a test registered as specific to this variant 
#OtherIDs               character, list of other identifiers or sources of information about this variant
#SubmitterCategories    coded value to indicate whether data were submitted by another resource (1), any other type of source (2), both
#VariationID            The identifier ClinVar uses specific to the AlleleID.  Not all VariationIDS that may be related to
#                       the AlleleID are reported in this file. For a comprehensive mapping of AlleleID to VariationID,
#		        please use ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/tab_delimited/variation_allele.txt.gz.
#PositionVCF	        integer, starting location, left-shifted, in pter->qter orientation
#ReferenceAlleleVCF     The reference allele using the left-shifted location in vcf_pos.
#AlternateAlleleVCF     The alternate allele using the left-shifted location in vcf_pos.


#How allelic variants are included in OMIM;
#https://academic.oup.com/nar/article/43/D1/D789/2439148


#$1 = AlleleID; $3 = name of variant with this AlleleID; $10 = RS# (dbSNP); $12 = RCVaccession
#$17 = Assembly
awk -F"\t" '{print $1, $3, $7, $10, $12, $17}' variant_summary.txt | more

#$2 below contains the important ENST informn; the informn comes from the HGVSc col, or $22, in: 
#coadread_drivers_for_ogenes_with_omimdiseases.txt
awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' coadread_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#30   i.e., there are 30 mutations without ENST Id; e.g.s listed below; most of the mutations listed
#below are fusions and genuinely do not have an ENST Id in the tsv file downloaded from cbio ; 
#for these, $2 or ENST col is empty; 
#however, below, for HLA-A, a decimal number was appearing as $2; went back to file: 
#coadread_drivers_for_ogenes_with_omimdiseases.txt , and found that the col:
#"OncoKB: Likely Oncogenic, ...." is missing in the file I downloaded from cbio; so, went back to 
#cbio and downloaded the file again for coadread; found that this "OncoKB: Likely Oncogenic, ...." 
#col is now (irritatingly) present! as ENST is only being used in this part of the project, 
#decided NOT to start all over again, by going back to cbio; instead, 
#decided to MANUALLY EDIT the file: coadread_drivers_for_ogenes_with_omimdiseases.txt; 
CUX1            E440Afs*25
ESCO2           ESCO2-PTK2B
FANCD2          X168_splice
FH              OPN3-FH
FOXP1           ZNF717-FOXP1
HLA-A   0.15    R7Pfs*92
HLA-A   0.16    R7Efs*13
HLA-A   0.22    R7Efs*13
HLA-A   0.22    X207_splice
HLA-A   0.61    Q78*

#MANUALLY EDITING coadread_drivers_for_ogenes_with_omimdiseases.txt to introduce correct HLA-A lines;
#uploaded the new HLA-A.tsv file (called table.tsv in unix server, but HLA_A_new.tsv in windows) to pwd; 
#went to the position where HLA-A lines are; 
#prepared table.tsv;
awk -F"\t" '{print "HLA-A\t" $0}' table.tsv > table2.tsv
#edited the coadread_drivers_for_ogenes_with_omimdiseases.txt file, and introduced table2.tsv
#in place of the old HLA-A lines;
vi coadread_drivers_for_ogenes_with_omimdiseases.txt
/HLA-A
i, esc, !!, cat table2.tsv

#below, re-ran cmd to get the coadread_uniq_drivers_for_ogenes_with_omdis.txt file; 
awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' coadread_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > coadread_uniq_drivers_for_ogenes_with_omdis.txt 

#reran above cmd to check if, for HLA-A, decimal number goes away from $2;
awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' coadread_uniq_drivers_for_ogenes_with_omdis.txt
#No HLA-A lines occur! 
#note: the ENST Ids differ between old HLA-A.tsv file and new HLA_A_new.tsv file;   

awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' coadread_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#25
awk -F"\t" '{IFS=OFS="\t"} ($2 ~ /:/){print}' coadread_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#1662
wc -l coadread_uniq_drivers_for_ogenes_with_omdis.txt
#1687    1662 + 25 = 1687

#Thinking aloud; if you were to write a perl program:
#Read into an array the set of 1662 mutations, the oncokb assessment, the enst, mutation details; write 
#these into output file; then, search for each mutn in clinvar file; so for some of the cbio mutns you 
#will get dbsnp, clinvar and allele ids, and NM (refseq, mRNA) IDs, but for other mutations you will not.
#the OMIM file gives dbSNP and ClinVar IDs.  With this, one should be able to compare mutns in the OMIM 
#and cbio files;

#Output file should have: gene name, ENST mutn, ENST Protein mutn, NM mutn, NM Protein mutn, 
#ClinVar ID, dbSNP ID, Allele ID, clinvar assessment, OncoKB assessment;

#Preparing input file for perl program; 
#getting the set of 1687 unique mutns, and removing fusions from the list; 
awk -F"\t" '{IFS=OFS="\t"}{print $1,$22,$6,$32,$7}' coadread_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > tmp1.txt
#wc -l tmp1.txt = 1687 ;
awk -F"\t" '{IFS=OFS="\t"}($2 ~ /:/){print}' tmp1.txt > tmp2.txt
#wc -l tmp2.txt = 1662 ;
#edited tmp2.txt to replace ; with \t, to retain only oncoKB assessment;
vi tmp2.txt  
#:1,$s/;/\t/
#:wq
awk -F"\t" '{IFS=OFS="\t"}{print $1,$2,$3,$4,$5}' tmp2.txt > tmp3.txt
#wc -l tmp3.txt = 1662 ;
#a header line is required; took the line from foll file;
#/scratch/prasannalab/luad_drivr_mutns/infil_mutns808_assessmt_cv_oncokb.txt
#the header line is the foll:
#Gene    HGVSc   Protein Change  ClinVar Annotation
awk -F"\t" '(NR==1)' /scratch/prasannalab/luad_drivr_mutns/infil_mutns808_assessmt_cv_oncokb.txt > tmp4.txt
cat tmp4.txt tmp3.txt > infil_coadread_mutns_cv_oncokbannotn.txt
rm tmp1.txt tmp2.txt tmp3.txt tmp4.txt


#Total no. of entries in variant_summary.txt;
wc -l variant_summary.txt
#3048013
#No. of GRCh37 entries in variant_summary.txt;  
awk -F"\t" '($17 ~ /^GRCh37$/) {print}' variant_summary.txt | wc -l
#1545541
#No. of GRCh38 entries in variant_summary.txt;  
awk -F"\t" '($17 ~ /^GRCh38$/) {print}' variant_summary.txt | wc -l
#1493755
#No. of non-GRCh37 and non-GRCh38 entries in variant_summary.txt
#these entries are "na" or "NCBI36" or "Assembly" at col 17;
awk -F"\t" '($17 !~ /^GRCh38$/) && ($17 !~ /^GRCh37$/) {print}' variant_summary.txt | wc -l
#8717 (1545541 + 1493755 + 8717 = 3048013)
#non-GRCh37 and non-GRCh38 entries in variant_summary.txt
awk -F"\t" '($17 !~ /^GRCh38$/) && ($17 !~ /^GRCh37$/) {print $17}' variant_summary.txt | sort | uniq -c
#     1 Assembly
#  3948 na
#  4768 NCBI36

#for a smaller input file to program, extracting only heading and
#GRCh37 entries in variant_summary.txt
awk -F"\t" '{IFS=OFS="\t"}(NR==1)||($17 ~ /^GRCh37$/) {print}' variant_summary.txt > variant_summary_GRCh37.txt
wc -l variant_summary_GRCh37.txt
#1545542  (1545541 GRCh37 entries + 1 header line)
lh variant*
611M Sep  9 variant_summary_GRCh37.txt
1.2G Sep  4 variant_summary.txt

#Running perl program, srch_cbiomutns_in_clinvar.pl; takes about 5 mins for the job to complete;
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists

nohup perl /scratch/prasannalab/luad_drivr_mutns/srch_cbiomutns_in_clinvar.pl infil_coadread_mutns_cv_oncokbannotn.txt variant_summary_GRCh37.txt outfil_coadread_cbio_clinvar.txt &

awk -F"\t" '{IFS=OFS="\t"}{print NF}' outfil_coadread_cbio_clinvar.txt | sort | uniq -c
#  641 12  (for 641 - 1 header = 640 mutns, clinvar, dbsnp annotations obtained)
# 1022 6   (for 1022 mutns, clinvar and dbsnp annotations are not obtained; i.e., these mutns are obsvd only in cbio)

#header in outfil_coadread_cbio_clinvar.txt
# 1     2      3               4       5            6         7     8     9           10                   11           12
#Gene  HGVSc  Protein Change  ClinVar Annotation  #AlleleID  Type  Name  GeneSymbol  ClinicalSignificance  RS# (dbSNP)  RCVaccession
#$1, $9, $2, $3, $8, $7, $11, $12, $6, $4, $10, $5;
awk -F"\t" '{IFS=OFS="\t"}{print $1, $9, $2, $3, $8, $7, $11, $12, $6, $4, $10, $5}' outfil_coadread_cbio_clinvar.txt > cols_rearranged_cbio_clinvar_coadread.txt

#my impression - clinvar and dbsnp store mutations which are observed in 1% of population
#cbio mutations are too small in number to be population based mutations; i.e., they 
#are disease causing mutations, that are rare and not observed in a population; 
#thus many mutations in cbio will not be found in dbsnp and clinvar;


#the file tmplst1out.txt, created above, lists the 189 coadread genes whose allelic variants 
#files need to be downloaded from omim; 
#wc -l tmplst1out.txt = 189
#created a sub-directory to contain all allelic variants files downloaded from omim; 

mkdir /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles

#In windows downloaded files to: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\all_omim_avfiles

cp /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/tmplst1out.txt \
/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/genes_downloaded_from_omim.txt

#used this file, genes_downloaded_from_omim.txt, while downloading files from omim; some observations/notes 
#may be in the file; 

#transferred 187 omim av files from windows to:
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles

#trial cmd;
awk -F"\t" '{IFS=OFS="\t"}(NR<9)||($0 ~ /^$/){print $0}(NR==9){print "Gene", $0}(NR>9)&&($0 !~ /^$/){print "APC", $0}' OMIM-Allelic-Variants-611731_APC.tsv

#creating small batch file to modify OMIM allelic variant (av) files;
#used ls1col cmd to create a list of genes whose omim av files have been downloaded;
ls1col *.tsv | sed -e 's/OMIM-Allelic-Variants-//' -e 's/[0-9]*_//' -e 's/.tsv//' > downloaded_av_genenames.txt
#wc -l = 187
cp downloaded_av_genenames.txt temp1.txt

#manually edited temp1.txt to incorporate lines such as below:
#awk -F"\t" '{IFS=OFS="\t"}(NR==9){print "Gene", $0}(NR>9)&&($0 !~ /^$/){print "BRCA1", $0}' OMIM_Allelic_Variants_113705_BRCA1.txt >> omim_all_av.txt
vi temp1.txt
:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}(NR==9){print "Gene", \$0}(NR>9)\&\&(\$0 \!\~ \/\^\$\/){print "/
:1,$s/$/", \$0}' /
:wq

#temp file containing omim av filenames;  
l | awk -F" " '{print $NF}' > temp2.txt
#manually edited temp2.txt to remove non *.tsv lines
vi temp2.txt
#wc -l temp2.txt = 187

paste -d" " temp1.txt temp2.txt > coadread_modify_omim_av_files.sh

vi coadread_modify_omim_av_files.sh
:1,$s/  OMIM/ OMIM/
:1,$s/$/ >> coadread_omim_all_av.txt/
:wq

sh coadread_modify_omim_av_files.sh
#output file = coadread_omim_all_av.txt

grep -v "Gene" coadread_omim_all_av.txt | wc -l
#2337   total number of omim av in the set of 187 genes;

#checking if the total number of 2337 omim av obtained above is correct; using grep to search for the pattern 
#"Selected Example" in multiple files;
grep "Selected Example" OMIM*.tsv | awk -F"Variants " '{print $2}' | sed -e 's/(//' -e 's/ Selected Examples)//' -e 's/ Selected Example)//' | awk '{count += $1; print $1, count}'
#2337   this is the total obtained upon counting the numbers given in the "Selected Examples" or "Selected Example" lines; 
#       it matches the above total of 2337;

#removed header lines for individual genes, but retained one header line at the top; 
#i.e., 2337 av + 1 header line; 
awk -F"\t" '{IFS=OFS="\t"}(NR==1){print $0}(NR>1)&&($1 !~ /Gene/){print}' coadread_omim_all_av.txt > temp.txt
cp temp.txt coadread_omim_all_av.txt
rm temp.txt

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles
awk -F"\t" '{IFS=OFS="\t"}(NR>1)&&(NF==12){print $0}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/outfil_coadread_cbio_clinvar.txt 
#wc -l = 640;  thus, for coadread, there are 640 cbio mutns out of 1662 with rs and cv ids; 
awk -F"\t" '{IFS=OFS="\t"}(NF==12){print $0}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/outfil_coadread_cbio_clinvar.txt > /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/coadread_640cbio_mutns_with_rs_cv_ids.txt 


#the next step is to see which of the 640 coadread cbio mutns are in 2337 omim set; 
#writing perl program: /scratch/prasannalab/luad_drivr_mutns/identifying_mutns_common_to_omim_and_clinv.pl ; 
#in the program, the foll. cols will have to be split;
#cbio: $12 = clinvar accession; multiple entries per line; $11, which gives rs ID, contains one entry per line, 
#but some entries maybe -1, meaning rs ID is missing; 
#omim: $5 = SNP; more than one entries per line can occur; some lines can be blank; $7 = clinvar ID; more than one
#entries can occur per line; some lines can be blank;

awk -F"\t" '{IFS=OFS="\t"}{print $11, $12}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/coadread_640cbio_mutns_with_rs_cv_ids.txt | more
#RS# (dbSNP)     RCVaccession
#549370342       RCV001045694
#137852216       RCV000011453|RCV002266900
#1060503282      RCV001800684|RCV002230147
#587779783       RCV000115073|RCV000501097|RCV001270020|RCV001292808|RCV001824606|RCV002228333
#-1      RCV001956256
#79512956        RCV000074229
#-1      RCV001843939
#794727160       RCV000174975|RCV002229003

awk -F"\t" '{IFS=OFS="\t"}{print $5, $7}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/coadread_omim_all_av.txt | more 
#SNP     ClinVar
#rs28999111      RCV000019980
#rs104894544     RCV000019981,RCV000680835,RCV001568362
#rs104894545     RCV000019982
#rs104894546     RCV000019983,RCV000680834


#running perl program, identifying_mutns_common_to_omim_and_clinv.pl
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists
perl /scratch/prasannalab/luad_drivr_mutns/identifying_mutns_common_to_omim_and_clinv.pl /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/coadread_640cbio_mutns_with_rs_cv_ids.txt /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/coadread_omim_all_av.txt coadread_cbio640_rs_mapped_to_omim.txt coadread_cbio640_clinv_mapped_to_omim.txt
uniq coadread_cbio640_clinv_mapped_to_omim.txt > coadread_cbio640_clinv_mapped_to_omim_uniq.txt
#file to be used is coadread_cbio640_clinv_mapped_to_omim_uniq.txt; this is for the foll reason:
#a mutn (e.g., AKT1 E17K) may occur once in the input file (coadread_640cbio_mutns_with_rs_cv_ids.txt), 
#but may be associated with multiple RCV identifiers (24 identifiers for AKT1 E17K); hence in the output file 
#(coadread_cbio640_clinv_mapped_to_omim.txt) the mutn (AKT1 E17K) is repeated as many times as there are RCV
#identifiers (24 times for AKT1 E17K); hence, to remove repeating mutn lines arising due to multiple RCV 
#identifiers, the uniq command has to be used;

wc -l coadread_640cbio_mutns_with_rs_cv_ids.txt coadread_cbio640_rs_mapped_to_omim.txt coadread_cbio640_clinv_mapped_to_omim.txt coadread_cbio640_clinv_mapped_to_omim_uniq.txt
#   641 (641 - 1 header = 640) coadread_640cbio_mutns_with_rs_cv_ids.txt         (input file)
#   148 (148 - 1 header = 147) coadread_cbio640_rs_mapped_to_omim.txt            (output file)
#  1248 (1248 - 1 header = 1247) coadread_cbio640_clinv_mapped_to_omim.txt         (output file)
#   248 (248 - 1 header = 247) coadread_cbio640_clinv_mapped_to_omim_uniq.txt    (output file)

#did another sort and uniq -c on output file, coadread_cbio640_clinv_mapped_to_omim_uniq.txt ;  
#this was done to club together identical mutations that might have been missed by above uniq cmd;
sort coadread_cbio640_clinv_mapped_to_omim_uniq.txt | uniq -c > coadread_cbio640_clinv_mapped_to_omim_sortuniqc.txt 
#wc -l coadread_cbio640_clinv_mapped_to_omim_sortuniqc.txt = 112 (112-1 header = 111)
#thus 247 from the *_uniq.txt file has reduced to 111 in the *_sortuniqc.txt file;

#edited the file to bring header line to top of file, and to remove the count for header line;
vi coadread_cbio640_clinv_mapped_to_omim_sortuniqc.txt
#this file gives count of number of times each unique mutation repeats; 

awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11}' coadread_cbio640_rs_mapped_to_omim.txt | more
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12}' coadread_cbio640_rs_mapped_to_omim.txt | more
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11}' coadread_cbio640_clinv_mapped_to_omim_sortuniqc.txt | more
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $6, $13}' coadread_cbio640_clinv_mapped_to_omim_sortuniqc.txt | more
awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $13}' coadread_cbio640_clinv_mapped_to_omim_sortuniqc.txt | more
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $4, $3, $11}' coadread_cbio640_clinv_mapped_to_omim_sortuniqc.txt | more
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $4, $3, $11}' coadread_cbio640_rs_mapped_to_omim.txt | more
#below 2 useful;
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13}' coadread_cbio640_clinv_mapped_to_omim_sortuniqc.txt | more 
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13}' coadread_cbio640_rs_mapped_to_omim.txt | more 

#the note below is more or less the same as was written in the pilot stage;
#the perl program, identifying_mutns_common_to_omim_and_clinv.pl, compares cbio and omim rs ids separately,
#and compares cbio and omim clinv ids SEPARATELY; as a result: (i) in the cbio and omim rs_id_compared output 
#file, only cbio and omim mutns with matching rs_ids are listed; also, for the listed mutations, while rs_ids 
#match, the cv_ids may not match:
#e.g.(1) in luad, for CTNNB1, rs12193403, for SER37CYS clinv_ids match, but for SER37PHE, 
#clinv_ids do not match; this is because rs12193403 includes alleles: C>A / C>G / C>T; hence, comparing
#only rs_ids, but not clinv_ids, can be ambiguous; 
#e.g.(2) in coadread, in mutn below, rsids match, but clinv ids do not match; 
#APC     S1465Wfs*3      APC, 4-BP DEL, CODON 1464       387906234       rs387906234     RCV000000849|RCV000000850|RCV000202100|RCV000210178|RCV000502554|RCV001022414|RCV002227972   RCV000000851,RCV000500484,RCV000565829,RCV002227973 ;
#(ii) in the cbio and omim clinv_id compared output file,
#mutations with matching clinv_ids are listed; for the listed, clinv_id matched mutations, the rs_id may 
#or may not (thankfully) be listed for the cbio mutation; but the rs_id is given for the omim mutn; thus 
#in the clinv_id matched output file, selecting mutations which have both cbio and omim clinv_id entries, 
#and which have both cbio and omim rs_id entries, will identify mutations that one may work with; i.e., 
#somatic mutations occurring in cbio, and germline mutations occurring in omim would have been identified;
#the next step would be to ensure that the set of mutations are unique, not repeating; 

###NOTE: MANUALLY CHECK the coadread_cbio640_clinv_mapped_to_omim_sortuniqc.txt file to see if the 
###rsids from cbio and omim match; commands below help; 
###in clinv_mapped_to_omim file, (i) cbio or omim rs_id may not be given for a mutn, but RCV_ids are similar; 
###however, in other occurrences of the SAME mutn, both rs_ids are similar; such mutns should be accepted even 
###though an rsid is missing; in coadread KRAS, for both G12D and G12V, both rs_ids are sometimes reported and 
###sometimes not; but it is clear that there is no reason to leave out mutations in which an rs_id is missing;
###(ii) clinv and omim RCV_ids match, but cbio rs_id and omim rs_ids do not match; such mutations have to
###be left out; in PIK3CA E545A AND 2-BP DEL/1-BP INS the 2 rsids do not match (121913274, 587777795); this 
###mutn cannot be considered; in another occurrence of PIK3CA E545A the 2 rsids match (121913274, 121913274)
###(note added later, on 21-90=-22: decided to accept this mutation, i.e., PIK3CA E545A AND 2-BP DEL.....)
###(iii) in a PIK3CA R115P mutn, one rsid is "-1" and the other is not given; this mutn has to be left out;

awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13}' coadread_cbio640_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($4 != $5)' 
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13}' coadread_cbio640_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($4 == $5)'
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13}' coadread_cbio640_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($4 != $5)&&($5 !~ /^$/)'
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13}' coadread_cbio640_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)' 

or 

awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' coadread_cbio640_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 == $6)' | grep "APC"
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' coadread_cbio640_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 != $6)' | grep "APC"

###to avoid using sed to replace "rs", use foll cmds; 
###creating final file of unique mutations which includes: (i) mutns with cbio and omim rsids and clinvids matched; 
###(ii) INCLUDING mutns which may have one rsid missing, but upon inspection it was found that the mutns may be included;


###use foll cmds if you want an output for an xl table with MORE INFORMN (phenotype, HGVSc, Name cols included); 
###NOTE: below, I am using the coadread_cbio640_clinv_mapped_to_omim_uniq.txt file, NOT *_sortuniqc.txt file; this 
###is to get a proper count of uniq mutations; for coadread, using *_sortuniqc.txt worked, and a proper count was
###obtained; for brca, however, a proper count in final file was not obtained; hence, for consistency, using 
###*_uniq.txt for coadread as well; using the *_sortuniqc.txt file ABOVE is helpful because the lists to examine 
###are shorter; the foll cmds may have to be customised in different cancers to include mutns you think should be 
###included;

awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' coadread_cbio640_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 ~ /Gene/){print}($1 !~ /Gene/)&&($5 ~ $4)' > junk
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' coadread_cbio640_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)&&($5 ~ /^$/)&&($4 !~ /-1/)' >> junk
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' coadread_cbio640_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)' | grep "ENST00000263967.3:c.1634A>C" >> junk
sort junk | uniq -c > junk2
#edit file junk2 to move header line to top; remove count for header line; add a col heading called "n(mutns)\t"
vi junk2
sed -e 's/^[ ]*//' -e '2,$s/ /\t/' junk2 > coadread_cbio_omim_matched_mutns.txt
#edit file to move header line to top; remove count for header line; add a col heading called "n(mutns)\t"
vi coadread_cbio_omim_matched_mutns.txt
###wc -l coadread_cbio_omim_matched_mutns.txt = 111 (110 uniq mutns + 1 header line = 111)

#Have to introduce the correct counts for each mutation in coadread_cbio_omim_matched_mutns.txt from
#coadread_drivers_for_ogenes_with_omimdiseases.txt or 
#/scratch/prasannalab/cancers_in_detail/coadread/coadread_drivers.txt ; 
#have to turn coadread_cbio_omim_matched_mutns.txt into a batch file which searches for each mutn in the
#above 2 driver files;
#have to create a batch file with cmds of the foll kind; 
#awk -F"\t" '{IFS=OFS="\t"}($1 ~ /^BAP1$/) && ($6 ~ /^Q267\*$/) && ($22 ~ /^ENST00000460680.1:c.799C>T$/)' coadread_drivers_for_ogenes_with_omimdiseases.txt
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $2, $3, $10}' coadread_cbio_omim_matched_mutns.txt | uniq > prep_coadread_noccs_cbio_omim_matched_mutns.sh 
vi prep_coadread_noccs_cbio_omim_matched_mutns.sh
#:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}(\$1 \~ \/\^/
#:1,$s/\t/    /
#:1,$s/    /\$\/) \&\& (\$6 \~ \/^/
#:1,$s/\t/    /
#:1,$s/    /\$\/) \&\& (\$22 \~ \/\^/
#:1,$s/$/\$\/)' coadread_drivers_for_ogenes_with_omimdiseases.txt/
#:1,$s/\*/\\*/
#:wq
cp prep_coadread_noccs_cbio_omim_matched_mutns.sh tst1.sh
vi tst1.sh
#:1,$s/coadread_drivers_for_ogenes_with_omimdiseases.txt/\/scratch\/prasannalab\/cancers_in_detail\/coadread\/coadread_drivers.txt/
#:wq
sh tst1.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | more
#the output from tst1.sh should be same as output from cmd below: 
sh prep_coadread_noccs_cbio_omim_matched_mutns.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | more

#if outputs are same, use cmds below to get final file;
echo "" > scratch.txt
sh prep_coadread_noccs_cbio_omim_matched_mutns.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | sed -e 's/^[ ]*//' -e '1,$s/ /\t/' >> scratch.txt
#Use foll cmd to MANUALLY MAKE DUPLICATE LINES in scratch.txt of those mutations which occur multiple 
#times in coadread_cbio_omim_matched_mutns.txt; to identify the duplicate mutations in 
#coadread_cbio_omim_matched_mutns.txt, use foll cmd: (e.g., APC R302*, BRAF L597V, 
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $2, $3, $10}' coadread_cbio_omim_matched_mutns.txt | uniq -c | more 
vi scratch.txt
#use paste cmd below to make sure the same gene and mutn lines are being pasted;
paste -d"\t" scratch.txt coadread_cbio_omim_matched_mutns.txt | more
paste -d"\t" scratch.txt coadread_cbio_omim_matched_mutns.txt | awk -F"\t" '{IFS=OFS="\t"}{print $1,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}' > coadread_noccs_cbio_omim_matched_mutns.txt

###taking foll file unix file to xl: 
#/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/coadread_noccs_cbio_omim_matched_mutns.txt
#downloaded to windows area: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\COADREAD\coadread_noccs_cbio_omim_matched_mutns.txt
#xl file = D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx
#sheet = coadread_cbio_omim_mutns ;

-------------------------------------------------------------------

#BRCA

#Comparing tcga mutations collected for brca, for oncokb genes, with the mutations catalogued 
#for the genes in OMIM; the coadread set of lines above have been copied below, and have been 
#appropriately modified;

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim

#Driver genes and mutations for brca, obtained from cbioportal, are in the foll file; 
/scratch/prasannalab/cancers_in_detail/brca/brca_drivers.txt

grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/brca/brca_drivers.txt | wc -l
#2492 drivers

#https://askubuntu.com/questions/592273/count-the-number-of-unique-values-based-on-two-columns-in-a-spreadsheet
#Below, $1 = Gene name; $6 = "Protein Change"; i in a = loop through gene names; 
#j in a[i] = loop through "Protein Change" col associated with each gene name; 
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/brca/brca_drivers.txt | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$6]++} END {for (i in a) for (j in a[i]) print a[i][j], i, j}' | more
#wc -l = 1835

#Below, $32 = "ClinVar"; $6 = "Protein Change";  
#$32 is replaced by an integer: if mutn is documented in clinvar, $32 = 1; if no mention of mutn in clinvar, $32 = 0;
#grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/brca/brca_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int, $32}' | more
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/brca/brca_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int}' | more
#wc -l = 2492 lines

#foll. command seems to work; using a 3-d array (instead of the 2-d array in the gawk command above);
#$1=gene; $6="Protein Change"; $32=clinvar_as_int (which is 1 if mutn is mentioned in clinvar, 0 if it is not);
#all three can be counted together because, if a mutn repeats, the clinvar status will also repeat;
#Note: wc -l for cmd below (1846) does not match wc -l for the cmd above (1835);
#this is because a protein mutn can occur in several ways, and each mutn can have a different clinvar status; e.g., 
#1       PIK3CA  M1043I  0  c.3129G>C
#2       PIK3CA  M1043I  1  c.3129G>A  Pathogenic/Likely_pathogenic
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/brca/brca_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int}' | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$2][$3]++} END {for (i in a) for (j in a[i]) for (k in a[i][j]) print a[i][j][k], i, j, k}' > brca_pr_mut_clinv_count.txt
#wc -l = 1846

#Latest and most accurate version of command; here, the definition of mutation has been expanded to include
#$6 (protein change), $16 (chromosome), $17 (start pos), $18 (end pos), $19 (ref), $20 (var) in 
#/scratch/prasannalab/cancers_in_detail/brca/brca_drivers.txt; thus, mutn definition is more 
#complete and accurate, and hence the mutn counts are more accurate; above, only $2 (protein change) 
#was used to define mutn
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/brca/brca_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6 "_" $16 "_" $17 "_" $18 "_" $19 "_" $20, clinvar_as_int}' | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$2][$3]++} END {for (i in a) for (j in a[i]) for (k in a[i][j]) print a[i][j][k], i, j, k}' > brca_nt_mut_clinv_count.txt
#wc -l brca_nt_mut_clinv_count.txt = 1867

#Both files may have their uses; two mutns may be different at nucleotide level, but may be the same
#at protein level;

wc -l brca_pr_mut_clinv_count.txt brca_nt_mut_clinv_count.txt
  1846 brca_pr_mut_clinv_count.txt
  1867 brca_nt_mut_clinv_count.txt
#thus, by improving mutn definition, the number of lines in file has increased (from 1846 to 1867);
#i.e., more unique mutations, and fewer repeating mutations;

#counting no. of unique mutns (protein level and nt level mutns) in each gene
awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count){print count[var], var}}' brca_nt_mut_clinv_count.txt > brca_nt_n_uniqmutns.txt
wc -l brca_nt_n_uniqmutns.txt
266     #checking if things are ok, by counting no. of genes;

awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count){print count[var], var}}' brca_pr_mut_clinv_count.txt > brca_pr_n_uniqmutns.txt
wc -l brca_pr_n_uniqmutns.txt
266     #checking if things are ok, by counting no. of genes;

#counting no. of repeating mutns in each gene;
awk -F"\t" '{IFS=OFS="\t"} ($1>1){print $0}' brca_nt_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count) print count[var], var}' > brca_nt_n_repeatmutns.txt
wc -l brca_nt_n_repeatmutns.txt
43

awk -F"\t" '{IFS=OFS="\t"} ($1>1){print $0}' brca_pr_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count) print count[var], var}' > brca_pr_n_repeatmutns.txt  
wc -l brca_pr_n_repeatmutns.txt
44

#counting no. of protein mutns, and nt mutns mentioned in clinvar in each gene;
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' brca_pr_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {print $2, $3, $4}' | awk -F"\t" '{IFS=OFS="\t"} {count[$1]++} END {for (var in count) print count[var], var}' > brca_pr_n_clinmutns.txt
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' brca_nt_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {print $2, $3, $4}' | awk -F"\t" '{IFS=OFS="\t"} {count[$1]++} END {for (var in count) print count[var], var}' > brca_nt_n_clinmutns.txt

#Total no. of genes = 266;

#counting total no. of unique protein mutns, and total no. of unique nt mutns;  
awk -F"\t" '{nuniqmutns += $1}END {print nuniqmutns}' brca_pr_n_uniqmutns.txt
1846     #this is equal to no. of lines in file brca_pr_mut_clinv_count.txt 
awk -F"\t" '{nuniqmutns += $1}END {print nuniqmutns}' brca_nt_n_uniqmutns.txt
1867     #this is equal to no. of lines in file brca_nt_mut_clinv_count.txt 

#counting total no. of repeating protein mutns, and total no. of repeating nt mutns;  
awk -F"\t" '{nrepmutns += $1}END {print nrepmutns}' brca_pr_n_repeatmutns.txt
168
awk -F"\t" '{nrepmutns += $1}END {print nrepmutns}' brca_nt_n_repeatmutns.txt
160

#Thus, above, the 6 files listed below have been created; 
#brca_pr_n_uniqmutns.txt; brca_pr_n_repeatmutns.txt; brca_pr_n_clinmutns.txt
#brca_nt_n_uniqmutns.txt; brca_nt_n_repeatmutns.txt; brca_nt_n_clinmutns.txt

#counting total no. of protein mutns mentioned in clinvar, and total no. of nt mutns mentioned in clinvar;  
#use foll. two commands OR the two below them;
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' brca_pr_mut_clinv_count.txt | wc -l
364
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' brca_nt_mut_clinv_count.txt | wc -l
375   

awk -F"\t" '{nclinmutns += $1}END {print nclinmutns}' brca_pr_n_clinmutns.txt
364
awk -F"\t" '{nclinmutns += $1}END {print nclinmutns}' brca_nt_n_clinmutns.txt
375

#Foll cmd gives total no. of mutations for each gene;
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/brca/brca_drivers.txt | gawk -F"\t" '{IFS=OFS="\t"}{a[$1]++} END {for (i in a) print a[i], i}' > brca_totalmutns_per_gene.txt

#used the above file to create the foll seven cmd files; 
#the basic cmd in the cmd files is:
#echo -n -e "HLA-C\t\c" ; grep -w "HLA-C" brca_totalmutns_per_gene.txt ; echo -n -e ""

awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" brca_totalmutns_per_gene.txt ; echo -n -e \"\\n\""}' brca_totalmutns_per_gene.txt > brca_cmdlite_totalmutns_pergene.sh

awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" brca_pr_n_clinmutns.txt ; echo -n -e \"\\n\""}' brca_totalmutns_per_gene.txt > brca_cmdlite_pr_clin.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" brca_pr_n_repeatmutns.txt ; echo -n -e \"\\n\""}' brca_totalmutns_per_gene.txt > brca_cmdlite_pr_rep.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" brca_pr_n_uniqmutns.txt ; echo -n -e \"\\n\""}' brca_totalmutns_per_gene.txt > brca_cmdlite_pr_uniq.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" brca_nt_n_clinmutns.txt ; echo -n -e \"\\n\""}' brca_totalmutns_per_gene.txt > brca_cmdlite_nt_clin.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" brca_nt_n_repeatmutns.txt ; echo -n -e \"\\n\""}' brca_totalmutns_per_gene.txt > brca_cmdlite_nt_rep.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" brca_nt_n_uniqmutns.txt ; echo -n -e \"\\n\""}' brca_totalmutns_per_gene.txt > brca_cmdlite_nt_uniq.sh

sh brca_cmdlite_totalmutns_pergene.sh | grep -v ^$ > brca_countoftotalmutns.txt

sh brca_cmdlite_pr_clin.sh | grep -v ^$ > brca_pr_countofclinmutns.txt
sh brca_cmdlite_pr_rep.sh | grep -v ^$ > brca_pr_countofrepmutns.txt
sh brca_cmdlite_pr_uniq.sh | grep -v ^$ > brca_pr_countofuniqmutns.txt
sh brca_cmdlite_nt_clin.sh | grep -v ^$ > brca_nt_countofclinmutns.txt
sh brca_cmdlite_nt_rep.sh | grep -v ^$ > brca_nt_countofrepmutns.txt
sh brca_cmdlite_nt_uniq.sh | grep -v ^$ > brca_nt_countofuniqmutns.txt

#for protein mutns;
#Total no. of unique mutns in 266 genes = 1846
#Total no. of repeating mutns in 266 genes = 168
#Total no. of mutns mentioned in clinvar in 266 genes = 364

#for nt mutns;
#Total no. of unique mutns in 266 genes = 1867
#Total no. of repeating mutns in 266 genes = 160
#Total no. of mutns mentioned in clinvar in 266 genes = 375

#Downloaded the 6 files created above and listed below, to windows area:
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\BRCA
#brca_countoftotalmutns.txt    
#brca_pr_countofuniqmutns.txt  brca_pr_countofclinmutns.txt
#brca_pr_countofrepmutns.txt  brca_nt_countofuniqmutns.txt  
#brca_nt_countofclinmutns.txt  brca_nt_countofrepmutns.txt   

#imported the above files to excel; 
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx
#sheet = brca_counting_dri_genes


#Working with tcga-cbio and omim mutations;

#Reactome pway informn is available for 862 oncokb + 324 blair_mel = 1186 genes; 
#plan to work with cbio and omim mutations of only these genes; 
#the list of 1186 genes is in the file:
#/scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/lst_1186_oncokb_blair_mel_genes.txt ;

#omim diseases for ALL oncokb genes (1066) are in the file: 
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/genes_oncokb_order_omim_diseases.txt

#omim diseases for blair-mel-genes-not-in-oncokb are in file:
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/blair_mel_genes_not_in_oncokb_to_omim/omim_diseases_for_b_m_g_not_in_oncokb.txt

#these files are also in the excel table:
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx
#sheet = oncokb_b_m_g_omim_assocn

#the above 2 files have to be trimmed to include only those genes that are in the
#1186 set; 

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists

####################DO NOT EXECUTE foll cmds; they have already been done above, for coadread;
cp /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/lst_1186_oncokb_blair_mel_genes.txt \
lst_1186_o862_bm324.txt

cp /scratch/prasannalab/cancers_in_detail/oncokb_to_omim/genes_oncokb_order_omim_diseases.txt \
all_oncokb_omim_diseases.txt
cp /scratch/prasannalab/cancers_in_detail/oncokb_to_omim/blair_mel_genes_not_in_oncokb_to_omim/omim_diseases_for_b_m_g_not_in_oncokb.txt \
all_bmg_not_in_oncokb_omim_diseases.txt

cp lst_1186_o862_bm324.txt prep_only1186_omim_diseases.sh

vi prep_only1186_omim_diseases.sh
#:1,$s/^/awk -F"\\t" '(\$1 \~ \/\^/
#:1,$s/$/\$\/)'/
#:1,862s/$/ all_oncokb_omim_diseases.txt/
#:863,$s/$/ all_bmg_not_in_oncokb_omim_diseases.txt/
#:wq

#in the all_oncokb_omim_diseases.txt: 
#H1_2 is H1-2, H3_3A is H3-3A, HLA_A is HLA-A, H1_3 is H1-3, H1_4 is H1-4, H3_4 is H3-4, 
#HLA_B is HLA-B, H1_5 is H1-5, HLA_C is HLA-C
#manually edited prep_only1186_omim_diseases.sh to change H1_2 to H1-2, H3_3A to H3-3a, etc..
vi prep_only1186_omim_diseases.sh
#:1,$s/H1_2/H1-2/
#:1,$s/H3_3A/H3-3A/
#:1,$s/HLA_A/HLA-A/
#:1,$s/H1_3/H1-3/
#:1,$s/H1_4/H1-4/
#:1,$s/H3_4/H3-4/
#:1,$s/HLA_B/HLA-B/
#:1,$s/H1_5/H1-5/
#:1,$s/HLA_C/HLA-C/
#:wq

#for an explanation of foll vi, see below ("####explanation for "vi prep_only1186_omim_diseases.sh");
#note: prep_only1186_omim_diseases.sh now has 1183 lines;
vi prep_only1186_omim_diseases.sh
#deleted one of 2 CDKN2A lines
#deleted one of 2 CUX1 lines
#deleted one of 2 GNAS lines

sh prep_only1186_omim_diseases.sh > only1186_omim_diseases.txt

wc -l all_*
# 799 all_bmg_not_in_oncokb_omim_diseases.txt
#1690 all_oncokb_omim_diseases.txt
#2489 total

wc -l only1186_omim_diseases.txt
#2127 only1186_omim_diseases.txt  #2489 - 2127 = 362 lines have been left out when only
                                  #1186 genes are considered;

#foll cmd indicates that 392 out of 1186 genes are not associated with any disease in omim;  
awk -F"\t" '(NF < 4)' only1186_omim_diseases.txt | wc -l
#392  #392 genes are not associated with an omim disease; or 1186-392=794 genes are associated
      #with an omim disease; no gene name will be available from omim for the 392 genes;

#the file, only1186_omim_diseases.txt, lists the 1186 genes for which pway informn is available
#and, for each gene, indicates the omim disease(s), if any, the gene is associated with; 
#downloaded the foll file: 
#/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/only1186_omim_diseases.txt
#to windows area: d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files ;
#opened it in xl file: 
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\oncokb_complexdisease_md_assocns_new1186.xlsx
#sheet = oncokb_b_m_g_omim_assocn


####explanation for "vi prep_only1186_omim_diseases.sh"
awk -F"\t" '{print NF}' only1186_omim_diseases.txt | sort | uniq -c
#  392 2  # there are 392 2-field lines
# 1735 4  # there are 1735 4 field lines
awk -F"\t" '(NF == 2)' only1186_omim_diseases.txt | sort | uniq -c | sort -k1,1gr | more
#wc -l = 392 ; 
awk -F"\t" '(NF == 4){print $1}' only1186_omim_diseases.txt | sort | uniq | wc -l
#791  #this should have been 794, because 794+392=1186;
#foll cmd showed that there are 2 occurrences each of CDKN2A, CUX1, GNAS; 
sort lst_1186_o862_bm324.txt | uniq -c | sort -k1,1rg | more
# 2 CDKN2A
# 2 CUX1
# 2 GNAS

#An examination of foll file:
#/scratch/prasannalab/cancers_in_detail/pway_anal/1066oncokbpways/final_1066_reactome_uniprot_ids.txt
#showed that each of these genes - CDKN2A, CUX1, GNAS - has 2 uniprot ids; 
#in the grand genes vs reactions matrix, too, each of these genes appears twice; both GNAS entries
#behave similarly in the matrix, but the 2 CDKN2A and 2 CUX1 entries behave differently; 
#thus, went back above, edited prep_only1186_omim_diseases.sh, to retain only 1 CDKN2A, 1 CUX1, 1 GNAS; 
#then re-ran the prep file and regenerated only1186_omim_diseases.txt;
#this is because omim does not see uniprot id differences, and omim informn for each of these 3 genes 
#will needlessly appear twice in the only1186_omim_diseases.txt file and xl table; 
####ends here;


#using only1186_omim_diseases.txt to create 2 lists of genes that are associated with omim diseases; 
#one list contains oncokb genes that are associated with omim diseases; the other list contains 
#blair_mel genes that are associated with omim diseases; the oncokb list will be used to extract 
#cbio-tcga driver mutations for coadread (or any other cancer) from the driver mutations file; 
#the blair_mel list will be used to go back to cbio to see if the genes are mutated in cancers;  

vi only1186_omim_diseases.txt
#lines 1 to 1446 = oncokb genes;
#lines 1447 to 2127 = blair_mel genes; 

awk -F"\t" '((NR >= 1) && (NR <= 1446) && (NF == 4)){print $1}' only1186_omim_diseases.txt | sort | uniq \
> 485_ogenes_with_omimdiseases.txt
#wc -l = 485   oncokb genes with omim diseases
awk -F"\t" '((NR >= 1447) && (NR <= 2127) && (NF == 4)){print $1}' only1186_omim_diseases.txt | sort | uniq \
> 306_bmgenes_with_omimdiseases.txt 
#wc -l = 306   blair_mel genes with omim diseases
####################DO NOT EXECUTE ends here;

#there are 485 oncokb genes which are associated with omim diseases; and there are 306 blair_mel genes 
#associated with omim diseases; eventually, the allelic variants for these 485 + 306 = 791 genes have 
#to be downloaded from omim; the omim av for 189 coadread genes (actually 187 genes, because there 
#were no av tables for 2 genes) have already been downloaded; av tables for the remaining genes, 
#i.e., 485 - 189 = 296 genes, have to be downloaded; av tables have also to be downloaded for the
#remaining 306 blair_mel genes;  
#out of 485 genes, identifying the remaining set of 296 genes whose omim av tables have to be downloaded; 
#a file tmplst1out.txt has been created above for coadread; this file lists the genes downloaded for coadread
#this file has also been copied as genes_downloaded_from_omim.txt (with notes added during download); 
#/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/tmplst1out.txt ;
#/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/genes_downloaded_from_omim.txt ;

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles
cp /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/tmplst1out.txt prep_remaining296_ogenes_with_omimdiseases.sh
vi prep_remaining296_ogenes_with_omimdiseases.sh
#:1,$s/^/-e "/
#:1,$s/$/" /
#:1s/^/grep -v /
#:1,$s/\n//
#:s/-e "/-e "\\b/g
#:s/" -e/\\b" -e/g
#:s/$/\/scratch\/prasannalab\/cancers_in_detail\/map_tcga_mutns_to_omim\/trimming_omim_disease_lists\/485_ogenes_with_omimdiseases.txt/
#:s/" \/scratch/\\b" \/scratch/
#:wq
sh prep_remaining296_ogenes_with_omimdiseases.sh > remaining296_ogenes_with_omimdiseases.txt
#wc -l remaining296_ogenes_with_omimdiseases.txt = 296
cp remaining296_ogenes_with_omimdiseases.txt downloadnotes_remaining296_ogenes_with_omimdiseases.txt

#used downloadnotes_remaining296_ogenes_with_omimdiseases.txt while downloading av files from omim; 
#some observations/notes are in the file;
#files were downloaded in windows; they were downloaded to windows area:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\all_omim_avfiles

#there are 26 genes with "no av table"; or, there are 296 - 26 = 270 genes with an av table; 
wc -l downloadnotes_remaining296_ogenes_with_omimdiseases.txt
#296 
grep "no av table" downloadnotes_remaining296_ogenes_with_omimdiseases.txt | wc -l
#26
grep -v "no av table" downloadnotes_remaining296_ogenes_with_omimdiseases.txt | wc -l
#270  (296 - 26 = 270)

#the 270 omim av files, downloaded to windows, were transferred to:
#/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles
#there were already 187 av files in the all_omim_avfiles directory (from the coadread round); 
#after transferring the above 270 files there are: 270 + 187 = 457 files;
l /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/*.tsv | wc -l
#457

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists ;  

#there are 485 oncokb genes which are associated with omim diseases; and there are 306 blair_mel genes 
#associated with omim diseases; eventually, the allelic variants for these 485 + 306 = 791 genes have 
#to be downloaded from omim; av have been downloaded from omim for the 485 oncokb genes (there are only 
#457 out of 485 av files because, for the remaining genes, omim does not provide an av table); 

#to identify the subset of genes with driver mutations in brca; decided to cp and re-use coadread 
#prep file, rather than create a new prep file for brca; 
cp prep_coadread_485onco_diseasegene_dri.sh prep_brca_485onco_diseasegene_dri.sh
vi prep_brca_485onco_diseasegene_dri.sh
#:1,$s/coadread/brca/g
#:wq
sh prep_brca_485onco_diseasegene_dri.sh > brca_drivers_for_ogenes_with_omimdiseases.txt
#i.e., even though there are only 457 av files for the set of 485 oncokb genes associated with omim 
#diseases, the above prep file extracts brca drivers using all 485 genes; 

#note: no av table is available for foll 28 genes;
grep "no av" /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/downloadnotes_remaining296_ogenes_with_omimdiseases.txt /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/genes_downloaded_from_omim.txt
#wc -l = 28 
#FOXO1  ; PGR  ; ACSL6  ; ASPSCR1 ; ATIC ; BCL2 ; BCR ; CBFB ; CEP43 ; CRTC1 ; DEK ; 
#LMO2 ; LYL1 ; MAML2 ; MIB1 ; MYB ; NR4A3 ; NRG1 ; NUMA1 ; PICALM ; PML ; PRCC ; RANBP2 ; 
#SF3B1 ; SH3GL1 ; TAF15 ; TAL1 ; TEC ; 

#foll cmd gives list of genes in above file; i.e., brca genes associated with omim diseases; 
awk -F"\t" '{print $1}' brca_drivers_for_ogenes_with_omimdiseases.txt | sort | uniq > brca_tmplst1.sh
#wc -l brca_tmplst1.sh = 178  there are 178 oncokb genes in brca that are associated with omim diseases;
#turning brca_tmplst1.sh to a cmd file;
vi brca_tmplst1.sh
:1,$s/^/grep "\\b/
:1,$s/$/\\b" 485_ogenes_with_omimdiseases.txt/
:wq
sh brca_tmplst1.sh > brca_tmplst1out.txt
#wc -l brca_tmplst1out.txt = 178
#brca_tmplst1out.txt lists the 178 brca genes whose allelic variants files omim would be needed; 
#note: the 28 genes for which no av file is available ARE INCLUDED in this file; 

vi /scratch/prasannalab/cancers_in_detail/brca/brca_drivers.txt
#/\t

#Useful cols;
#$1 = gene name; $6 = Protein Change; $7 = Annotation; $8 = Functional Impact; $9 = Mutation Type; 
#$10 = Variant Type; $11 = Copy #; $16 = Chromosome; $17 = Start Pos; 
#$18 = End Pos; $19 = Ref; $20 = Var; $22 = HGVSc; $32 = ClinVar; $33 = dbSNP; 

#ENST informn is important; it is in the HGVSc col, or $22;

#awk -F"\t" '{IFS=OFS="\t"} {print $1,$6,$7,$8,$9,$10,$11,$16,$17,$18,$19,$20,$22,$32,$33}' brca_drivers_for_ogenes_with_omimdiseases.txt | cut -f1,1 | uniq
#wc -l = 178

#awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6,$16,$17,$18,$19,$20,$9,$10,$11,$32,$33,$7,$8}' brca_drivers_for_ogenes_with_omimdiseases.txt 
#wc -l = 2119

awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' brca_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq -c 
#wc -l = 1517
#wc -l brca_drivers_for_ogenes_with_omimdiseases.txt = 2119 ; thus, sort and uniq reduces 
#the number of mutns; 

awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' brca_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > brca_uniq_drivers_for_ogenes_with_omdis.txt 
#there are 1517 unique mutations in 178 brca driver genes; the 178 genes are
#associated with omim diseases, and are listed in brca_tmplst1out.txt; 

#ClinVar
#$1 = AlleleID; $3 = name of variant with this AlleleID; $10 = RS# (dbSNP); $12 = RCVaccession
#$17 = Assembly
awk -F"\t" '{print $1, $3, $7, $10, $12, $17}' variant_summary.txt | more

#$2 below contains the important ENST informn; the informn comes from the HGVSc col, or $22, in: 
#brca_drivers_for_ogenes_with_omimdiseases.txt
awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' brca_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#234   i.e., there are 234 mutations without ENST Id; e.g.s listed below; the mutations are all 
#fusions and do not have an ENST Id in the tsv file downloaded from cbio; for these, $2 or ENST col 
#is empty; 
TP53            ILF3-TP53
TP53            KIAA0753-TP53
TSC1            EHMT1-TSC1
TSC2            TSC2-TMEM204
TYK2            CDC37-TYK2
XIAP            STAG2-XIAP
YAP1            RBM10-YAP1


awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' brca_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#234    quite a large number of fusions;
awk -F"\t" '{IFS=OFS="\t"} ($2 ~ /:/){print}' brca_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#1283
wc -l brca_uniq_drivers_for_ogenes_with_omdis.txt
#1517    1283 + 234 = 1517

#Preparing input file for perl program; 
#getting the set of 1517 unique mutns, and removing fusions from the list; 
awk -F"\t" '{IFS=OFS="\t"}{print $1,$22,$6,$32,$7}' brca_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > tmp1.txt
#wc -l tmp1.txt = 1528 ;
awk -F"\t" '{IFS=OFS="\t"}($2 ~ /:/){print}' tmp1.txt > tmp2.txt
#wc -l tmp2.txt = 1293 ;
#edited tmp2.txt to replace ; with \t, to retain only oncoKB assessment;
vi tmp2.txt  
#:1,$s/;/\t/
#:wq
awk -F"\t" '{IFS=OFS="\t"}{print $1,$2,$3,$4,$5}' tmp2.txt > tmp3.txt
#wc -l tmp3.txt = 1293 ;
#a header line is required; took the line from foll file;
#/scratch/prasannalab/luad_drivr_mutns/infil_mutns808_assessmt_cv_oncokb.txt
#the header line is the foll:
#Gene    HGVSc   Protein Change  ClinVar Annotation
awk -F"\t" '(NR==1)' /scratch/prasannalab/luad_drivr_mutns/infil_mutns808_assessmt_cv_oncokb.txt > tmp4.txt
cat tmp4.txt tmp3.txt > infil_brca_mutns_cv_oncokbannotn.txt
rm tmp1.txt tmp2.txt tmp3.txt tmp4.txt

############## DO NOT EXECUTE;
#for a smaller input file to program, extracting only heading and
#GRCh37 entries in variant_summary.txt
awk -F"\t" '{IFS=OFS="\t"}(NR==1)||($17 ~ /^GRCh37$/) {print}' variant_summary.txt > variant_summary_GRCh37.txt
wc -l variant_summary_GRCh37.txt
#1545542  (1545541 GRCh37 entries + 1 header line)
lh variant*
611M Sep  9 variant_summary_GRCh37.txt
1.2G Sep  4 variant_summary.txt
############## DO NOT EXECUTE;

#Running perl program, srch_cbiomutns_in_clinvar.pl; took about 14 mins for the job to complete;
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists

nohup perl /scratch/prasannalab/luad_drivr_mutns/srch_cbiomutns_in_clinvar.pl infil_brca_mutns_cv_oncokbannotn.txt variant_summary_GRCh37.txt outfil_brca_cbio_clinvar.txt &

awk -F"\t" '{IFS=OFS="\t"}{print NF}' outfil_brca_cbio_clinvar.txt | sort | uniq -c
#   391 12 (for 391 - 1 header = 390 mutns, clinvar, dbsnp annotations obtained)
#   903 6  (for 903 mutns, clinvar and dbsnp annotations are not obtained; i.e., these mutns are obsvd only in cbio)

#header in outfil_brca_cbio_clinvar.txt
# 1     2      3               4       5            6         7     8     9           10                   11           12
#Gene  HGVSc  Protein Change  ClinVar Annotation  #AlleleID  Type  Name  GeneSymbol  ClinicalSignificance  RS# (dbSNP)  RCVaccession
#$1, $9, $2, $3, $8, $7, $11, $12, $6, $4, $10, $5;
awk -F"\t" '{IFS=OFS="\t"}{print $1, $9, $2, $3, $8, $7, $11, $12, $6, $4, $10, $5}' outfil_brca_cbio_clinvar.txt > cols_rearranged_cbio_clinvar_brca.txt

#my impression - clinvar and dbsnp store mutations which are observed in 1% of population
#cbio mutations are too small in number to be population based mutations; i.e., they 
#are disease causing mutations, that are rare and not observed in a population; 
#thus many mutations in cbio will not be found in dbsnp and clinvar;

########### DO NOT EXECUTE
#the file tmplst1out.txt, created above, lists the 189 coadread genes whose allelic variants 
#files need to be downloaded from omim; 
#wc -l tmplst1out.txt = 189
#created a sub-directory to contain all allelic variants files downloaded from omim; 

mkdir /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles

#In windows downloaded files to: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\all_omim_avfiles

cp /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/tmplst1out.txt \
/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/genes_downloaded_from_omim.txt

#used this file, genes_downloaded_from_omim.txt, while downloading files from omim; some observations/notes 
#may be in the file; 

#transferred 187 omim av files from windows to:
########## DO NOT EXECUTE

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles

#trial cmd;
awk -F"\t" '{IFS=OFS="\t"}(NR<9)||($0 ~ /^$/){print $0}(NR==9){print "Gene", $0}(NR>9)&&($0 !~ /^$/){print "APC", $0}' OMIM-Allelic-Variants-189980_ABL1.tsv

#creating small batch file to modify OMIM allelic variant (av) files;
#used ls1col cmd to create a list of genes whose omim av files have been downloaded;
ls1col *.tsv | sed -e 's/OMIM-Allelic-Variants-//' -e 's/[0-9]*_//' -e 's/.tsv//' > downloaded_av_genenames_o457.txt
#wc -l downloaded_av_genenames_o457.txt = 457
cp downloaded_av_genenames_o457.txt temp1.txt

#manually edited temp1.txt to incorporate lines such as below:
#awk -F"\t" '{IFS=OFS="\t"}(NR==9){print "Gene", $0}(NR>9)&&($0 !~ /^$/){print "BRCA1", $0}' OMIM_Allelic_Variants_113705_BRCA1.txt >> omim_all_av.txt
vi temp1.txt
:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}(NR==9){print "Gene", \$0}(NR>9)\&\&(\$0 \!\~ \/\^\$\/){print "/
:1,$s/$/", \$0}' /
:wq

#temp file containing omim av filenames;  
l | awk -F" " '{print $NF}' | grep "OMIM-Allelic-Variants-" > temp2.txt
#wc -l temp2.txt = 457

paste -d" " temp1.txt temp2.txt > modify_omim_av_files_onco457.sh

vi modify_omim_av_files_onco457.sh
:1,$s/  OMIM/ OMIM/
:1,$s/$/ >> omim_all_av_onco457.txt/
:wq

sh modify_omim_av_files_onco457.sh
#output file = omim_all_av_onco457.txt

grep -v "Gene" omim_all_av_onco457.txt | wc -l
#4589   total number of omim av in the set of 457 genes;

#checking if the total number of 4589 omim av obtained above is correct; using grep to search for the pattern 
#"Selected Example" in multiple files;
grep "Selected Example" OMIM*.tsv | awk -F"Variants " '{print $2}' | sed -e 's/(//' -e 's/ Selected Examples)//' -e 's/ Selected Example)//' | awk '{count += $1; print $1, count}'
#4589   this is the total obtained upon counting the numbers given in the "Selected Examples" or "Selected Example" lines; 
#       it matches the above total of 4589;

#removed header lines for individual genes, but retained one header line at the top; 
#i.e., 4589 av + 1 header line; 
awk -F"\t" '{IFS=OFS="\t"}(NR==1){print $0}(NR>1)&&($1 !~ /Gene/){print}' omim_all_av_onco457.txt > temp.txt
cp temp.txt omim_all_av_onco457.txt
rm temp.txt

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles
awk -F"\t" '{IFS=OFS="\t"}(NR>1)&&(NF==12){print $0}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/outfil_brca_cbio_clinvar.txt 
#wc -l = 390;  thus, for brca, there are 390 cbio mutns out of 1293 with rs and cv ids; 
awk -F"\t" '{IFS=OFS="\t"}(NF==12){print $0}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/outfil_brca_cbio_clinvar.txt > /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/brca_390cbio_mutns_with_rs_cv_ids.txt 


#the next step is to see which of the 390 brca cbio mutns are in 4589 omim set; 
#writing perl program: /scratch/prasannalab/luad_drivr_mutns/identifying_mutns_common_to_omim_and_clinv.pl ; 
#in the program, the foll. cols will have to be split;
#cbio: $12 = clinvar accession; multiple entries per line; $11, which gives rs ID, contains one entry per line, 
#but some entries maybe -1, meaning rs ID is missing; 
#omim: $5 = SNP; more than one entries per line can occur; some lines can be blank; $7 = clinvar ID; more than one
#entries can occur per line; some lines can be blank;

awk -F"\t" '{IFS=OFS="\t"}{print $11, $12}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/brca_390cbio_mutns_with_rs_cv_ids.txt | more
#RS# (dbSNP)     RCVaccession
#202160435       RCV000115131|RCV000204640|RCV000211955|RCV001174655|RCV001257472|RCV001354564
#-1      RCV001390349
#-1      RCV001525225|RCV001872074
#587782451       RCV000131523|RCV000458955|RCV000520477

awk -F"\t" '{IFS=OFS="\t"}{print $5, $7}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/omim_all_av_onco457.txt | more 
#SNP     ClinVar
#rs786205108     RCV000019397
#rs80051519      RCV000019399
#        RCV000019400
#rs786205110     RCV000019401
#        RCV000019402
#        RCV000019403
#rs1555760738    RCV000083256,RCV000083257
#rs72656324      RCV000018842
#rs72656332      RCV000018843
#        RCV000018844
#
#
#        RCV000018847
#rs72656352      RCV000018848


#running perl program, identifying_mutns_common_to_omim_and_clinv.pl
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists
perl /scratch/prasannalab/luad_drivr_mutns/identifying_mutns_common_to_omim_and_clinv.pl /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/brca_390cbio_mutns_with_rs_cv_ids.txt /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/omim_all_av_onco457.txt brca_cbio390_rs_mapped_to_omim.txt brca_cbio390_clinv_mapped_to_omim.txt
uniq brca_cbio390_clinv_mapped_to_omim.txt > brca_cbio390_clinv_mapped_to_omim_uniq.txt
#file to be used is brca_cbio390_clinv_mapped_to_omim_uniq.txt; this is for the foll reason:
#a mutn (e.g., AKT1 E17K) may occur once in the input file (brca_390cbio_mutns_with_rs_cv_ids.txt), 
#but may be associated with multiple RCV identifiers (24 identifiers for AKT1 E17K); hence in the output file 
#(brca_cbio390_clinv_mapped_to_omim.txt) the mutn (AKT1 E17K) is repeated as many times as there are RCV
#identifiers (24 times for AKT1 E17K); hence, to remove repeating mutn lines arising due to multiple RCV 
#identifiers, the uniq command has to be used;

wc -l brca_390cbio_mutns_with_rs_cv_ids.txt brca_cbio390_rs_mapped_to_omim.txt brca_cbio390_clinv_mapped_to_omim.txt brca_cbio390_clinv_mapped_to_omim_uniq.txt
#   391 (391 - 1 header = 390) brca_390cbio_mutns_with_rs_cv_ids.txt         (input file)
#    87 (87 - 1 header = 86) brca_cbio390_rs_mapped_to_omim.txt            (output file)
#  1090 (1090 - 1 header = 1089) brca_cbio390_clinv_mapped_to_omim.txt         (output file)
#   171 (171 - 1 header = 170) brca_cbio390_clinv_mapped_to_omim_uniq.txt    (output file)


#did another sort and uniq -c on output file, brca_cbio390_clinv_mapped_to_omim_uniq.txt ;  
#this was done to club together identical mutations that might have been missed by above uniq cmd;
sort brca_cbio390_clinv_mapped_to_omim_uniq.txt | uniq -c > brca_cbio390_clinv_mapped_to_omim_sortuniqc.txt 
#wc -l brca_cbio390_clinv_mapped_to_omim_sortuniqc.txt = 59 (59-1 header = 58)
#thus 171 from the *_uniq.txt file has reduced to 58 in the *_sortuniqc.txt file;

#edited the file to bring header line to top of file, and to remove the count for header line;
vi brca_cbio390_clinv_mapped_to_omim_sortuniqc.txt
#this file gives count of number of times each unique mutation repeats; 

awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11}' brca_cbio390_rs_mapped_to_omim.txt | more
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12}' brca_cbio390_rs_mapped_to_omim.txt | more
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11}' brca_cbio390_clinv_mapped_to_omim_sortuniqc.txt | more
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $6, $13}' brca_cbio390_clinv_mapped_to_omim_sortuniqc.txt | more
awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $13}' brca_cbio390_clinv_mapped_to_omim_sortuniqc.txt | more
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $4, $3, $11}' brca_cbio390_clinv_mapped_to_omim_sortuniqc.txt | more
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $4, $3, $11}' brca_cbio390_rs_mapped_to_omim.txt | more
#below 2 useful;
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13}' brca_cbio390_clinv_mapped_to_omim_sortuniqc.txt | more 
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13}' brca_cbio390_rs_mapped_to_omim.txt | more 

#the note below is more or less the same as was written in the pilot stage;
#the perl program, identifying_mutns_common_to_omim_and_clinv.pl, compares cbio and omim rs ids separately,
#and compares cbio and omim clinv ids SEPARATELY; as a result: (i) in the cbio and omim rs_id_compared output 
#file, only cbio and omim mutns with matching rs_ids are listed; also, for the listed mutations, while rs_ids 
#match, the cv_ids may not match:
#e.g.(1) in luad, for CTNNB1, rs12193403, for SER37CYS clinv_ids match, but for SER37PHE, 
#clinv_ids do not match; this is because rs12193403 includes alleles: C>A / C>G / C>T; hence, comparing
#only rs_ids, but not clinv_ids, can be ambiguous; 
#e.g.(2) in coadread, in mutn below, rsids match, but clinv ids do not match; 
#APC     S1465Wfs*3      APC, 4-BP DEL, CODON 1464       387906234       rs387906234     RCV000000849|RCV000000850|RCV000202100|RCV000210178|RCV000502554|RCV001022414|RCV002227972   RCV000000851,RCV000500484,RCV000565829,RCV002227973 ;
#(ii) in the cbio and omim clinv_id compared output file,
#mutations with matching clinv_ids are listed; for the listed, clinv_id matched mutations, the rs_id may 
#or may not (thankfully) be listed for the cbio mutation; but the rs_id is given for the omim mutn; thus 
#in the clinv_id matched output file, selecting mutations which have both cbio and omim clinv_id entries, 
#and which have both cbio and omim rs_id entries, will identify mutations that one may work with; i.e., 
#somatic mutations occurring in cbio, and germline mutations occurring in omim would have been identified;
#the next step would be to ensure that the set of mutations are unique, not repeating; 

###NOTE: MANUALLY CHECK the brca_cbio390_clinv_mapped_to_omim_sortuniqc.txt file to see if the 
###rsids from cbio and omim match; commands below help; 
###in clinv_mapped_to_omim file, (i) cbio or omim rs_id may not be given for a mutn, but RCV_ids are similar; 
###however, in other occurrences of the SAME mutn, both rs_ids are similar; such mutns should be accepted even 
###though an rsid is missing; in coadread KRAS, for both G12D and G12V, both rs_ids are sometimes reported and 
###sometimes not; but it is clear that there is no reason to leave out mutations in which an rs_id is missing;
###(ii) clinv and omim RCV_ids match, but cbio rs_id and omim rs_ids do not match; such mutations have to
###be left out; in PIK3CA E545A AND 2-BP DEL/1-BP INS the 2 rsids do not match (121913274, 587777795); this 
###mutn cannot be considered; in another occurrence of PIK3CA E545A the 2 rsids match (121913274, 121913274)
###(iii) in a PIK3CA R115P mutn, one rsid is "-1" and the other is not given; this mutn has to be left out;

#awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13}' brca_cbio390_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($4 != $5)' 
#awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13}' brca_cbio390_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($4 == $5)'
#awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13}' brca_cbio390_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($4 != $5)&&($5 !~ /^$/)'
#awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13}' brca_cbio390_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)' 

#or 

awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' brca_cbio390_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 != $6)' 
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' brca_cbio390_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 == $6)' | grep "MEN1"
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' brca_cbio390_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 == $6)' | grep "ENST00000263967.3:c.1634A>C"

###to avoid using sed to replace "rs", use foll cmds; 
###creating final file of unique mutations which includes: (i) mutns with cbio and omim rsids and clinvids matched; 
###(ii) INCLUDING mutns which may have one rsid missing, but upon inspection it was found that the mutns may be included;

###use foll cmds if you want an output for an xl table with MORE INFORMN (phenotype, HGVSc, Name cols included); 
###NOTE: below, I am using the brca_cbio390_clinv_mapped_to_omim_uniq.txt file, NOT *_sortuniqc.txt file; this 
###is to get a proper count of uniq mutations; using *_sortuniqc.txt file below to get the final file gave some 
###duplicate mutations; hence, decided to use the *_uniq.txt file below to get the final file;
###however, using the *_sortuniqc.txt file ABOVE is helpful because the lists to examine are shorter;  
###the foll cmds may have to be customised in different cancers to include mutns you think should be included;

awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' brca_cbio390_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 ~ /Gene/){print}($1 !~ /Gene/)&&($5 ~ $4)' > junk
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' brca_cbio390_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)&&($5 ~ /^$/)' >> junk
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' brca_cbio390_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)' | grep "ENST00000263967.3:c.1634A>C" >> junk
sort junk | uniq -c > junk2
#edit file junk2 to move header line to top; remove count for header line; add a col heading called "n(mutns)\t"
vi junk2
sed -e 's/^[ ]*//' -e '2,$s/ /\t/' junk2 > brca_cbio_omim_matched_mutns.txt
#wc -l brca_cbio_omim_matched_mutns.txt = 51 (50 uniq mutns + 1 header line = 51)

#Have to introduce the correct counts for each mutation in brca_cbio_omim_matched_mutns.txt from
#brca_drivers_for_ogenes_with_omimdiseases.txt or /scratch/prasannalab/cancers_in_detail/brca/brca_drivers.txt ; 
#have to turn brca_cbio_omim_matched_mutns.txt into a batch file which searches for each mutn in the
#above 2 driver files;
#have to create a batch file with cmds of the foll kind; 
#awk -F"\t" '{IFS=OFS="\t"}($1 ~ /^BAP1$/) && ($6 ~ /^Q267\*$/) && ($22 ~ /^ENST00000460680.1:c.799C>T$/)' brca_drivers_for_ogenes_with_omimdiseases.txt
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $2, $3, $10}' brca_cbio_omim_matched_mutns.txt | uniq > prep_brca_noccs_cbio_omim_matched_mutns.sh 
vi prep_brca_noccs_cbio_omim_matched_mutns.sh
#:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}(\$1 \~ \/\^/
#:1,$s/\t/    /
#:1,$s/    /\$\/) \&\& (\$6 \~ \/^/
#:1,$s/\t/    /
#:1,$s/    /\$\/) \&\& (\$22 \~ \/\^/
#:1,$s/$/\$\/)' brca_drivers_for_ogenes_with_omimdiseases.txt/
#:1,$s/\*/\\*/
#:wq
cp prep_brca_noccs_cbio_omim_matched_mutns.sh tst1.sh
vi tst1.sh
#:1,$s/brca_drivers_for_ogenes_with_omimdiseases.txt/\/scratch\/prasannalab\/cancers_in_detail\/brca\/brca_drivers.txt/
#:wq
sh tst1.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | more
#the output from tst1.sh should be same as output from cmd below: 
sh prep_brca_noccs_cbio_omim_matched_mutns.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | more

#if outputs are same, use cmds below to get final file;
echo "" > scratch.txt
sh prep_brca_noccs_cbio_omim_matched_mutns.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | sed -e 's/^[ ]*//' -e '1,$s/ /\t/' >> scratch.txt
#Use foll cmd to MANUALLY MAKE DUPLICATE LINES in scratch.txt of those mutations which occur multiple 
#times in brca_cbio_omim_matched_mutns.txt; to identify the duplicate mutations in 
#brca_cbio_omim_matched_mutns.txt, use foll cmd: (e.g., in coadread, APC R302*, BRAF L597V,...) 
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $2, $3, $10}' brca_cbio_omim_matched_mutns.txt | uniq -c | more 
vi scratch.txt
#use paste cmd below to make sure the same gene and mutn lines are being pasted;
paste -d"\t" scratch.txt brca_cbio_omim_matched_mutns.txt | more
paste -d"\t" scratch.txt brca_cbio_omim_matched_mutns.txt | awk -F"\t" '{IFS=OFS="\t"}{print $1,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}' > brca_noccs_cbio_omim_matched_mutns.txt

###taking foll file unix file to xl: 
#/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/brca_noccs_cbio_omim_matched_mutns.txt
#downloaded to windows area: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\brca\brca_noccs_cbio_omim_matched_mutns.txt
#xl file = D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx
#sheet = brca_cbio_omim_mutns ;

-------------------------------------------------------------------

#KIRC

#Comparing tcga mutations collected for kirc, for oncokb genes, with the mutations catalogued 
#for the genes in OMIM; the brca set of lines above have been copied below, and have been 
#appropriately modified;

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim

#Driver genes and mutations for kirc, obtained from cbioportal, are in the foll file; 
/scratch/prasannalab/cancers_in_detail/kirc/kirc_drivers.txt

grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/kirc/kirc_drivers.txt | wc -l
#607 drivers

#https://askubuntu.com/questions/592273/count-the-number-of-unique-values-based-on-two-columns-in-a-spreadsheet
#Below, $1 = Gene name; $6 = "Protein Change"; i in a = loop through gene names; 
#j in a[i] = loop through "Protein Change" col associated with each gene name; 
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/kirc/kirc_drivers.txt | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$6]++} END {for (i in a) for (j in a[i]) print a[i][j], i, j}' | more
#wc -l = 547

#Below, $32 = "ClinVar"; $6 = "Protein Change";  
#$32 is replaced by an integer: if mutn is documented in clinvar, $32 = 1; if no mention of mutn in clinvar, $32 = 0;
#grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/kirc/kirc_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int, $32}' | more
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/kirc/kirc_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int}' | more
#wc -l = 607 lines

#foll. command seems to work; using a 3-d array (instead of the 2-d array in the gawk command above);
#$1=gene; $6="Protein Change"; $32=clinvar_as_int (which is 1 if mutn is mentioned in clinvar, 0 if it is not);
#all three can be counted together because, if a mutn repeats, the clinvar status will also repeat;
#Note: wc -l for cmd below (549) does not match wc -l for the cmd above (547);
#this is because a protein mutn can occur in several ways, and each mutn can have a different clinvar status; e.g., 
#1       PIK3CA  M1043I  0  c.3129G>C
#2       PIK3CA  M1043I  1  c.3129G>A  Pathogenic/Likely_pathogenic
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/kirc/kirc_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int}' | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$2][$3]++} END {for (i in a) for (j in a[i]) for (k in a[i][j]) print a[i][j][k], i, j, k}' > kirc_pr_mut_clinv_count.txt
#wc -l = 549

#Latest and most accurate version of command; here, the definition of mutation has been expanded to include
#$6 (protein change), $16 (chromosome), $17 (start pos), $18 (end pos), $19 (ref), $20 (var) in 
#/scratch/prasannalab/cancers_in_detail/kirc/kirc_drivers.txt; thus, mutn definition is more 
#complete and accurate, and hence the mutn counts are more accurate; above, only $2 (protein change) 
#was used to define mutn
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/kirc/kirc_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6 "_" $16 "_" $17 "_" $18 "_" $19 "_" $20, clinvar_as_int}' | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$2][$3]++} END {for (i in a) for (j in a[i]) for (k in a[i][j]) print a[i][j][k], i, j, k}' > kirc_nt_mut_clinv_count.txt
#wc -l kirc_nt_mut_clinv_count.txt = 571

#Both files may have their uses; two mutns may be different at nucleotide level, but may be the same
#at protein level;

wc -l kirc_pr_mut_clinv_count.txt kirc_nt_mut_clinv_count.txt
  549 kirc_pr_mut_clinv_count.txt
  571 kirc_nt_mut_clinv_count.txt
#thus, by improving mutn definition, the number of lines in file has increased (from 549 to 571);
#i.e., more unique mutations, and fewer repeating mutations;

#counting no. of unique mutns (protein level and nt level mutns) in each gene
awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count){print count[var], var}}' kirc_nt_mut_clinv_count.txt > kirc_nt_n_uniqmutns.txt
wc -l kirc_nt_n_uniqmutns.txt
102     #checking if things are ok, by counting no. of genes;

awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count){print count[var], var}}' kirc_pr_mut_clinv_count.txt > kirc_pr_n_uniqmutns.txt
wc -l kirc_pr_n_uniqmutns.txt
102     #checking if things are ok, by counting no. of genes;

#counting no. of repeating mutns in each gene;
awk -F"\t" '{IFS=OFS="\t"} ($1>1){print $0}' kirc_nt_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count) print count[var], var}' > kirc_nt_n_repeatmutns.txt
wc -l kirc_nt_n_repeatmutns.txt
4

awk -F"\t" '{IFS=OFS="\t"} ($1>1){print $0}' kirc_pr_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count) print count[var], var}' > kirc_pr_n_repeatmutns.txt  
wc -l kirc_pr_n_repeatmutns.txt
6

#counting no. of protein mutns, and nt mutns mentioned in clinvar in each gene;
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' kirc_pr_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {print $2, $3, $4}' | awk -F"\t" '{IFS=OFS="\t"} {count[$1]++} END {for (var in count) print count[var], var}' > kirc_pr_n_clinmutns.txt
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' kirc_nt_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {print $2, $3, $4}' | awk -F"\t" '{IFS=OFS="\t"} {count[$1]++} END {for (var in count) print count[var], var}' > kirc_nt_n_clinmutns.txt

#Total no. of genes = 102;

#counting total no. of unique protein mutns, and total no. of unique nt mutns;  
awk -F"\t" '{nuniqmutns += $1}END {print nuniqmutns}' kirc_pr_n_uniqmutns.txt
549     #this is equal to no. of lines in file kirc_pr_mut_clinv_count.txt 
awk -F"\t" '{nuniqmutns += $1}END {print nuniqmutns}' kirc_nt_n_uniqmutns.txt
571     #this is equal to no. of lines in file kirc_nt_mut_clinv_count.txt 

#counting total no. of repeating protein mutns, and total no. of repeating nt mutns;  
awk -F"\t" '{nrepmutns += $1}END {print nrepmutns}' kirc_pr_n_repeatmutns.txt
40
awk -F"\t" '{nrepmutns += $1}END {print nrepmutns}' kirc_nt_n_repeatmutns.txt
31

#Thus, above, the 6 files listed below have been created; 
#kirc_pr_n_uniqmutns.txt; kirc_pr_n_repeatmutns.txt; kirc_pr_n_clinmutns.txt
#kirc_nt_n_uniqmutns.txt; kirc_nt_n_repeatmutns.txt; kirc_nt_n_clinmutns.txt

#counting total no. of protein mutns mentioned in clinvar, and total no. of nt mutns mentioned in clinvar;  
#use foll. two commands OR the two below them;
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' kirc_pr_mut_clinv_count.txt | wc -l
83
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' kirc_nt_mut_clinv_count.txt | wc -l
89   

awk -F"\t" '{nclinmutns += $1}END {print nclinmutns}' kirc_pr_n_clinmutns.txt
83
awk -F"\t" '{nclinmutns += $1}END {print nclinmutns}' kirc_nt_n_clinmutns.txt
89 

#Foll cmd gives total no. of mutations for each gene;
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/kirc/kirc_drivers.txt | gawk -F"\t" '{IFS=OFS="\t"}{a[$1]++} END {for (i in a) print a[i], i}' > kirc_totalmutns_per_gene.txt

#used the above file to create the foll seven cmd files; 
#the basic cmd in the cmd files is:
#echo -n -e "HLA-C\t\c" ; grep -w "HLA-C" kirc_totalmutns_per_gene.txt ; echo -n -e ""

awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" kirc_totalmutns_per_gene.txt ; echo -n -e \"\\n\""}' kirc_totalmutns_per_gene.txt > kirc_cmdlite_totalmutns_pergene.sh

awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" kirc_pr_n_clinmutns.txt ; echo -n -e \"\\n\""}' kirc_totalmutns_per_gene.txt > kirc_cmdlite_pr_clin.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" kirc_pr_n_repeatmutns.txt ; echo -n -e \"\\n\""}' kirc_totalmutns_per_gene.txt > kirc_cmdlite_pr_rep.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" kirc_pr_n_uniqmutns.txt ; echo -n -e \"\\n\""}' kirc_totalmutns_per_gene.txt > kirc_cmdlite_pr_uniq.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" kirc_nt_n_clinmutns.txt ; echo -n -e \"\\n\""}' kirc_totalmutns_per_gene.txt > kirc_cmdlite_nt_clin.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" kirc_nt_n_repeatmutns.txt ; echo -n -e \"\\n\""}' kirc_totalmutns_per_gene.txt > kirc_cmdlite_nt_rep.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" kirc_nt_n_uniqmutns.txt ; echo -n -e \"\\n\""}' kirc_totalmutns_per_gene.txt > kirc_cmdlite_nt_uniq.sh

sh kirc_cmdlite_totalmutns_pergene.sh | grep -v ^$ > kirc_countoftotalmutns.txt

sh kirc_cmdlite_pr_clin.sh | grep -v ^$ > kirc_pr_countofclinmutns.txt
sh kirc_cmdlite_pr_rep.sh | grep -v ^$ > kirc_pr_countofrepmutns.txt
sh kirc_cmdlite_pr_uniq.sh | grep -v ^$ > kirc_pr_countofuniqmutns.txt
sh kirc_cmdlite_nt_clin.sh | grep -v ^$ > kirc_nt_countofclinmutns.txt
sh kirc_cmdlite_nt_rep.sh | grep -v ^$ > kirc_nt_countofrepmutns.txt
sh kirc_cmdlite_nt_uniq.sh | grep -v ^$ > kirc_nt_countofuniqmutns.txt

#for protein mutns;
#Total no. of unique mutns in 102 genes = 549
#Total no. of repeating mutns in 102 genes = 40
#Total no. of mutns mentioned in clinvar in 102 genes = 83

#for nt mutns;
#Total no. of unique mutns in 102 genes = 571
#Total no. of repeating mutns in 102 genes = 31
#Total no. of mutns mentioned in clinvar in 102 genes = 89

#Downloaded the 6 files created above and listed below, to windows area:
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\KIRC
#kirc_countoftotalmutns.txt    
#kirc_pr_countofuniqmutns.txt  kirc_pr_countofclinmutns.txt
#kirc_pr_countofrepmutns.txt  kirc_nt_countofuniqmutns.txt  
#kirc_nt_countofclinmutns.txt  kirc_nt_countofrepmutns.txt   

#imported the above files to excel; 
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx
#sheet = kirc_counting_dri_genes

#unix tip: in terminal how to erase typed command quickly:
#you can cancel current command with CTRL+c; you can clear command to the 
#beginning with CTRL+u; to clear line after the cursor press CTRL+k;
            
#Working with tcga-cbio and omim mutations;

#Reactome pway informn is available for 862 oncokb + 324 blair_mel = 1186 genes; 
#plan to work with cbio and omim mutations of only these genes; 
#the list of 1186 genes is in the file:
#/scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/lst_1186_oncokb_blair_mel_genes.txt ;

#omim diseases for ALL oncokb genes (1066) are in the file: 
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/genes_oncokb_order_omim_diseases.txt

#omim diseases for blair-mel-genes-not-in-oncokb are in file:
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/blair_mel_genes_not_in_oncokb_to_omim/omim_diseases_for_b_m_g_not_in_oncokb.txt

#these files are also in the excel table:
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx
#sheet = oncokb_b_m_g_omim_assocn

#the above 2 files have to be trimmed to include only those genes that are in the
#1186 set; 

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists

#av have been downloaded from omim for the 485 oncokb genes (there are only 457 out of 485 av 
#files because, for the remaining genes, omim does not provide an av table); av tables have also 
#to be downloaded for the remaining 306 blair_mel genes;  

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists ;  

#to identify the subset of genes with driver mutations in kirc; decided to cp and re-use brca 
#prep file, rather than create a new prep file for kirc;  
cp prep_brca_485onco_diseasegene_dri.sh prep_kirc_485onco_diseasegene_dri.sh
vi prep_kirc_485onco_diseasegene_dri.sh
#:1,$s/brca/kirc/g
#:wq
sh prep_kirc_485onco_diseasegene_dri.sh > kirc_drivers_for_ogenes_with_omimdiseases.txt
#i.e., even though there are only 457 av files for the set of 485 oncokb genes associated with omim 
#diseases, the above prep file extracts kirc drivers using all 485 genes; 

#note: no av table is available for foll 28 genes;
grep "no av" /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/downloadnotes_remaining296_ogenes_with_omimdiseases.txt /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/genes_downloaded_from_omim.txt
#wc -l = 28 
#FOXO1  ; PGR  ; ACSL6  ; ASPSCR1 ; ATIC ; BCL2 ; BCR ; CBFB ; CEP43 ; CRTC1 ; DEK ; 
#LMO2 ; LYL1 ; MAML2 ; MIB1 ; MYB ; NR4A3 ; NRG1 ; NUMA1 ; PICALM ; PML ; PRCC ; RANBP2 ; 
#SF3B1 ; SH3GL1 ; TAF15 ; TAL1 ; TEC ; 

#foll cmd gives list of genes in above file; i.e., kirc genes associated with omim diseases; 
awk -F"\t" '{print $1}' kirc_drivers_for_ogenes_with_omimdiseases.txt | sort | uniq > kirc_tmplst1.sh
#wc -l kirc_tmplst1.sh = 78  there are 78 oncokb genes in kirc that are associated with omim diseases;
#turning kirc_tmplst1.sh to a cmd file;
vi kirc_tmplst1.sh
:1,$s/^/grep "\\b/
:1,$s/$/\\b" 485_ogenes_with_omimdiseases.txt/
:wq
sh kirc_tmplst1.sh > kirc_tmplst1out.txt
#wc -l kirc_tmplst1out.txt = 78
#kirc_tmplst1out.txt lists the 78 kirc genes whose allelic variants files from omim would be needed; 
#note: the 28 genes for which no av file is available ARE INCLUDED in this file (i.e., in 
#485_ogenes_with_omimdiseases.txt); 

vi /scratch/prasannalab/cancers_in_detail/kirc/kirc_drivers.txt
#/\t

#Useful cols;
#$1 = gene name; $6 = Protein Change; $7 = Annotation; $8 = Functional Impact; $9 = Mutation Type; 
#$10 = Variant Type; $11 = Copy #; $16 = Chromosome; $17 = Start Pos; 
#$18 = End Pos; $19 = Ref; $20 = Var; $22 = HGVSc; $32 = ClinVar; $33 = dbSNP; 

#ENST informn is important; it is in the HGVSc col, or $22;

#awk -F"\t" '{IFS=OFS="\t"} {print $1,$6,$7,$8,$9,$10,$11,$16,$17,$18,$19,$20,$22,$32,$33}' kirc_drivers_for_ogenes_with_omimdiseases.txt | cut -f1,1 | uniq
#wc -l = 78

#awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6,$16,$17,$18,$19,$20,$9,$10,$11,$32,$33,$7,$8}' kirc_drivers_for_ogenes_with_omimdiseases.txt 
#wc -l = 565

awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' kirc_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq -c 
#wc -l = 529
#wc -l kirc_drivers_for_ogenes_with_omimdiseases.txt = 565 ; thus, sort and uniq reduces 
#the number of mutns; 

awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' kirc_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > kirc_uniq_drivers_for_ogenes_with_omdis.txt 
#there are 529 unique mutations in 78 kirc driver genes; the 78 genes are
#associated with omim diseases, and are listed in kirc_tmplst1out.txt; 

#ClinVar
#$1 = AlleleID; $3 = name of variant with this AlleleID; $10 = RS# (dbSNP); $12 = RCVaccession
#$17 = Assembly
awk -F"\t" '{print $1, $3, $7, $10, $12, $17}' variant_summary.txt | more

#$2 below contains the important ENST informn; the informn comes from the HGVSc col, or $22, in: 
#kirc_drivers_for_ogenes_with_omimdiseases.txt
awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' kirc_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#13   i.e., there are 13 mutations without ENST Id; e.g.s listed below; the mutations are all 
#fusions and do not have an ENST Id in the tsv file downloaded from cbio; for these, $2 or ENST col 
#is empty; 
CUX1            MAP2K1-CUX1
EP300           TNRC6B-EP300
FOXP1           FOXP1-GRM7-AS3
JAK2            DOCK8-JAK2

awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' kirc_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#13   13 fusions; 
awk -F"\t" '{IFS=OFS="\t"} ($2 ~ /:/){print}' kirc_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#516
wc -l kirc_uniq_drivers_for_ogenes_with_omdis.txt
#529    516 + 13 = 529

#Preparing input file for perl program; 
#getting the set of 1517 unique mutns, and removing fusions from the list; 
awk -F"\t" '{IFS=OFS="\t"}{print $1,$22,$6,$32,$7}' kirc_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > tmp1.txt
#wc -l tmp1.txt = 529 ;
awk -F"\t" '{IFS=OFS="\t"}($2 ~ /:/){print}' tmp1.txt > tmp2.txt
#wc -l tmp2.txt = 516 ;
#edited tmp2.txt to replace ; with \t, to retain only oncoKB assessment;
vi tmp2.txt  
#:1,$s/;/\t/
#:wq
awk -F"\t" '{IFS=OFS="\t"}{print $1,$2,$3,$4,$5}' tmp2.txt > tmp3.txt
#wc -l tmp3.txt = 516 ;
#a header line is required; took the line from foll file;
#/scratch/prasannalab/luad_drivr_mutns/infil_mutns808_assessmt_cv_oncokb.txt
#the header line is the foll:
#Gene    HGVSc   Protein Change  ClinVar Annotation
awk -F"\t" '(NR==1)' /scratch/prasannalab/luad_drivr_mutns/infil_mutns808_assessmt_cv_oncokb.txt > tmp4.txt
cat tmp4.txt tmp3.txt > infil_kirc_mutns_cv_oncokbannotn.txt
rm tmp1.txt tmp2.txt tmp3.txt tmp4.txt

#Running perl program, srch_cbiomutns_in_clinvar.pl; took about 7 mins for the job to complete;
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists

nohup perl /scratch/prasannalab/luad_drivr_mutns/srch_cbiomutns_in_clinvar.pl infil_kirc_mutns_cv_oncokbannotn.txt variant_summary_GRCh37.txt outfil_kirc_cbio_clinvar.txt &

awk -F"\t" '{IFS=OFS="\t"}{print NF}' outfil_kirc_cbio_clinvar.txt | sort | uniq -c
#   91 12 (for 91 - 1 header = 90 mutns, clinvar, dbsnp annotations obtained)
#  426  6 (for 426 mutns, clinvar and dbsnp annotations are not obtained; i.e., these mutns are obsvd only in cbio)

#header in outfil_kirc_cbio_clinvar.txt
# 1     2      3               4       5            6         7     8     9           10                   11           12
#Gene  HGVSc  Protein Change  ClinVar Annotation  #AlleleID  Type  Name  GeneSymbol  ClinicalSignificance  RS# (dbSNP)  RCVaccession
#$1, $9, $2, $3, $8, $7, $11, $12, $6, $4, $10, $5;
awk -F"\t" '{IFS=OFS="\t"}{print $1, $9, $2, $3, $8, $7, $11, $12, $6, $4, $10, $5}' outfil_kirc_cbio_clinvar.txt > cols_rearranged_cbio_clinvar_kirc.txt

#my impression - clinvar and dbsnp store mutations which are observed in 1% of population
#cbio mutations are too small in number to be population based mutations; i.e., they 
#are disease causing mutations, that are rare and not observed in a population; 
#thus many mutations in cbio will not be found in dbsnp and clinvar;

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles
awk -F"\t" '{IFS=OFS="\t"}(NR>1)&&(NF==12){print $0}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/outfil_kirc_cbio_clinvar.txt 
#wc -l = 90;  thus, for kirc, there are 90 cbio mutns out of 516 with rs and cv ids; 
awk -F"\t" '{IFS=OFS="\t"}(NF==12){print $0}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/outfil_kirc_cbio_clinvar.txt > /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/kirc_90cbio_mutns_with_rs_cv_ids.txt 

#the next step is to see which of the 90 kirc cbio mutns are in 4589 omim set; 
#cbio: $12 = clinvar accession; multiple entries per line; $11, which gives rs ID, contains one entry 
#per line, but some entries maybe -1, meaning rs ID is missing; 
#omim: $5 = SNP; more than one entries per line can occur; some lines can be blank; $7 = clinvar ID; 
#more than one entries can occur per line; some lines can be blank;

awk -F"\t" '{IFS=OFS="\t"}{print $11, $12}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/kirc_90cbio_mutns_with_rs_cv_ids.txt | more
#RS# (dbSNP)     RCVaccession
#776240891       RCV000532198|RCV000574374
#387906849       RCV000023240|RCV001027030
#-1      RCV002025871
#876659613       RCV002234805
#-1      RCV001972712

awk -F"\t" '{IFS=OFS="\t"}{print $5, $7}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/omim_all_av_onco457.txt | more 
#SNP     ClinVar
#rs786205109     RCV000019398
#rs80051519      RCV000019399
#        RCV000019400
#rs786205110     RCV000019401
#        RCV000019402
#        RCV000019403
#rs121434538     RCV000019404,RCV001851942
#        RCV000019405
#rs1555760738    RCV000083256,RCV000083257

#running perl program, identifying_mutns_common_to_omim_and_clinv.pl
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists
perl /scratch/prasannalab/luad_drivr_mutns/identifying_mutns_common_to_omim_and_clinv.pl /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/kirc_90cbio_mutns_with_rs_cv_ids.txt /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/omim_all_av_onco457.txt kirc_cbio90_rs_mapped_to_omim.txt kirc_cbio90_clinv_mapped_to_omim.txt
uniq kirc_cbio90_clinv_mapped_to_omim.txt > kirc_cbio90_clinv_mapped_to_omim_uniq.txt
#file to be used is kirc_cbio90_clinv_mapped_to_omim_uniq.txt; this is for the foll reason:
#a mutn (e.g., AKT1 E17K) may occur once in the input file (kirc_90cbio_mutns_with_rs_cv_ids.txt), 
#but may be associated with multiple RCV identifiers (24 identifiers for AKT1 E17K); hence in the output file 
#(kirc_cbio90_clinv_mapped_to_omim.txt) the mutn (AKT1 E17K) is repeated as many times as there are RCV
#identifiers (24 times for AKT1 E17K); hence, to remove repeating mutn lines arising due to multiple RCV 
#identifiers, the uniq command has to be used;

wc -l kirc_90cbio_mutns_with_rs_cv_ids.txt kirc_cbio90_rs_mapped_to_omim.txt kirc_cbio90_clinv_mapped_to_omim.txt kirc_cbio90_clinv_mapped_to_omim_uniq.txt
#   91 (91 - 1 header = 90) kirc_90cbio_mutns_with_rs_cv_ids.txt         (input file)
#   24 (24 - 1 header = 23) kirc_cbio90_rs_mapped_to_omim.txt            (output file)
#  169 (169 - 1 header = 168) kirc_cbio90_clinv_mapped_to_omim.txt         (output file)
#   14 (14 - 1 header = 13) kirc_cbio90_clinv_mapped_to_omim_uniq.txt    (output file)


#did another sort and uniq -c on output file, kirc_cbio90_clinv_mapped_to_omim_uniq.txt ;  
#this was done to club together identical mutations that might have been missed by above uniq cmd;
sort kirc_cbio90_clinv_mapped_to_omim_uniq.txt | uniq -c > kirc_cbio90_clinv_mapped_to_omim_sortuniqc.txt 
#wc -l kirc_cbio90_clinv_mapped_to_omim_sortuniqc.txt = 14 (14-1 header = 13)
#thus 14 from the *_uniq.txt file has reduced to 14 in the *_sortuniqc.txt file;

#edited the file to bring header line to top of file, and to remove the count for header line;
vi kirc_cbio90_clinv_mapped_to_omim_sortuniqc.txt
#this file gives count of number of times each unique mutation repeats; 

awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' kirc_cbio90_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 != $6)' 
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' kirc_cbio90_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 == $6)' | grep "MEN1"
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' kirc_cbio90_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 == $6)' | grep "ENST00000263967.3:c.1634A>C"
#for kirc, in all 13 entries, $5=$6; 

###NOTE: below, I am using the *_uniq.txt file, NOT *_sortuniqc.txt file; this 
###is to get a proper count of uniq mutations; using *_sortuniqc.txt file below to get the final file gave some 
###duplicate mutations; hence, decided to use the *_uniq.txt file below to get the final file;
###however, using the *_sortuniqc.txt file ABOVE is helpful because the lists to examine are shorter;  
###the foll cmds may have to be customised in different cancers to include mutns you think should be included;

#for kirc, foll first cmd alone is sufficient to generate the output file;
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' kirc_cbio90_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 ~ /Gene/){print}($1 !~ /Gene/)&&($5 ~ $4)' > junk
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' kirc_cbio90_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)&&($5 ~ /^$/)' >> junk
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' kirc_cbio90_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)' | grep "ENST00000263967.3:c.1634A>C" >> junk
sort junk | uniq -c > junk2
#edit file junk2 to move header line to top; remove count for header line; add a col heading called "n(mutns)\t"
vi junk2
sed -e 's/^[ ]*//' -e '2,$s/ /\t/' junk2 > kirc_cbio_omim_matched_mutns.txt
#wc -l kirc_cbio_omim_matched_mutns.txt = 14 (13 uniq mutns + 1 header line = 14)

#Have to introduce the correct counts for each mutation in kirc_cbio_omim_matched_mutns.txt from
#kirc_drivers_for_ogenes_with_omimdiseases.txt or /scratch/prasannalab/cancers_in_detail/kirc/kirc_drivers.txt ; 
#have to turn kirc_cbio_omim_matched_mutns.txt into a batch file which searches for each mutn in the
#above 2 driver files;
#have to create a batch file with cmds of the foll kind; 
#awk -F"\t" '{IFS=OFS="\t"}($1 ~ /^BAP1$/) && ($6 ~ /^Q267\*$/) && ($22 ~ /^ENST00000460680.1:c.799C>T$/)' kirc_drivers_for_ogenes_with_omimdiseases.txt
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $2, $3, $10}' kirc_cbio_omim_matched_mutns.txt | uniq > prep_kirc_noccs_cbio_omim_matched_mutns.sh 
vi prep_kirc_noccs_cbio_omim_matched_mutns.sh
#:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}(\$1 \~ \/\^/
#:1,$s/\t/    /
#:1,$s/    /\$\/) \&\& (\$6 \~ \/^/
#:1,$s/\t/    /
#:1,$s/    /\$\/) \&\& (\$22 \~ \/\^/
#:1,$s/$/\$\/)' kirc_drivers_for_ogenes_with_omimdiseases.txt/
#:1,$s/\*/\\*/
#:wq
cp prep_kirc_noccs_cbio_omim_matched_mutns.sh tst1.sh
vi tst1.sh
#:1,$s/kirc_drivers_for_ogenes_with_omimdiseases.txt/\/scratch\/prasannalab\/cancers_in_detail\/kirc\/kirc_drivers.txt/
#:wq
sh tst1.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | more
#the output from tst1.sh should be same as output from cmd below: 
sh prep_kirc_noccs_cbio_omim_matched_mutns.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | more

#if outputs are same, use cmds below to get final file;
echo "" > scratch.txt
sh prep_kirc_noccs_cbio_omim_matched_mutns.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | sed -e 's/^[ ]*//' -e '1,$s/ /\t/' >> scratch.txt
#Use foll cmd to MANUALLY MAKE DUPLICATE LINES in scratch.txt of those mutations which occur multiple 
#times in kirc_cbio_omim_matched_mutns.txt; to identify the duplicate mutations in 
#kirc_cbio_omim_matched_mutns.txt, use foll cmd: (e.g., in coadread, APC R302*, BRAF L597V,...) 
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $2, $3, $10}' kirc_cbio_omim_matched_mutns.txt | uniq -c | more 
vi scratch.txt
#use paste cmd below to make sure the same gene and mutn lines are being pasted;
paste -d"\t" scratch.txt kirc_cbio_omim_matched_mutns.txt | more
paste -d"\t" scratch.txt kirc_cbio_omim_matched_mutns.txt | awk -F"\t" '{IFS=OFS="\t"}{print $1,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}' > kirc_noccs_cbio_omim_matched_mutns.txt

###taking foll file unix file to xl: 
#/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/kirc_noccs_cbio_omim_matched_mutns.txt
#downloaded to windows area: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\kirc\kirc_noccs_cbio_omim_matched_mutns.txt
#xl file = D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx
#sheet = kirc_cbio_omim_mutns ;

-------------------------------------------------------------------

#HNSC

#Comparing tcga mutations collected for hnsc, for oncokb genes, with the mutations catalogued 
#for the genes in OMIM; the kirc set of lines above have been copied below, and have been 
#appropriately modified;

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim

#Driver genes and mutations for hnsc, obtained from cbioportal, are in the foll file; 
/scratch/prasannalab/cancers_in_detail/hnsc/hnsc_drivers.txt

grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/hnsc/hnsc_drivers.txt | wc -l
#1646 drivers

#https://askubuntu.com/questions/592273/count-the-number-of-unique-values-based-on-two-columns-in-a-spreadsheet
#Below, $1 = Gene name; $6 = "Protein Change"; i in a = loop through gene names; 
#j in a[i] = loop through "Protein Change" col associated with each gene name; 
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/hnsc/hnsc_drivers.txt | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$6]++} END {for (i in a) for (j in a[i]) print a[i][j], i, j}' | more
#wc -l = 1229

#Below, $32 = "ClinVar"; $6 = "Protein Change";  
#$32 is replaced by an integer: if mutn is documented in clinvar, $32 = 1; if no mention of mutn in clinvar, $32 = 0;
#grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/hnsc/hnsc_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int, $32}' | more
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/hnsc/hnsc_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int}' | more
#wc -l = 1646 lines

#foll. command seems to work; using a 3-d array (instead of the 2-d array in the gawk command above);
#$1=gene; $6="Protein Change"; $32=clinvar_as_int (which is 1 if mutn is mentioned in clinvar, 0 if it is not);
#all three can be counted together because, if a mutn repeats, the clinvar status will also repeat;
#Note: wc -l for cmd below (549) does not match wc -l for the cmd above (547);
#this is because a protein mutn can occur in several ways, and each mutn can have a different clinvar status; e.g., 
#1       PIK3CA  M1043I  0  c.3129G>C
#2       PIK3CA  M1043I  1  c.3129G>A  Pathogenic/Likely_pathogenic
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/hnsc/hnsc_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int}' | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$2][$3]++} END {for (i in a) for (j in a[i]) for (k in a[i][j]) print a[i][j][k], i, j, k}' > hnsc_pr_mut_clinv_count.txt
#wc -l = 1235

#Latest and most accurate version of command; here, the definition of mutation has been expanded to include
#$6 (protein change), $16 (chromosome), $17 (start pos), $18 (end pos), $19 (ref), $20 (var) in 
#/scratch/prasannalab/cancers_in_detail/hnsc/hnsc_drivers.txt; thus, mutn definition is more 
#complete and accurate, and hence the mutn counts are more accurate; above, only $2 (protein change) 
#was used to define mutn
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/hnsc/hnsc_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6 "_" $16 "_" $17 "_" $18 "_" $19 "_" $20, clinvar_as_int}' | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$2][$3]++} END {for (i in a) for (j in a[i]) for (k in a[i][j]) print a[i][j][k], i, j, k}' > hnsc_nt_mut_clinv_count.txt
#wc -l hnsc_nt_mut_clinv_count.txt = 1265

#Both files may have their uses; two mutns may be different at nucleotide level, but may be the same
#at protein level;

wc -l hnsc_pr_mut_clinv_count.txt hnsc_nt_mut_clinv_count.txt
  1235 hnsc_pr_mut_clinv_count.txt
  1265 hnsc_nt_mut_clinv_count.txt
#thus, by improving mutn definition, the number of lines in file has increased (from 549 to 571);
#i.e., more unique mutations, and fewer repeating mutations;

#counting no. of unique mutns (protein level and nt level mutns) in each gene
awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count){print count[var], var}}' hnsc_nt_mut_clinv_count.txt > hnsc_nt_n_uniqmutns.txt
wc -l hnsc_nt_n_uniqmutns.txt
214     #checking if things are ok, by counting no. of genes;

awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count){print count[var], var}}' hnsc_pr_mut_clinv_count.txt > hnsc_pr_n_uniqmutns.txt
wc -l hnsc_pr_n_uniqmutns.txt
214     #checking if things are ok, by counting no. of genes;

#counting no. of repeating mutns in each gene;
awk -F"\t" '{IFS=OFS="\t"} ($1>1){print $0}' hnsc_nt_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count) print count[var], var}' > hnsc_nt_n_repeatmutns.txt
wc -l hnsc_nt_n_repeatmutns.txt
27

awk -F"\t" '{IFS=OFS="\t"} ($1>1){print $0}' hnsc_pr_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count) print count[var], var}' > hnsc_pr_n_repeatmutns.txt  
wc -l hnsc_pr_n_repeatmutns.txt
29

#counting no. of protein mutns, and nt mutns mentioned in clinvar in each gene;
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' hnsc_pr_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {print $2, $3, $4}' | awk -F"\t" '{IFS=OFS="\t"} {count[$1]++} END {for (var in count) print count[var], var}' > hnsc_pr_n_clinmutns.txt
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' hnsc_nt_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {print $2, $3, $4}' | awk -F"\t" '{IFS=OFS="\t"} {count[$1]++} END {for (var in count) print count[var], var}' > hnsc_nt_n_clinmutns.txt

#Total no. of genes = 214;

#counting total no. of unique protein mutns, and total no. of unique nt mutns;  
awk -F"\t" '{nuniqmutns += $1}END {print nuniqmutns}' hnsc_pr_n_uniqmutns.txt
1235     #this is equal to no. of lines in file hnsc_pr_mut_clinv_count.txt 
awk -F"\t" '{nuniqmutns += $1}END {print nuniqmutns}' hnsc_nt_n_uniqmutns.txt
1265     #this is equal to no. of lines in file hnsc_nt_mut_clinv_count.txt 

#counting total no. of repeating protein mutns, and total no. of repeating nt mutns;  
awk -F"\t" '{nrepmutns += $1}END {print nrepmutns}' hnsc_pr_n_repeatmutns.txt
152
awk -F"\t" '{nrepmutns += $1}END {print nrepmutns}' hnsc_nt_n_repeatmutns.txt
140

#Thus, above, the 6 files listed below have been created; 
#hnsc_pr_n_uniqmutns.txt; hnsc_pr_n_repeatmutns.txt; hnsc_pr_n_clinmutns.txt
#hnsc_nt_n_uniqmutns.txt; hnsc_nt_n_repeatmutns.txt; hnsc_nt_n_clinmutns.txt

#counting total no. of protein mutns mentioned in clinvar, and total no. of nt mutns mentioned in clinvar;  
#use foll. two commands OR the two below them;
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' hnsc_pr_mut_clinv_count.txt | wc -l
332
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' hnsc_nt_mut_clinv_count.txt | wc -l
351   

awk -F"\t" '{nclinmutns += $1}END {print nclinmutns}' hnsc_pr_n_clinmutns.txt
332
awk -F"\t" '{nclinmutns += $1}END {print nclinmutns}' hnsc_nt_n_clinmutns.txt
351 

#Foll cmd gives total no. of mutations for each gene;
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/hnsc/hnsc_drivers.txt | gawk -F"\t" '{IFS=OFS="\t"}{a[$1]++} END {for (i in a) print a[i], i}' > hnsc_totalmutns_per_gene.txt

#used the above file to create the foll seven cmd files; 
#the basic cmd in the cmd files is:
#echo -n -e "HLA-C\t\c" ; grep -w "HLA-C" hnsc_totalmutns_per_gene.txt ; echo -n -e ""

awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" hnsc_totalmutns_per_gene.txt ; echo -n -e \"\\n\""}' hnsc_totalmutns_per_gene.txt > hnsc_cmdlite_totalmutns_pergene.sh

awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" hnsc_pr_n_clinmutns.txt ; echo -n -e \"\\n\""}' hnsc_totalmutns_per_gene.txt > hnsc_cmdlite_pr_clin.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" hnsc_pr_n_repeatmutns.txt ; echo -n -e \"\\n\""}' hnsc_totalmutns_per_gene.txt > hnsc_cmdlite_pr_rep.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" hnsc_pr_n_uniqmutns.txt ; echo -n -e \"\\n\""}' hnsc_totalmutns_per_gene.txt > hnsc_cmdlite_pr_uniq.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" hnsc_nt_n_clinmutns.txt ; echo -n -e \"\\n\""}' hnsc_totalmutns_per_gene.txt > hnsc_cmdlite_nt_clin.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" hnsc_nt_n_repeatmutns.txt ; echo -n -e \"\\n\""}' hnsc_totalmutns_per_gene.txt > hnsc_cmdlite_nt_rep.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" hnsc_nt_n_uniqmutns.txt ; echo -n -e \"\\n\""}' hnsc_totalmutns_per_gene.txt > hnsc_cmdlite_nt_uniq.sh

sh hnsc_cmdlite_totalmutns_pergene.sh | grep -v ^$ > hnsc_countoftotalmutns.txt

sh hnsc_cmdlite_pr_clin.sh | grep -v ^$ > hnsc_pr_countofclinmutns.txt
sh hnsc_cmdlite_pr_rep.sh | grep -v ^$ > hnsc_pr_countofrepmutns.txt
sh hnsc_cmdlite_pr_uniq.sh | grep -v ^$ > hnsc_pr_countofuniqmutns.txt
sh hnsc_cmdlite_nt_clin.sh | grep -v ^$ > hnsc_nt_countofclinmutns.txt
sh hnsc_cmdlite_nt_rep.sh | grep -v ^$ > hnsc_nt_countofrepmutns.txt
sh hnsc_cmdlite_nt_uniq.sh | grep -v ^$ > hnsc_nt_countofuniqmutns.txt

#for protein mutns;
#Total no. of unique mutns in 214 genes = 1235
#Total no. of repeating mutns in 214 genes = 152
#Total no. of mutns mentioned in clinvar in 214 genes = 332

#for nt mutns;
#Total no. of unique mutns in 214 genes = 1265
#Total no. of repeating mutns in 214 genes = 140
#Total no. of mutns mentioned in clinvar in 214 genes = 351

#Downloaded the 6 files created above and listed below, to windows area:
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\HNSC
#hnsc_countoftotalmutns.txt    
#hnsc_pr_countofuniqmutns.txt  hnsc_pr_countofclinmutns.txt
#hnsc_pr_countofrepmutns.txt  hnsc_nt_countofuniqmutns.txt  
#hnsc_nt_countofclinmutns.txt  hnsc_nt_countofrepmutns.txt   

#imported the above files to excel; 
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx
#sheet = hnsc_counting_dri_genes

#unix tip: in terminal how to erase typed command quickly:
#you can cancel current command with CTRL+c; you can clear command to the 
#beginning with CTRL+u; to clear line after the cursor press CTRL+k;
            
#Working with tcga-cbio and omim mutations;

#Reactome pway informn is available for 862 oncokb + 324 blair_mel = 1186 genes; 
#plan to work with cbio and omim mutations of only these genes; 
#the list of 1186 genes is in the file:
#/scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/lst_1186_oncokb_blair_mel_genes.txt ;

#omim diseases for ALL oncokb genes (1066) are in the file: 
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/genes_oncokb_order_omim_diseases.txt

#omim diseases for blair-mel-genes-not-in-oncokb are in file:
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/blair_mel_genes_not_in_oncokb_to_omim/omim_diseases_for_b_m_g_not_in_oncokb.txt

#these files are also in the excel table:
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx
#sheet = oncokb_b_m_g_omim_assocn

#the above 2 files have to be trimmed to include only those genes that are in the
#1186 set; 

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists

#av have been downloaded from omim for the 485 oncokb genes (there are only 457 out of 485 av 
#files because, for the remaining genes, omim does not provide an av table); av tables have also 
#to be downloaded for the remaining 306 blair_mel genes;  

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists ;  

#FOR THE NEWLY DONE CANCERS (i.e., hnsc, gbm, luad, skcm, laml) THE FOLLOWING MAY HAVE TO BE DONE;
#this is because, in the original /scratch/prasannalab/cancers_in_detail/hnsc/hnsc_drivers.txt
#file, after gene name, a space has been introduced; i.e., "ABL1 " instead of just "ABL1"
cp /scratch/prasannalab/cancers_in_detail/hnsc/hnsc_drivers.txt hnsc_temp_drivers.txt
vi hnsc_temp_drivers.txt
#:1,$s/ \t/\t/
#:wq

#to identify the subset of genes with driver mutations in hnsc; decided to cp and re-use brca 
#prep file, rather than create a new prep file for hnsc;  
cp prep_kirc_485onco_diseasegene_dri.sh prep_hnsc_485onco_diseasegene_dri.sh
vi prep_hnsc_485onco_diseasegene_dri.sh
#:1,$s/kirc/hnsc/g
##########below is an EXTRA EDIT FOR THE NEWLY DONE CANCERS (i.e., hnsc, gbm, luad, skcm, laml)
#:1,$s/\/scratch\/prasannalab\/cancers_in_detail\/hnsc\/hnsc_drivers.txt/hnsc_temp_drivers.txt/
#:wq
sh prep_hnsc_485onco_diseasegene_dri.sh > hnsc_drivers_for_ogenes_with_omimdiseases.txt
#i.e., even though there are only 457 av files for the set of 485 oncokb genes associated with omim 
#diseases, the above prep file extracts hnsc drivers using all 485 genes; 

#note: no av table is available for foll 28 genes;
grep "no av" /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/downloadnotes_remaining296_ogenes_with_omimdiseases.txt /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/genes_downloaded_from_omim.txt
#wc -l = 28 
#FOXO1  ; PGR  ; ACSL6  ; ASPSCR1 ; ATIC ; BCL2 ; BCR ; CBFB ; CEP43 ; CRTC1 ; DEK ; 
#LMO2 ; LYL1 ; MAML2 ; MIB1 ; MYB ; NR4A3 ; NRG1 ; NUMA1 ; PICALM ; PML ; PRCC ; RANBP2 ; 
#SF3B1 ; SH3GL1 ; TAF15 ; TAL1 ; TEC ; 

#foll cmd gives list of genes in above file; i.e., hnsc genes associated with omim diseases; 
awk -F"\t" '{print $1}' hnsc_drivers_for_ogenes_with_omimdiseases.txt | sort | uniq > hnsc_tmplst1.sh
#wc -l hnsc_tmplst1.sh = 153  there are 153 oncokb genes in hnsc that are associated with omim diseases;
#turning hnsc_tmplst1.sh to a cmd file;
vi hnsc_tmplst1.sh
:1,$s/^/grep "\\b/
:1,$s/$/\\b" 485_ogenes_with_omimdiseases.txt/
:wq
sh hnsc_tmplst1.sh > hnsc_tmplst1out.txt
#wc -l hnsc_tmplst1out.txt = 153
#hnsc_tmplst1out.txt lists the 153 hnsc genes whose allelic variants files from omim would be needed; 
#note: the 28 genes for which no av file is available ARE INCLUDED in this file (i.e., in 
#485_ogenes_with_omimdiseases.txt); 

#vi /scratch/prasannalab/cancers_in_detail/kirc/kirc_drivers.txt
#In the NEWLY DONE CANCERS (hnsc, gbm, luad, skcm, laml), USE FOLL cmd;
vi hnsc_temp_drivers.txt
#/\t

#Useful cols;
#$1 = gene name; $6 = Protein Change; $7 = Annotation; $8 = Functional Impact; $9 = Mutation Type; 
#$10 = Variant Type; $11 = Copy #; $16 = Chromosome; $17 = Start Pos; 
#$18 = End Pos; $19 = Ref; $20 = Var; $22 = HGVSc; $32 = ClinVar; $33 = dbSNP; 

#ENST informn is important; it is in the HGVSc col, or $22;

#awk -F"\t" '{IFS=OFS="\t"} {print $1,$6,$7,$8,$9,$10,$11,$16,$17,$18,$19,$20,$22,$32,$33}' hnsc_drivers_for_ogenes_with_omimdiseases.txt | cut -f1,1 | uniq
#wc -l = 153

#awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6,$16,$17,$18,$19,$20,$9,$10,$11,$32,$33,$7,$8}' hnsc_drivers_for_ogenes_with_omimdiseases.txt 
#wc -l = 1377

awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' hnsc_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq -c 
#wc -l = 1016
#wc -l hnsc_drivers_for_ogenes_with_omimdiseases.txt = 1377 ; thus, sort and uniq reduces 
#the number of mutns; 

awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' hnsc_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > hnsc_uniq_drivers_for_ogenes_with_omdis.txt 
#there are 1016 unique mutations in 153 hnsc driver genes; the 153 genes are
#associated with omim diseases, and are listed in hnsc_tmplst1out.txt; 

#ClinVar
#$1 = AlleleID; $3 = name of variant with this AlleleID; $10 = RS# (dbSNP); $12 = RCVaccession
#$17 = Assembly
awk -F"\t" '{print $1, $3, $7, $10, $12, $17}' variant_summary.txt | more


#$2 below contains the important ENST informn; the informn comes from the HGVSc col, or $22, in: 
#hnsc_drivers_for_ogenes_with_omimdiseases.txt
awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' hnsc_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#67   i.e., there are 67 mutations without ENST Id; e.g.s listed below; most of the mutations listed
#below are fusions and genuinely do not have an ENST Id in the tsv file downloaded from cbio ;
#for these, $2 or ENST col is empty;
#however, below, for HLA-A, a decimal number was appearing as $2; went back to file:
#hnsc_drivers_for_ogenes_with_omimdiseases.txt , and found that the col:
#"OncoKB: Likely Oncogenic, ...." is missing in the file I downloaded from cbio; so, went back to
#cbio and downloaded the file again for hnsc; found that this "OncoKB: Likely Oncogenic, ...."
#col is now (irritatingly) present! as ENST is only being used in this part of the project,
#decided NOT to start all over again, by going back to cbio; instead,
#decided to MANUALLY EDIT the file: hnsc_drivers_for_ogenes_with_omimdiseases.txt;

####adjacent sentence not true for hnsc: the mutations are all fusions and do not have an ENST Id in 
####the tsv file downloaded from cbio; for these, $2 or ENST col is empty; 

FGFR3           FGFR3-TACC3
FOXP1           FOXP1-PXDNL
HLA-A   0.09    E43*
HLA-A   0.12    R7*
HLA-A   0.16    X299_splice
HLA-A   0.17    E77Dfs*23
HLA-A   0.19    X25_splice
HLA-A   0.20    R7*
HLA-A   0.21    W157*
HLA-A   0.25    E43*
HLA-A   0.25    R7*
HLA-A   0.26    R45Pfs*54
HLA-A   0.38    L154Gfs*16
HLA-A   0.48    E113*
HLA-A   0.54    X299_splice
JAK2            JAK2-GLDC
KDM5C           KDM5C-HUWE1

#MANUALLY EDITING hnsc_drivers_for_ogenes_with_omimdiseases.txt to introduce correct HLA-A lines;
#uploaded the new HLA-A.tsv file (called HLA_A_new_hnsc.tsv in unix server, but HLA_A_new.tsv in windows) 
#to pwd; 
#prepared HLA_A_new2_hnsc.tsv ;
awk -F"\t" '{print "HLA-A\t" $0}' HLA_A_new_hnsc.tsv > HLA_A_new2_hnsc.tsv 
#edited the hnsc_drivers_for_ogenes_with_omimdiseases.txt file, went to the position where HLA-A lines 
#are and introduced table2.tsv
#in place of the old HLA-A lines;
vi hnsc_drivers_for_ogenes_with_omimdiseases.txt
/HLA-A
i, esc, !!, cat table2.tsv

#below, re-ran cmd to get the hnsc_uniq_drivers_for_ogenes_with_omdis.txt file; 
awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' hnsc_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > hnsc_uniq_drivers_for_ogenes_with_omdis.txt 

#reran above cmd to check if, for HLA-A, decimal number goes away from $2;
awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' hnsc_uniq_drivers_for_ogenes_with_omdis.txt
#No HLA-A lines occur! 
#note: the ENST Ids differ between old HLA-A.tsv file and new HLA_A_new.tsv file;   

awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' hnsc_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#54    54 fusions
awk -F"\t" '{IFS=OFS="\t"} ($2 ~ /:/){print}' hnsc_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#959
wc -l hnsc_uniq_drivers_for_ogenes_with_omdis.txt
#1013    959 + 54 = 1013


#Preparing input file for perl program; 
#getting the set of 1013 unique mutns, and removing fusions from the list; 
awk -F"\t" '{IFS=OFS="\t"}{print $1,$22,$6,$32,$7}' hnsc_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > tmp1.txt
#wc -l tmp1.txt = 1013 ;
awk -F"\t" '{IFS=OFS="\t"}($2 ~ /:/){print}' tmp1.txt > tmp2.txt
#wc -l tmp2.txt = 959 ;
#edited tmp2.txt to replace ; with \t, to retain only oncoKB assessment;
vi tmp2.txt  
#:1,$s/;/\t/
#:wq
awk -F"\t" '{IFS=OFS="\t"}{print $1,$2,$3,$4,$5}' tmp2.txt > tmp3.txt
#wc -l tmp3.txt = 516 ;
#a header line is required; took the line from foll file;
#/scratch/prasannalab/luad_drivr_mutns/infil_mutns808_assessmt_cv_oncokb.txt
#the header line is the foll:
#Gene    HGVSc   Protein Change  ClinVar Annotation
awk -F"\t" '(NR==1)' /scratch/prasannalab/luad_drivr_mutns/infil_mutns808_assessmt_cv_oncokb.txt > tmp4.txt
cat tmp4.txt tmp3.txt > infil_hnsc_mutns_cv_oncokbannotn.txt
rm tmp1.txt tmp2.txt tmp3.txt tmp4.txt

#Running perl program, srch_cbiomutns_in_clinvar.pl; took about 8 mins for the job to complete;
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists

nohup perl /scratch/prasannalab/luad_drivr_mutns/srch_cbiomutns_in_clinvar.pl infil_hnsc_mutns_cv_oncokbannotn.txt variant_summary_GRCh37.txt outfil_hnsc_cbio_clinvar.txt &

awk -F"\t" '{IFS=OFS="\t"}{print NF}' outfil_hnsc_cbio_clinvar.txt | sort | uniq -c
#  358 12 (for 358 - 1 header = 357 mutns, clinvar, dbsnp annotations obtained)
#  602  6 (for 602 mutns, clinvar and dbsnp annotations are not obtained; i.e., these mutns are obsvd only in cbio)

#header in outfil_hnsc_cbio_clinvar.txt
# 1     2      3               4       5            6         7     8     9           10                   11           12
#Gene  HGVSc  Protein Change  ClinVar Annotation  #AlleleID  Type  Name  GeneSymbol  ClinicalSignificance  RS# (dbSNP)  RCVaccession
#$1, $9, $2, $3, $8, $7, $11, $12, $6, $4, $10, $5;
awk -F"\t" '{IFS=OFS="\t"}{print $1, $9, $2, $3, $8, $7, $11, $12, $6, $4, $10, $5}' outfil_hnsc_cbio_clinvar.txt > cols_rearranged_cbio_clinvar_hnsc.txt

#my impression - clinvar and dbsnp store mutations which are observed in 1% of population
#cbio mutations are too small in number to be population based mutations; i.e., they 
#are disease causing mutations, that are rare and not observed in a population; 
#thus many mutations in cbio will not be found in dbsnp and clinvar;

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles
awk -F"\t" '{IFS=OFS="\t"}(NR>1)&&(NF==12){print $0}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/outfil_hnsc_cbio_clinvar.txt 
#wc -l = 357;  thus, for hnsc, there are 357 cbio mutns out of 959 with rs and cv ids; 
awk -F"\t" '{IFS=OFS="\t"}(NF==12){print $0}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/outfil_hnsc_cbio_clinvar.txt > /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/hnsc_357cbio_mutns_with_rs_cv_ids.txt 

#the next step is to see which of the 357 hnsc cbio mutns are in 4589 omim set; 
#cbio: $12 = clinvar accession; multiple entries per line; $11, which gives rs ID, contains one entry 
#per line, but some entries maybe -1, meaning rs ID is missing; 
#omim: $5 = SNP; more than one entries per line can occur; some lines can be blank; $7 = clinvar ID; 
#more than one entries can occur per line; some lines can be blank;

awk -F"\t" '{IFS=OFS="\t"}{print $11, $12}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/hnsc_357cbio_mutns_with_rs_cv_ids.txt | more
#RS# (dbSNP)     RCVaccession
#776240891       RCV000532198|RCV000574374
#387906849       RCV000023240|RCV001027030
#-1      RCV002025871
#876659613       RCV002234805
#-1      RCV001972712

awk -F"\t" '{IFS=OFS="\t"}{print $5, $7}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/omim_all_av_onco457.txt | more 
#SNP     ClinVar
#rs786205109     RCV000019398
#rs80051519      RCV000019399
#        RCV000019400
#rs786205110     RCV000019401
#        RCV000019402
#        RCV000019403
#rs121434538     RCV000019404,RCV001851942
#        RCV000019405
#rs1555760738    RCV000083256,RCV000083257

#running perl program, identifying_mutns_common_to_omim_and_clinv.pl
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists
perl /scratch/prasannalab/luad_drivr_mutns/identifying_mutns_common_to_omim_and_clinv.pl /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/hnsc_357cbio_mutns_with_rs_cv_ids.txt /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/omim_all_av_onco457.txt hnsc_cbio357_rs_mapped_to_omim.txt hnsc_cbio357_clinv_mapped_to_omim.txt
uniq hnsc_cbio357_clinv_mapped_to_omim.txt > hnsc_cbio357_clinv_mapped_to_omim_uniq.txt
#file to be used is hnsc_cbio357_clinv_mapped_to_omim_uniq.txt; this is for the foll reason:
#a mutn (e.g., AKT1 E17K) may occur once in the input file (hnsc_357cbio_mutns_with_rs_cv_ids.txt), 
#but may be associated with multiple RCV identifiers (24 identifiers for AKT1 E17K); hence in the output file 
#(hnsc_cbio357_clinv_mapped_to_omim.txt) the mutn (AKT1 E17K) is repeated as many times as there are RCV
#identifiers (24 times for AKT1 E17K); hence, to remove repeating mutn lines arising due to multiple RCV 
#identifiers, the uniq command has to be used;

wc -l hnsc_357cbio_mutns_with_rs_cv_ids.txt hnsc_cbio357_rs_mapped_to_omim.txt hnsc_cbio357_clinv_mapped_to_omim.txt hnsc_cbio357_clinv_mapped_to_omim_uniq.txt
#  358 (358 - 1 header = 357) hnsc_357cbio_mutns_with_rs_cv_ids.txt         (input file)
#   80 (80 - 1 header = 79) hnsc_cbio357_rs_mapped_to_omim.txt            (output file)
#  848 (848 - 1 header = 847) hnsc_cbio357_clinv_mapped_to_omim.txt         (output file)
#   64 (64 - 1 header = 63) hnsc_cbio357_clinv_mapped_to_omim_uniq.txt    (output file)


#did another sort and uniq -c on output file, hnsc_cbio357_clinv_mapped_to_omim_uniq.txt ;  
#this was done to club together identical mutations that might have been missed by above uniq cmd;
sort hnsc_cbio357_clinv_mapped_to_omim_uniq.txt | uniq -c > hnsc_cbio357_clinv_mapped_to_omim_sortuniqc.txt 
#wc -l hnsc_cbio357_clinv_mapped_to_omim_sortuniqc.txt = 50 (50-1 header = 49)
#thus 63 from the *_uniq.txt file has reduced to 49 in the *_sortuniqc.txt file;

#edited the file to bring header line to top of file, and to remove the count for header line;
vi hnsc_cbio357_clinv_mapped_to_omim_sortuniqc.txt
#this file gives count of number of times each unique mutation repeats; 

awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' hnsc_cbio357_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 != $6)' 
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' hnsc_cbio357_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 == $6)' | grep "FGFR3"
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' hnsc_cbio357_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 == $6)' | grep "ENST00000260795.2:c.1138G>A"
#for hnsc, in all 13 entries, $5=$6; 

###NOTE: below, I am using the *_uniq.txt file, NOT *_sortuniqc.txt file; this 
###is to get a proper count of uniq mutations; using *_sortuniqc.txt file below to get the final file gave some 
###duplicate mutations; hence, decided to use the *_uniq.txt file below to get the final file;
###however, using the *_sortuniqc.txt file ABOVE is helpful because the lists to examine are shorter;  
###the foll cmds may have to be customised in different cancers to include mutns you think should be included;

#for hnsc, foll first two cmds sufficient to generate the output file; 
#in hnsc, only one FGFR3 mutn has mismatched ids; on inspection it seemed that the mutn could be included; 
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' hnsc_cbio357_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 ~ /Gene/){print}($1 !~ /Gene/)&&($5 ~ $4)' > junk
#wc -l = 56 - 1 = 55
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' hnsc_cbio357_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)' >> junk
#wc -l = 8  same mutn repeated 8 times;

#foll not needed;
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' hnsc_cbio357_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)&&($5 ~ /^$/)' >> junk
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' hnsc_cbio357_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)' | grep "ENST00000263967.3:c.1634A>C" >> junk

sort junk | uniq -c > junk2
#edit file junk2 to move header line to top; remove count for header line; add a col heading called "n(mutns)\t"
vi junk2
sed -e 's/^[ ]*//' -e '2,$s/ /\t/' junk2 > hnsc_cbio_omim_matched_mutns.txt
#wc -l hnsc_cbio_omim_matched_mutns.txt = 50 (49 uniq mutns + 1 header line = 50)

#Have to introduce the correct counts for each mutation in hnsc_cbio_omim_matched_mutns.txt from
#hnsc_drivers_for_ogenes_with_omimdiseases.txt or hnsc_temp_drivers.txt ; 
#have to turn hnsc_cbio_omim_matched_mutns.txt into a batch file which searches for each mutn in the
#above 2 driver files;
#have to create a batch file with cmds of the foll kind; 
#awk -F"\t" '{IFS=OFS="\t"}($1 ~ /^BAP1$/) && ($6 ~ /^Q267\*$/) && ($22 ~ /^ENST00000460680.1:c.799C>T$/)' hnsc_drivers_for_ogenes_with_omimdiseases.txt
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $2, $3, $10}' hnsc_cbio_omim_matched_mutns.txt | uniq > prep_hnsc_noccs_cbio_omim_matched_mutns.sh 
vi prep_hnsc_noccs_cbio_omim_matched_mutns.sh
#:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}(\$1 \~ \/\^/
#:1,$s/\t/    /
#:1,$s/    /\$\/) \&\& (\$6 \~ \/^/
#:1,$s/\t/    /
#:1,$s/    /\$\/) \&\& (\$22 \~ \/\^/
#:1,$s/$/\$\/)' hnsc_drivers_for_ogenes_with_omimdiseases.txt/
#:1,$s/\*/\\*/
#:wq
cp prep_hnsc_noccs_cbio_omim_matched_mutns.sh tst1.sh
vi tst1.sh
####:1,$s/hnsc_drivers_for_ogenes_with_omimdiseases.txt/\/scratch\/prasannalab\/cancers_in_detail\/hnsc\/hnsc_drivers.txt/
#####for hnsc, EDIT ABOVE MODIFIED TO THE ONE BELOW 
#:1,$s/hnsc_drivers_for_ogenes_with_omimdiseases.txt/hnsc_temp_drivers.txt/
#:wq
sh tst1.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | more
#the output from tst1.sh should be same as output from cmd below: 
sh prep_hnsc_noccs_cbio_omim_matched_mutns.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | more

#if outputs are same, use cmds below to get final file;
echo "" > scratch.txt
sh prep_hnsc_noccs_cbio_omim_matched_mutns.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | sed -e 's/^[ ]*//' -e '1,$s/ /\t/' >> scratch.txt
#Use foll cmd to MANUALLY MAKE DUPLICATE LINES in scratch.txt of those mutations which occur multiple 
#times in hnsc_cbio_omim_matched_mutns.txt; to identify the duplicate mutations in 
#hnsc_cbio_omim_matched_mutns.txt, use foll cmd: (in hnsc, only FGFR3   G380R   ENST00000260795.2:c.1138G>A 
#had to be duplicated) 
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $2, $3, $10}' hnsc_cbio_omim_matched_mutns.txt | uniq -c | more 
vi scratch.txt
#use paste cmd below to make sure the same gene and mutn lines are being pasted;
paste -d"\t" scratch.txt hnsc_cbio_omim_matched_mutns.txt | more
paste -d"\t" scratch.txt hnsc_cbio_omim_matched_mutns.txt | awk -F"\t" '{IFS=OFS="\t"}{print $1,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}' > hnsc_noccs_cbio_omim_matched_mutns.txt

###taking foll file unix file to xl: 
#/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/hnsc_noccs_cbio_omim_matched_mutns.txt
#downloaded to windows area: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\hnsc\hnsc_noccs_cbio_omim_matched_mutns.txt
#xl file = D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx
#sheet = hnsc_cbio_omim_mutns ;

-------------------------------------------------------------------

#GBM

#Comparing tcga mutations collected for gbm, for oncokb genes, with the mutations catalogued 
#for the genes in OMIM; the hnsc set of lines above have been copied below, and have been 
#appropriately modified;

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim

#Driver genes and mutations for gbm, obtained from cbioportal, are in the foll file; 
/scratch/prasannalab/cancers_in_detail/gbm/gbm_drivers.txt

grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/gbm/gbm_drivers.txt | wc -l
#805 drivers

#https://askubuntu.com/questions/592273/count-the-number-of-unique-values-based-on-two-columns-in-a-spreadsheet
#Below, $1 = Gene name; $6 = "Protein Change"; i in a = loop through gene names; 
#j in a[i] = loop through "Protein Change" col associated with each gene name; 
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/gbm/gbm_drivers.txt | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$6]++} END {for (i in a) for (j in a[i]) print a[i][j], i, j}' | more
#wc -l = 608

#Below, $32 = "ClinVar"; $6 = "Protein Change";  
#$32 is replaced by an integer: if mutn is documented in clinvar, $32 = 1; if no mention of mutn in clinvar, $32 = 0;
#grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/gbm/gbm_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int, $32}' | more
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/gbm/gbm_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int}' | more
#wc -l = 805 lines

#foll. command seems to work; using a 3-d array (instead of the 2-d array in the gawk command above);
#$1=gene; $6="Protein Change"; $32=clinvar_as_int (which is 1 if mutn is mentioned in clinvar, 0 if it is not);
#all three can be counted together because, if a mutn repeats, the clinvar status will also repeat;
#Note: wc -l for cmd below (549) does not match wc -l for the cmd above (547);
#this is because a protein mutn can occur in several ways, and each mutn can have a different clinvar status; e.g., 
#1       PIK3CA  M1043I  0  c.3129G>C
#2       PIK3CA  M1043I  1  c.3129G>A  Pathogenic/Likely_pathogenic
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/gbm/gbm_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int}' | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$2][$3]++} END {for (i in a) for (j in a[i]) for (k in a[i][j]) print a[i][j][k], i, j, k}' > gbm_pr_mut_clinv_count.txt
#wc -l = 611

#Latest and most accurate version of command; here, the definition of mutation has been expanded to include
#$6 (protein change), $16 (chromosome), $17 (start pos), $18 (end pos), $19 (ref), $20 (var) in 
#/scratch/prasannalab/cancers_in_detail/gbm/gbm_drivers.txt; thus, mutn definition is more 
#complete and accurate, and hence the mutn counts are more accurate; above, only $2 (protein change) 
#was used to define mutn
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/gbm/gbm_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6 "_" $16 "_" $17 "_" $18 "_" $19 "_" $20, clinvar_as_int}' | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$2][$3]++} END {for (i in a) for (j in a[i]) for (k in a[i][j]) print a[i][j][k], i, j, k}' > gbm_nt_mut_clinv_count.txt
#wc -l gbm_nt_mut_clinv_count.txt = 617

#Both files may have their uses; two mutns may be different at nucleotide level, but may be the same
#at protein level;

wc -l gbm_pr_mut_clinv_count.txt gbm_nt_mut_clinv_count.txt
  611 gbm_pr_mut_clinv_count.txt
  617 gbm_nt_mut_clinv_count.txt
#thus, by improving mutn definition, the number of lines in file has increased (from 611 to 617);
#i.e., more unique mutations, and fewer repeating mutations;

#counting no. of unique mutns (protein level and nt level mutns) in each gene
awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count){print count[var], var}}' gbm_nt_mut_clinv_count.txt > gbm_nt_n_uniqmutns.txt
wc -l gbm_nt_n_uniqmutns.txt
149     #checking if things are ok, by counting no. of genes;

awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count){print count[var], var}}' gbm_pr_mut_clinv_count.txt > gbm_pr_n_uniqmutns.txt
wc -l gbm_pr_n_uniqmutns.txt
149     #checking if things are ok, by counting no. of genes;

#counting no. of repeating mutns in each gene;
awk -F"\t" '{IFS=OFS="\t"} ($1>1){print $0}' gbm_nt_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count) print count[var], var}' > gbm_nt_n_repeatmutns.txt
wc -l gbm_nt_n_repeatmutns.txt
14

awk -F"\t" '{IFS=OFS="\t"} ($1>1){print $0}' gbm_pr_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count) print count[var], var}' > gbm_pr_n_repeatmutns.txt  
wc -l gbm_pr_n_repeatmutns.txt
15

#counting no. of protein mutns, and nt mutns mentioned in clinvar in each gene;
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' gbm_pr_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {print $2, $3, $4}' | awk -F"\t" '{IFS=OFS="\t"} {count[$1]++} END {for (var in count) print count[var], var}' > gbm_pr_n_clinmutns.txt
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' gbm_nt_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {print $2, $3, $4}' | awk -F"\t" '{IFS=OFS="\t"} {count[$1]++} END {for (var in count) print count[var], var}' > gbm_nt_n_clinmutns.txt

#Total no. of genes = 149;

#counting total no. of unique protein mutns, and total no. of unique nt mutns;  
awk -F"\t" '{nuniqmutns += $1}END {print nuniqmutns}' gbm_pr_n_uniqmutns.txt
611     #this is equal to no. of lines in file gbm_pr_mut_clinv_count.txt 
awk -F"\t" '{nuniqmutns += $1}END {print nuniqmutns}' gbm_nt_n_uniqmutns.txt
617     #this is equal to no. of lines in file gbm_nt_mut_clinv_count.txt 

#counting total no. of repeating protein mutns, and total no. of repeating nt mutns;  
awk -F"\t" '{nrepmutns += $1}END {print nrepmutns}' gbm_pr_n_repeatmutns.txt
77
awk -F"\t" '{nrepmutns += $1}END {print nrepmutns}' gbm_nt_n_repeatmutns.txt
73

#Thus, above, the 6 files listed below have been created; 
#gbm_pr_n_uniqmutns.txt; gbm_pr_n_repeatmutns.txt; gbm_pr_n_clinmutns.txt
#gbm_nt_n_uniqmutns.txt; gbm_nt_n_repeatmutns.txt; gbm_nt_n_clinmutns.txt

#counting total no. of protein mutns mentioned in clinvar, and total no. of nt mutns mentioned in clinvar;  
#use foll. two commands OR the two below them;
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' gbm_pr_mut_clinv_count.txt | wc -l
256
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' gbm_nt_mut_clinv_count.txt | wc -l
260   

awk -F"\t" '{nclinmutns += $1}END {print nclinmutns}' gbm_pr_n_clinmutns.txt
256
awk -F"\t" '{nclinmutns += $1}END {print nclinmutns}' gbm_nt_n_clinmutns.txt
260 

#Foll cmd gives total no. of mutations for each gene;
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/gbm/gbm_drivers.txt | gawk -F"\t" '{IFS=OFS="\t"}{a[$1]++} END {for (i in a) print a[i], i}' > gbm_totalmutns_per_gene.txt

#used the above file to create the foll seven cmd files; 
#the basic cmd in the cmd files is:
#echo -n -e "HLA-C\t\c" ; grep -w "HLA-C" gbm_totalmutns_per_gene.txt ; echo -n -e ""

awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" gbm_totalmutns_per_gene.txt ; echo -n -e \"\\n\""}' gbm_totalmutns_per_gene.txt > gbm_cmdlite_totalmutns_pergene.sh

awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" gbm_pr_n_clinmutns.txt ; echo -n -e \"\\n\""}' gbm_totalmutns_per_gene.txt > gbm_cmdlite_pr_clin.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" gbm_pr_n_repeatmutns.txt ; echo -n -e \"\\n\""}' gbm_totalmutns_per_gene.txt > gbm_cmdlite_pr_rep.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" gbm_pr_n_uniqmutns.txt ; echo -n -e \"\\n\""}' gbm_totalmutns_per_gene.txt > gbm_cmdlite_pr_uniq.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" gbm_nt_n_clinmutns.txt ; echo -n -e \"\\n\""}' gbm_totalmutns_per_gene.txt > gbm_cmdlite_nt_clin.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" gbm_nt_n_repeatmutns.txt ; echo -n -e \"\\n\""}' gbm_totalmutns_per_gene.txt > gbm_cmdlite_nt_rep.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" gbm_nt_n_uniqmutns.txt ; echo -n -e \"\\n\""}' gbm_totalmutns_per_gene.txt > gbm_cmdlite_nt_uniq.sh

sh gbm_cmdlite_totalmutns_pergene.sh | grep -v ^$ > gbm_countoftotalmutns.txt

sh gbm_cmdlite_pr_clin.sh | grep -v ^$ > gbm_pr_countofclinmutns.txt
sh gbm_cmdlite_pr_rep.sh | grep -v ^$ > gbm_pr_countofrepmutns.txt
sh gbm_cmdlite_pr_uniq.sh | grep -v ^$ > gbm_pr_countofuniqmutns.txt
sh gbm_cmdlite_nt_clin.sh | grep -v ^$ > gbm_nt_countofclinmutns.txt
sh gbm_cmdlite_nt_rep.sh | grep -v ^$ > gbm_nt_countofrepmutns.txt
sh gbm_cmdlite_nt_uniq.sh | grep -v ^$ > gbm_nt_countofuniqmutns.txt

#for protein mutns;
#Total no. of unique mutns in 149 genes = 611
#Total no. of repeating mutns in 149 genes = 77
#Total no. of mutns mentioned in clinvar in 149 genes = 256

#for nt mutns;
#Total no. of unique mutns in 214 genes = 617
#Total no. of repeating mutns in 214 genes = 73
#Total no. of mutns mentioned in clinvar in 214 genes = 260

#Downloaded the 6 files created above and listed below, to windows area:
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\HNSC
#gbm_countoftotalmutns.txt    
#gbm_pr_countofuniqmutns.txt  gbmc_pr_countofclinmutns.txt
#gbm_pr_countofrepmutns.txt  gbmc_nt_countofuniqmutns.txt  
#gbm_nt_countofclinmutns.txt  gbmc_nt_countofrepmutns.txt   

#imported the above files to excel; 
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx
#sheet = gbm_counting_dri_genes

#unix tip: in terminal how to erase typed command quickly:
#you can cancel current command with CTRL+c; you can clear command to the 
#beginning with CTRL+u; to clear line after the cursor press CTRL+k;
            

#Working with tcga-cbio and omim mutations;

#Reactome pway informn is available for 862 oncokb + 324 blair_mel = 1186 genes; 
#plan to work with cbio and omim mutations of only these genes; 
#the list of 1186 genes is in the file:
#/scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/lst_1186_oncokb_blair_mel_genes.txt ;

#omim diseases for ALL oncokb genes (1066) are in the file: 
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/genes_oncokb_order_omim_diseases.txt

#omim diseases for blair-mel-genes-not-in-oncokb are in file:
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/blair_mel_genes_not_in_oncokb_to_omim/omim_diseases_for_b_m_g_not_in_oncokb.txt

#these files are also in the excel table:
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx
#sheet = oncokb_b_m_g_omim_assocn

#the above 2 files have to be trimmed to include only those genes that are in the
#1186 set; 

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists

#av have been downloaded from omim for the 485 oncokb genes (there are only 457 out of 485 av 
#files because, for the remaining genes, omim does not provide an av table); av tables have also 
#to be downloaded for the remaining 306 blair_mel genes;  

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists ;  

#FOR THE NEWLY DONE CANCERS (i.e., hnsc, gbm, luad, skcm, laml) THE FOLLOWING MAY HAVE TO BE DONE;
#this is because, in the original /scratch/prasannalab/cancers_in_detail/gbm/gbm_drivers.txt
#file, after gene name, a space has been introduced; i.e., "ABL1 " instead of just "ABL1"
cp /scratch/prasannalab/cancers_in_detail/gbm/gbm_drivers.txt gbm_temp_drivers.txt
vi gbm_temp_drivers.txt
#:1,$s/ \t/\t/
#:wq

#to identify the subset of genes with driver mutations in gbm; decided to cp and re-use brca 
#prep file, rather than create a new prep file for gbm;  
cp prep_hnsc_485onco_diseasegene_dri.sh prep_gbm_485onco_diseasegene_dri.sh
vi prep_gbm_485onco_diseasegene_dri.sh
#:1,$s/hnsc/gbm/g
#:wq
sh prep_gbm_485onco_diseasegene_dri.sh > gbm_drivers_for_ogenes_with_omimdiseases.txt
#i.e., even though there are only 457 av files for the set of 485 oncokb genes associated with omim 
#diseases, the above prep file extracts gbm drivers using all 485 genes; 

#note: no av table is available for foll 28 genes;
grep "no av" /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/downloadnotes_remaining296_ogenes_with_omimdiseases.txt /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/genes_downloaded_from_omim.txt
#wc -l = 28 
#FOXO1  ; PGR  ; ACSL6  ; ASPSCR1 ; ATIC ; BCL2 ; BCR ; CBFB ; CEP43 ; CRTC1 ; DEK ; 
#LMO2 ; LYL1 ; MAML2 ; MIB1 ; MYB ; NR4A3 ; NRG1 ; NUMA1 ; PICALM ; PML ; PRCC ; RANBP2 ; 
#SF3B1 ; SH3GL1 ; TAF15 ; TAL1 ; TEC ; 

#foll cmd gives list of genes in above file; i.e., gbm genes associated with omim diseases; 
awk -F"\t" '{print $1}' gbm_drivers_for_ogenes_with_omimdiseases.txt | sort | uniq > gbm_tmplst1.sh
#wc -l gbm_tmplst1.sh = 99  there are 99 oncokb genes in gbm that are associated with omim diseases;
#turning gbm_tmplst1.sh to a cmd file;
vi gbm_tmplst1.sh
:1,$s/^/grep "\\b/
:1,$s/$/\\b" 485_ogenes_with_omimdiseases.txt/
:wq
sh gbm_tmplst1.sh > gbm_tmplst1out.txt
#wc -l gbm_tmplst1out.txt = 99
#gbm_tmplst1out.txt lists the 99 hnsc genes whose allelic variants files from omim would be needed; 
#note: the 28 genes for which no av file is available ARE INCLUDED in this file (i.e., in 
#485_ogenes_with_omimdiseases.txt); 

#vi /scratch/prasannalab/cancers_in_detail/kirc/kirc_drivers.txt
#In the NEWLY DONE CANCERS (hnsc, gbm, luad, skcm, laml), USE FOLL cmd;
vi gbm_temp_drivers.txt
#/\t

#Useful cols;
#$1 = gene name; $6 = Protein Change; $7 = Annotation; $8 = Functional Impact; $9 = Mutation Type; 
#$10 = Variant Type; $11 = Copy #; $16 = Chromosome; $17 = Start Pos; 
#$18 = End Pos; $19 = Ref; $20 = Var; $22 = HGVSc; $32 = ClinVar; $33 = dbSNP; 

#ENST informn is important; it is in the HGVSc col, or $22;

#awk -F"\t" '{IFS=OFS="\t"} {print $1,$6,$7,$8,$9,$10,$11,$16,$17,$18,$19,$20,$22,$32,$33}' gbm_drivers_for_ogenes_with_omimdiseases.txt | cut -f1,1 | uniq
#wc -l = 99

#awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6,$16,$17,$18,$19,$20,$9,$10,$11,$32,$33,$7,$8}' gbm_drivers_for_ogenes_with_omimdiseases.txt 
#wc -l = 713

awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' gbm_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq -c 
#wc -l = 526
#wc -l gbm_drivers_for_ogenes_with_omimdiseases.txt = 713 ; thus, sort and uniq reduces 
#the number of mutns; 

awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' gbm_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > gbm_uniq_drivers_for_ogenes_with_omdis.txt 
#there are 526 unique mutations in 99 gbm driver genes; the 99 genes are
#associated with omim diseases, and are listed in gbm_tmplst1out.txt; 

#ClinVar
#$1 = AlleleID; $3 = name of variant with this AlleleID; $10 = RS# (dbSNP); $12 = RCVaccession
#$17 = Assembly
awk -F"\t" '{print $1, $3, $7, $10, $12, $17}' variant_summary.txt | more


#$2 below contains the important ENST informn; the informn comes from the HGVSc col, or $22, in: 
#gbm_drivers_for_ogenes_with_omimdiseases.txt
awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' gbm_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#32   i.e., there are 32 mutations without ENST Id; e.g.s listed below; thankfully, all 32 mutns
#are fusions, and do not have an ENST Id in the tsv file downloaded from cbio; for these, $2 or 
#ENST col is empty; 
####description does not apply to gbm; most of the mutations listed
####below are fusions and genuinely do not have an ENST Id in the tsv file downloaded from cbio ;
####for these, $2 or ENST col is empty;
####however, below, for HLA-A, a decimal number was appearing as $2; went back to file:
####hnsc_drivers_for_ogenes_with_omimdiseases.txt , and found that the col:
####"OncoKB: Likely Oncogenic, ...." is missing in the file I downloaded from cbio; so, went back to
####cbio and downloaded the file again for hnsc; found that this "OncoKB: Likely Oncogenic, ...."
####col is now (irritatingly) present! as ENST is only being used in this part of the project,
####decided NOT to start all over again, by going back to cbio; instead,
####decided to MANUALLY EDIT the file: hnsc_drivers_for_ogenes_with_omimdiseases.txt;

BMPR1A          BMPR1A-LIPA Fusion
BRAF            KLHL7-BRAF Fusion
CDKN2A          CDKN2A-FAM124A Fusion
CDKN2A          DMXL2-CDKN2A Fusion
CUX1            CUX1-DGKB Fusion
EGFR            EGFR-SEPTIN14 Fusion
ERCC2           ZNF772-ERCC2 Fusion
FGFR3           FGFR3-AMBRA1 Fusion

####not executed for gbm; 
####MANUALLY EDITING hnsc_drivers_for_ogenes_with_omimdiseases.txt to introduce correct HLA-A lines;
####uploaded the new HLA-A.tsv file (called HLA_A_new_hnsc.tsv in unix server, but HLA_A_new.tsv in windows) 
####to pwd; 
####prepared HLA_A_new2_hnsc.tsv ;
awk -F"\t" '{print "HLA-A\t" $0}' HLA_A_new_hnsc.tsv > HLA_A_new2_hnsc.tsv 
####edited the hnsc_drivers_for_ogenes_with_omimdiseases.txt file, went to the position where HLA-A lines 
####are and introduced table2.tsv
####in place of the old HLA-A lines;
vi hnsc_drivers_for_ogenes_with_omimdiseases.txt
/HLA-A
i, esc, !!, cat table2.tsv

####below, re-ran cmd to get the hnsc_uniq_drivers_for_ogenes_with_omdis.txt file; 
awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' hnsc_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > hnsc_uniq_drivers_for_ogenes_with_omdis.txt 

####reran above cmd to check if, for HLA-A, decimal number goes away from $2;
awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' hnsc_uniq_drivers_for_ogenes_with_omdis.txt
####No HLA-A lines occur! 
####note: the ENST Ids differ between old HLA-A.tsv file and new HLA_A_new.tsv file;   
####not executed for gbm ends here; 

awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' gbm_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#32    32 fusions
awk -F"\t" '{IFS=OFS="\t"} ($2 ~ /:/){print}' gbm_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#494
wc -l gbm_uniq_drivers_for_ogenes_with_omdis.txt
#526    494 + 32 = 526


#Preparing input file for perl program; 
#getting the set of 526 unique mutns, and removing fusions from the list; 
awk -F"\t" '{IFS=OFS="\t"}{print $1,$22,$6,$32,$7}' gbm_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > tmp1.txt
#wc -l tmp1.txt = 526 ;
awk -F"\t" '{IFS=OFS="\t"}($2 ~ /:/){print}' tmp1.txt > tmp2.txt
#wc -l tmp2.txt = 494 ;
#edited tmp2.txt to replace ; with \t, to retain only oncoKB assessment;
vi tmp2.txt  
#:1,$s/;/\t/
#:wq
awk -F"\t" '{IFS=OFS="\t"}{print $1,$2,$3,$4,$5}' tmp2.txt > tmp3.txt
#wc -l tmp3.txt = 494 ;
#a header line is required; took the line from foll file;
#/scratch/prasannalab/luad_drivr_mutns/infil_mutns808_assessmt_cv_oncokb.txt
#the header line is the foll:
#Gene    HGVSc   Protein Change  ClinVar Annotation
awk -F"\t" '(NR==1)' /scratch/prasannalab/luad_drivr_mutns/infil_mutns808_assessmt_cv_oncokb.txt > tmp4.txt
cat tmp4.txt tmp3.txt > infil_gbm_mutns_cv_oncokbannotn.txt
rm tmp1.txt tmp2.txt tmp3.txt tmp4.txt

#Running perl program, srch_cbiomutns_in_clinvar.pl; took about 6 mins for the job to complete;
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists

nohup perl /scratch/prasannalab/luad_drivr_mutns/srch_cbiomutns_in_clinvar.pl infil_gbm_mutns_cv_oncokbannotn.txt variant_summary_GRCh37.txt outfil_gbm_cbio_clinvar.txt &

awk -F"\t" '{IFS=OFS="\t"}{print NF}' outfil_gbm_cbio_clinvar.txt | sort | uniq -c
#  261 12  (for 261 - 1 header = 260 mutns, clinvar, dbsnp annotations obtained)
#  234  6  (for 234 mutns, clinvar and dbsnp annotations are not obtained; i.e., these mutns are obsvd only in cbio)

#header in outfil_gbm_cbio_clinvar.txt
# 1     2      3               4       5            6         7     8     9           10                   11           12
#Gene  HGVSc  Protein Change  ClinVar Annotation  #AlleleID  Type  Name  GeneSymbol  ClinicalSignificance  RS# (dbSNP)  RCVaccession
#$1, $9, $2, $3, $8, $7, $11, $12, $6, $4, $10, $5;
awk -F"\t" '{IFS=OFS="\t"}{print $1, $9, $2, $3, $8, $7, $11, $12, $6, $4, $10, $5}' outfil_gbm_cbio_clinvar.txt > cols_rearranged_cbio_clinvar_gbm.txt

#my impression - clinvar and dbsnp store mutations which are observed in 1% of population
#cbio mutations are too small in number to be population based mutations; i.e., they 
#are disease causing mutations, that are rare and not observed in a population; 
#thus many mutations in cbio will not be found in dbsnp and clinvar;

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists
awk -F"\t" '{IFS=OFS="\t"}(NR>1)&&(NF==12){print $0}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/outfil_gbm_cbio_clinvar.txt 
#wc -l = 260;  thus, for gbm, there are 260 cbio mutns out of 494 with rs and cv ids; 
awk -F"\t" '{IFS=OFS="\t"}(NF==12){print $0}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/outfil_gbm_cbio_clinvar.txt > /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/gbm_260cbio_mutns_with_rs_cv_ids.txt 

#the next step is to see which of the 260 gbm cbio mutns are in 4589 omim set; 
#cbio: $12 = clinvar accession; multiple entries per line; $11, which gives rs ID, contains one entry 
#per line, but some entries maybe -1, meaning rs ID is missing; 
#omim: $5 = SNP; more than one entries per line can occur; some lines can be blank; $7 = clinvar ID; 
#more than one entries can occur per line; some lines can be blank;

awk -F"\t" '{IFS=OFS="\t"}{print $11, $12}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/gbm_260cbio_mutns_with_rs_cv_ids.txt | more
#RS# (dbSNP)     RCVaccession
#776240891       RCV000532198|RCV000574374
#387906849       RCV000023240|RCV001027030
#-1      RCV002025871
#876659613       RCV002234805
#-1      RCV001972712

awk -F"\t" '{IFS=OFS="\t"}{print $5, $7}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/omim_all_av_onco457.txt | more 
#SNP     ClinVar
#rs786205109     RCV000019398
#rs80051519      RCV000019399
#        RCV000019400
#rs786205110     RCV000019401
#        RCV000019402
#        RCV000019403
#rs121434538     RCV000019404,RCV001851942
#        RCV000019405
#rs1555760738    RCV000083256,RCV000083257

#running perl program, identifying_mutns_common_to_omim_and_clinv.pl
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists
perl /scratch/prasannalab/luad_drivr_mutns/identifying_mutns_common_to_omim_and_clinv.pl /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/gbm_260cbio_mutns_with_rs_cv_ids.txt /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/omim_all_av_onco457.txt gbm_cbio260_rs_mapped_to_omim.txt gbm_cbio260_clinv_mapped_to_omim.txt
uniq gbm_cbio260_clinv_mapped_to_omim.txt > gbm_cbio260_clinv_mapped_to_omim_uniq.txt
#file to be used is gbm_cbio260_clinv_mapped_to_omim_uniq.txt; this is for the foll reason:
#a mutn (e.g., APC R2204*) may occur once in the input file (gbm_260cbio_mutns_with_rs_cv_ids.txt), 
#but may be associated with multiple RCV identifiers (2 identifiers for APC R2204*); hence in the output file 
#(gbm_cbio260_clinv_mapped_to_omim.txt) the mutn (APC R2204*) is repeated as many times as there are RCV
#identifiers (2 times for APC R2204*); hence, to remove repeating mutn lines arising due to multiple RCV 
#identifiers, the uniq command has to be used;

wc -l gbm_260cbio_mutns_with_rs_cv_ids.txt gbm_cbio260_rs_mapped_to_omim.txt gbm_cbio260_clinv_mapped_to_omim.txt gbm_cbio260_clinv_mapped_to_omim_uniq.txt
#  261 (261 - 1 header = 260) gbm_260cbio_mutns_with_rs_cv_ids.txt         (input file)
#   54 (54 - 1 header = 53) gbm_cbio260_rs_mapped_to_omim.txt            (output file)
#  648 (648 - 1 header = 647) gbm_cbio260_clinv_mapped_to_omim.txt         (output file)
#  127 (127 - 1 header = 126) gbm_cbio260_clinv_mapped_to_omim_uniq.txt    (output file)


#did another sort and uniq -c on output file, gbm_cbio260_clinv_mapped_to_omim_uniq.txt ;  
#this was done to club together identical mutations that might have been missed by above uniq cmd;
sort gbm_cbio260_clinv_mapped_to_omim_uniq.txt | uniq -c > gbm_cbio260_clinv_mapped_to_omim_sortuniqc.txt 
#wc -l gbm_cbio260_clinv_mapped_to_omim_sortuniqc.txt = 39 (39-1 header = 38)
#thus 126 from the *_uniq.txt file has reduced to 38 in the *_sortuniqc.txt file;

#edited the file to bring header line to top of file, and to remove the count for header line;
vi gbm_cbio260_clinv_mapped_to_omim_sortuniqc.txt
#this file gives count of number of times each unique mutation repeats; 

awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' gbm_cbio260_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 != $6)' 
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' gbm_cbio260_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 == $6)' | grep "FGFR3"
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' gbm_cbio260_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 == $6)' | grep "ENST00000260795.2:c.1138G>A"
#for gbm, in all 13 entries, $5=$6; 

###NOTE: below, I am using the *_uniq.txt file, NOT *_sortuniqc.txt file; this 
###is to get a proper count of uniq mutations; using *_sortuniqc.txt file below to get the final file gave some 
###duplicate mutations; hence, decided to use the *_uniq.txt file below to get the final file;
###however, using the *_sortuniqc.txt file ABOVE is helpful because the lists to examine are shorter;  
###the foll cmds may have to be customised in different cancers to include mutns you think should be included;

#for gbm, foll first two cmds sufficient to generate the output file; 
#in gbm, two mutns (1 KRAS and 1 PIK3CA) have mismatched ids; on inspection it seemed that both mutns 
#could be included, because both mutns have been encountered and included before; 
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' gbm_cbio260_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 ~ /Gene/){print}($1 !~ /Gene/)&&($5 ~ $4)' > junk
#wc -l = 81 - 1 = 80
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' gbm_cbio260_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)' >> junk
#wc -l = 46  KRAS mutn is repeated 20 times, and PIK3CA mutn is repeated 26 times;

##foll 2 not needed for gbm;
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' gbm_cbio260_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)&&($5 ~ /^$/)' >> junk
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' gbm_cbio260_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)' | grep "ENST00000263967.3:c.1634A>C" >> junk

sort junk | uniq -c > junk2
#edit file junk2 to move header line to top; remove count for header line; add a col heading called "n(mutns)\t"
vi junk2
sed -e 's/^[ ]*//' -e '2,$s/ /\t/' junk2 > gbm_cbio_omim_matched_mutns.txt
#wc -l gbm_cbio_omim_matched_mutns.txt = 39 (38 uniq mutns + 1 header line = 39)

#Have to introduce the correct counts for each mutation in gbm_cbio_omim_matched_mutns.txt from
#gbm_drivers_for_ogenes_with_omimdiseases.txt or gbm_temp_drivers.txt ; 
#have to turn gbm_cbio_omim_matched_mutns.txt into a batch file which searches for each mutn in the
#above 2 driver files;
#have to create a batch file with cmds of the foll kind; 
#awk -F"\t" '{IFS=OFS="\t"}($1 ~ /^BAP1$/) && ($6 ~ /^Q267\*$/) && ($22 ~ /^ENST00000460680.1:c.799C>T$/)' gbm_drivers_for_ogenes_with_omimdiseases.txt
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $2, $3, $10}' gbm_cbio_omim_matched_mutns.txt | uniq > prep_gbm_noccs_cbio_omim_matched_mutns.sh 
vi prep_gbm_noccs_cbio_omim_matched_mutns.sh
#:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}(\$1 \~ \/\^/
#:1,$s/\t/    /
#:1,$s/    /\$\/) \&\& (\$6 \~ \/^/
#:1,$s/\t/    /
#:1,$s/    /\$\/) \&\& (\$22 \~ \/\^/
#:1,$s/$/\$\/)' gbm_drivers_for_ogenes_with_omimdiseases.txt/
#:1,$s/\*/\\*/
#:wq
cp prep_gbm_noccs_cbio_omim_matched_mutns.sh tst1.sh
vi tst1.sh
####:1,$s/gbm_drivers_for_ogenes_with_omimdiseases.txt/\/scratch\/prasannalab\/cancers_in_detail\/gbm\/gbm_drivers.txt/
#####for gbm, EDIT ABOVE MODIFIED TO THE ONE BELOW 
#:1,$s/gbm_drivers_for_ogenes_with_omimdiseases.txt/gbm_temp_drivers.txt/
#:wq
sh tst1.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | more
#the output from tst1.sh should be same as output from cmd below: 
sh prep_gbm_noccs_cbio_omim_matched_mutns.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | more

#if outputs are same, use cmds below to get final file;
echo "" > scratch.txt
sh prep_gbm_noccs_cbio_omim_matched_mutns.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | sed -e 's/^[ ]*//' -e '1,$s/ /\t/' >> scratch.txt
#Use foll cmd to MANUALLY MAKE DUPLICATE LINES in scratch.txt of those mutations which occur multiple 
#times in gbm_cbio_omim_matched_mutns.txt; to identify the duplicate mutations in 
#gbm_cbio_omim_matched_mutns.txt, use foll cmd: (in gbm, only FGFR3   G380R   ENST00000260795.2:c.1138G>A 
#had to be duplicated) 
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $2, $3, $10}' gbm_cbio_omim_matched_mutns.txt | uniq -c | more 
vi scratch.txt
#use paste cmd below to make sure the same gene and mutn lines are being pasted;
paste -d"\t" scratch.txt gbm_cbio_omim_matched_mutns.txt | more
paste -d"\t" scratch.txt gbm_cbio_omim_matched_mutns.txt | awk -F"\t" '{IFS=OFS="\t"}{print $1,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}' > gbm_noccs_cbio_omim_matched_mutns.txt

###taking foll file unix file to xl: 
#/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/gbm_noccs_cbio_omim_matched_mutns.txt
#downloaded to windows area: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\gbm\gbm_noccs_cbio_omim_matched_mutns.txt
#xl file = D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx
#sheet = gbm_cbio_omim_mutns ;

-------------------------------------------------------------------

#LUAD

#Comparing tcga mutations collected for luad, for oncokb genes, with the mutations catalogued 
#for the genes in OMIM; the hnsc set of lines above have been copied below, and have been 
#appropriately modified;

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim

#Driver genes and mutations for luad, obtained from cbioportal, are in the foll file; 
/scratch/prasannalab/cancers_in_detail/luad/luad_drivers.txt

grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/luad/luad_drivers.txt | wc -l
#1663 drivers

#https://askubuntu.com/questions/592273/count-the-number-of-unique-values-based-on-two-columns-in-a-spreadsheet
#Below, $1 = Gene name; $6 = "Protein Change"; i in a = loop through gene names; 
#j in a[i] = loop through "Protein Change" col associated with each gene name; 
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/luad/luad_drivers.txt | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$6]++} END {for (i in a) for (j in a[i]) print a[i][j], i, j}' | more
#wc -l = 1258

#Below, $32 = "ClinVar"; $6 = "Protein Change";  
#$32 is replaced by an integer: if mutn is documented in clinvar, $32 = 1; if no mention of mutn in clinvar, $32 = 0;
#grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/luad/luad_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int, $32}' | more
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/luad/luad_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int}' | more
#wc -l = 1663 lines

#foll. command seems to work; using a 3-d array (instead of the 2-d array in the gawk command above);
#$1=gene; $6="Protein Change"; $32=clinvar_as_int (which is 1 if mutn is mentioned in clinvar, 0 if it is not);
#all three can be counted together because, if a mutn repeats, the clinvar status will also repeat;
#Note: wc -l for cmd below (549) does not match wc -l for the cmd above (547);
#this is because a protein mutn can occur in several ways, and each mutn can have a different clinvar status; e.g., 
#1       PIK3CA  M1043I  0  c.3129G>C
#2       PIK3CA  M1043I  1  c.3129G>A  Pathogenic/Likely_pathogenic
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/luad/luad_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int}' | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$2][$3]++} END {for (i in a) for (j in a[i]) for (k in a[i][j]) print a[i][j][k], i, j, k}' > luad_pr_mut_clinv_count.txt
#wc -l = 1265

#Latest and most accurate version of command; here, the definition of mutation has been expanded to include
#$6 (protein change), $16 (chromosome), $17 (start pos), $18 (end pos), $19 (ref), $20 (var) in 
#/scratch/prasannalab/cancers_in_detail/luad/luad_drivers.txt; thus, mutn definition is more 
#complete and accurate, and hence the mutn counts are more accurate; above, only $2 (protein change) 
#was used to define mutn
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/luad/luad_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6 "_" $16 "_" $17 "_" $18 "_" $19 "_" $20, clinvar_as_int}' | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$2][$3]++} END {for (i in a) for (j in a[i]) for (k in a[i][j]) print a[i][j][k], i, j, k}' > luad_nt_mut_clinv_count.txt
#wc -l luad_nt_mut_clinv_count.txt = 1298

#Both files may have their uses; two mutns may be different at nucleotide level, but may be the same
#at protein level;

wc -l luad_pr_mut_clinv_count.txt luad_nt_mut_clinv_count.txt
  1265 luad_pr_mut_clinv_count.txt
  1298 luad_nt_mut_clinv_count.txt
#thus, by improving mutn definition, the number of lines in file has increased (from 1265 to 1298);
#i.e., more unique mutations, and fewer repeating mutations;

#counting no. of unique mutns (protein level and nt level mutns) in each gene
awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count){print count[var], var}}' luad_nt_mut_clinv_count.txt > luad_nt_n_uniqmutns.txt
wc -l luad_nt_n_uniqmutns.txt
262     #checking if things are ok, by counting no. of genes;

awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count){print count[var], var}}' luad_pr_mut_clinv_count.txt > luad_pr_n_uniqmutns.txt
wc -l luad_pr_n_uniqmutns.txt
262     #checking if things are ok, by counting no. of genes;

#counting no. of repeating mutns in each gene;
awk -F"\t" '{IFS=OFS="\t"} ($1>1){print $0}' luad_nt_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count) print count[var], var}' > luad_nt_n_repeatmutns.txt
wc -l luad_nt_n_repeatmutns.txt
32

awk -F"\t" '{IFS=OFS="\t"} ($1>1){print $0}' luad_pr_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count) print count[var], var}' > luad_pr_n_repeatmutns.txt  
wc -l luad_pr_n_repeatmutns.txt
38

#counting no. of protein mutns, and nt mutns mentioned in clinvar in each gene;
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' luad_pr_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {print $2, $3, $4}' | awk -F"\t" '{IFS=OFS="\t"} {count[$1]++} END {for (var in count) print count[var], var}' > luad_pr_n_clinmutns.txt
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' luad_nt_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {print $2, $3, $4}' | awk -F"\t" '{IFS=OFS="\t"} {count[$1]++} END {for (var in count) print count[var], var}' > luad_nt_n_clinmutns.txt

#Total no. of genes = 262;

#counting total no. of unique protein mutns, and total no. of unique nt mutns;  
awk -F"\t" '{nuniqmutns += $1}END {print nuniqmutns}' luad_pr_n_uniqmutns.txt
1265     #this is equal to no. of lines in file luad_pr_mut_clinv_count.txt 
awk -F"\t" '{nuniqmutns += $1}END {print nuniqmutns}' luad_nt_n_uniqmutns.txt
1298     #this is equal to no. of lines in file luad_nt_mut_clinv_count.txt 

#counting total no. of repeating protein mutns, and total no. of repeating nt mutns;  
awk -F"\t" '{nrepmutns += $1}END {print nrepmutns}' luad_pr_n_repeatmutns.txt
140
awk -F"\t" '{nrepmutns += $1}END {print nrepmutns}' luad_nt_n_repeatmutns.txt
129

#Thus, above, the 6 files listed below have been created; 
#luad_pr_n_uniqmutns.txt; luad_pr_n_repeatmutns.txt; luad_pr_n_clinmutns.txt
#luad_nt_n_uniqmutns.txt; luad_nt_n_repeatmutns.txt; luad_nt_n_clinmutns.txt

#counting total no. of protein mutns mentioned in clinvar, and total no. of nt mutns mentioned in clinvar;  
#use foll. two commands OR the two below them;
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' luad_pr_mut_clinv_count.txt | wc -l
338
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' luad_nt_mut_clinv_count.txt | wc -l
353   

awk -F"\t" '{nclinmutns += $1}END {print nclinmutns}' luad_pr_n_clinmutns.txt
338
awk -F"\t" '{nclinmutns += $1}END {print nclinmutns}' luad_nt_n_clinmutns.txt
353 

#Foll cmd gives total no. of mutations for each gene;
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/luad/luad_drivers.txt | gawk -F"\t" '{IFS=OFS="\t"}{a[$1]++} END {for (i in a) print a[i], i}' > luad_totalmutns_per_gene.txt

#used the above file to create the foll seven cmd files; 
#the basic cmd in the cmd files is:
#echo -n -e "HLA-C\t\c" ; grep -w "HLA-C" luad_totalmutns_per_gene.txt ; echo -n -e ""

awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" luad_totalmutns_per_gene.txt ; echo -n -e \"\\n\""}' luad_totalmutns_per_gene.txt > luad_cmdlite_totalmutns_pergene.sh

awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" luad_pr_n_clinmutns.txt ; echo -n -e \"\\n\""}' luad_totalmutns_per_gene.txt > luad_cmdlite_pr_clin.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" luad_pr_n_repeatmutns.txt ; echo -n -e \"\\n\""}' luad_totalmutns_per_gene.txt > luad_cmdlite_pr_rep.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" luad_pr_n_uniqmutns.txt ; echo -n -e \"\\n\""}' luad_totalmutns_per_gene.txt > luad_cmdlite_pr_uniq.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" luad_nt_n_clinmutns.txt ; echo -n -e \"\\n\""}' luad_totalmutns_per_gene.txt > luad_cmdlite_nt_clin.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" luad_nt_n_repeatmutns.txt ; echo -n -e \"\\n\""}' luad_totalmutns_per_gene.txt > luad_cmdlite_nt_rep.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" luad_nt_n_uniqmutns.txt ; echo -n -e \"\\n\""}' luad_totalmutns_per_gene.txt > luad_cmdlite_nt_uniq.sh

sh luad_cmdlite_totalmutns_pergene.sh | grep -v ^$ > luad_countoftotalmutns.txt

sh luad_cmdlite_pr_clin.sh | grep -v ^$ > luad_pr_countofclinmutns.txt
sh luad_cmdlite_pr_rep.sh | grep -v ^$ > luad_pr_countofrepmutns.txt
sh luad_cmdlite_pr_uniq.sh | grep -v ^$ > luad_pr_countofuniqmutns.txt
sh luad_cmdlite_nt_clin.sh | grep -v ^$ > luad_nt_countofclinmutns.txt
sh luad_cmdlite_nt_rep.sh | grep -v ^$ > luad_nt_countofrepmutns.txt
sh luad_cmdlite_nt_uniq.sh | grep -v ^$ > luad_nt_countofuniqmutns.txt

#for protein mutns;
#Total no. of unique mutns in 262 genes = 1265
#Total no. of repeating mutns in 262 genes = 140
#Total no. of mutns mentioned in clinvar in 262 genes = 338

#for nt mutns;
#Total no. of unique mutns in 262 genes = 1298
#Total no. of repeating mutns in 262 genes = 129
#Total no. of mutns mentioned in clinvar in 262 genes = 353

#Downloaded the 6 files created above and listed below, to windows area:
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\HNSC
#luad_countoftotalmutns.txt    
#luad_pr_countofuniqmutns.txt  luad_pr_countofclinmutns.txt
#luad_pr_countofrepmutns.txt  luad_nt_countofuniqmutns.txt  
#luad_nt_countofclinmutns.txt  luad_nt_countofrepmutns.txt   

#imported the above files to excel; 
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx
#sheet = luad_counting_dri_genes

#unix tip: in terminal how to erase typed command quickly:
#you can cancel current command with CTRL+c; you can clear command to the 
#beginning with CTRL+u; to clear line after the cursor press CTRL+k;
            

#Working with tcga-cbio and omim mutations;

#Reactome pway informn is available for 862 oncokb + 324 blair_mel = 1186 genes; 
#plan to work with cbio and omim mutations of only these genes; 
#the list of 1186 genes is in the file:
#/scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/lst_1186_oncokb_blair_mel_genes.txt ;

#omim diseases for ALL oncokb genes (1066) are in the file: 
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/genes_oncokb_order_omim_diseases.txt

#omim diseases for blair-mel-genes-not-in-oncokb are in file:
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/blair_mel_genes_not_in_oncokb_to_omim/omim_diseases_for_b_m_g_not_in_oncokb.txt

#these files are also in the excel table:
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx
#sheet = oncokb_b_m_g_omim_assocn

#the above 2 files have to be trimmed to include only those genes that are in the
#1186 set; 

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists

#av have been downloaded from omim for the 485 oncokb genes (there are only 457 out of 485 av 
#files because, for the remaining genes, omim does not provide an av table); av tables have also 
#to be downloaded for the remaining 306 blair_mel genes;  

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists ;  

#FOR THE NEWLY DONE CANCERS (i.e., hnsc, gbm, luad, skcm, laml) THE FOLLOWING MAY HAVE TO BE DONE;
#this is because, in the original /scratch/prasannalab/cancers_in_detail/luad/luad_drivers.txt
#file, after gene name, a space has been introduced; i.e., "ABL1 " instead of just "ABL1"
cp /scratch/prasannalab/cancers_in_detail/luad/luad_drivers.txt luad_temp_drivers.txt
vi luad_temp_drivers.txt
#:1,$s/ \t/\t/
#:wq

#to identify the subset of genes with driver mutations in luad; decided to cp and re-use gbm 
#prep file, rather than create a new prep file for luad;  
cp prep_gbm_485onco_diseasegene_dri.sh prep_luad_485onco_diseasegene_dri.sh
vi prep_luad_485onco_diseasegene_dri.sh
#:1,$s/gbm/luad/g
#:wq
sh prep_luad_485onco_diseasegene_dri.sh > luad_drivers_for_ogenes_with_omimdiseases.txt
#i.e., even though there are only 457 av files for the set of 485 oncokb genes associated with omim 
#diseases, the above prep file extracts luad drivers using all 485 genes; 

#note: no av table is available for foll 28 genes;
grep "no av" /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/downloadnotes_remaining296_ogenes_with_omimdiseases.txt /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/genes_downloaded_from_omim.txt
#wc -l = 28 
#FOXO1  ; PGR  ; ACSL6  ; ASPSCR1 ; ATIC ; BCL2 ; BCR ; CBFB ; CEP43 ; CRTC1 ; DEK ; 
#LMO2 ; LYL1 ; MAML2 ; MIB1 ; MYB ; NR4A3 ; NRG1 ; NUMA1 ; PICALM ; PML ; PRCC ; RANBP2 ; 
#SF3B1 ; SH3GL1 ; TAF15 ; TAL1 ; TEC ; 

#foll cmd gives list of genes in above file; i.e., luad genes associated with omim diseases; 
awk -F"\t" '{print $1}' luad_drivers_for_ogenes_with_omimdiseases.txt | sort | uniq > luad_tmplst1.sh
#wc -l luad_tmplst1.sh = 168  there are 168 oncokb genes in luad that are associated with omim diseases;
#turning luad_tmplst1.sh to a cmd file;
vi luad_tmplst1.sh
:1,$s/^/grep "\\b/
:1,$s/$/\\b" 485_ogenes_with_omimdiseases.txt/
:wq
sh luad_tmplst1.sh > luad_tmplst1out.txt
#wc -l luad_tmplst1out.txt = 168
#luad_tmplst1out.txt lists the 168 hnsc genes whose allelic variants files from omim would be needed; 
#note: the 28 genes for which no av file is available ARE INCLUDED in this file (i.e., in 
#485_ogenes_with_omimdiseases.txt); 

#vi /scratch/prasannalab/cancers_in_detail/kirc/kirc_drivers.txt
#In the NEWLY DONE CANCERS (hnsc, gbm, luad, skcm, laml), USE FOLL cmd;
vi luad_temp_drivers.txt
#/\t

#Useful cols;
#$1 = gene name; $6 = Protein Change; $7 = Annotation; $8 = Functional Impact; $9 = Mutation Type; 
#$10 = Variant Type; $11 = Copy #; $16 = Chromosome; $17 = Start Pos; 
#$18 = End Pos; $19 = Ref; $20 = Var; $22 = HGVSc; $32 = ClinVar; $33 = dbSNP; 

#ENST informn is important; it is in the HGVSc col, or $22;

#awk -F"\t" '{IFS=OFS="\t"} {print $1,$6,$7,$8,$9,$10,$11,$16,$17,$18,$19,$20,$22,$32,$33}' luad_drivers_for_ogenes_with_omimdiseases.txt | cut -f1,1 | uniq
#wc -l = 168

#awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6,$16,$17,$18,$19,$20,$9,$10,$11,$32,$33,$7,$8}' luad_drivers_for_ogenes_with_omimdiseases.txt 
#wc -l = 1313

awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' luad_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq -c 
#wc -l = 969
#wc -l luad_drivers_for_ogenes_with_omimdiseases.txt = 1313 ; thus, sort and uniq reduces 
#the number of mutns; 

awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' luad_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > luad_uniq_drivers_for_ogenes_with_omdis.txt 
#there are 969 unique mutations in 168 luad driver genes; the 168 genes are
#associated with omim diseases, and are listed in luad_tmplst1out.txt; 

#ClinVar
#$1 = AlleleID; $3 = name of variant with this AlleleID; $10 = RS# (dbSNP); $12 = RCVaccession
#$17 = Assembly
awk -F"\t" '{print $1, $3, $7, $10, $12, $17}' variant_summary.txt | more


#$2 below contains the important ENST informn; the informn comes from the HGVSc col, or $22, in: 
#luad_drivers_for_ogenes_with_omimdiseases.txt
awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' luad_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#89   i.e., there are 89 mutations without ENST Id; e.g.s listed below; 

####description not true for luad: thankfully, all 32 mutns
####are fusions, and do not have an ENST Id in the tsv file downloaded from cbio; for these, $2 or 
####ENST col is empty; 

#most of the mutations listed
#below are fusions and genuinely do not have an ENST Id in the tsv file downloaded from cbio ;
#for these, $2 or ENST col is empty;
#however, below, for HLA-A, a decimal number was appearing as $2; went back to file:
#luad_drivers_for_ogenes_with_omimdiseases.txt , and found that the col:
#"OncoKB: Likely Oncogenic, ...." is missing in the file I downloaded from cbio; so, went back to
#cbio and downloaded the file again for luad; found that this "OncoKB: Likely Oncogenic, ...."
#col is now (irritatingly) present! as ENST is only being used in this part of the project,
#decided NOT to start all over again, by going back to cbio; instead,
#decided to MANUALLY EDIT the file: luad_drivers_for_ogenes_with_omimdiseases.txt;

EZH2            GALNT11-EZH2 Fusion
FANCA           FANCA-CACNA2D4 Fusion
FOXO1           SMARCA4-FOXO1 Fusion
HLA-A   0.16    W157*
HLA-A   0.21    Q165*
IRF4            AP3D1-IRF4 Fusion
JAK2            JAK2-CSTF3 Fusion
KDM6A           KDM6A-DCAF7 Fusion

#####not executed for gbm; EXECUTED FOR luad
#MANUALLY EDITING luad_drivers_for_ogenes_with_omimdiseases.txt to introduce correct HLA-A lines;
#uploaded the new HLA-A.tsv file (called HLA_A_new_luad.tsv in unix server, but HLA_A_new.tsv in windows) 
#to pwd; 
#prepared HLA_A_new2_luad.tsv ;
awk -F"\t" '{print "HLA-A\t" $0}' HLA_A_new_luad.tsv > HLA_A_new2_luad.tsv 
#edited the luad_drivers_for_ogenes_with_omimdiseases.txt file, went to the position where HLA-A lines 
#are and introduced table2.tsv
#in place of the old HLA-A lines;
vi luad_drivers_for_ogenes_with_omimdiseases.txt
/HLA-A
i, esc, !!, cat table2.tsv

#below, re-ran cmd to get the luad_uniq_drivers_for_ogenes_with_omdis.txt file; 
awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' luad_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > luad_uniq_drivers_for_ogenes_with_omdis.txt 

#reran above cmd to check if, for HLA-A, decimal number goes away from $2;
awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' luad_uniq_drivers_for_ogenes_with_omdis.txt
#No HLA-A lines occur! 
#note: the ENST Ids differ between old HLA-A.tsv file and new HLA_A_new.tsv file;   
#####not executed for gbm ends here; 

awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' luad_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#87    87 fusions
awk -F"\t" '{IFS=OFS="\t"} ($2 ~ /:/){print}' luad_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#882
wc -l luad_uniq_drivers_for_ogenes_with_omdis.txt
#969    882 + 87 = 969


#Preparing input file for perl program; 
#getting the set of 526 unique mutns, and removing fusions from the list; 
awk -F"\t" '{IFS=OFS="\t"}{print $1,$22,$6,$32,$7}' luad_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > tmp1.txt
#wc -l tmp1.txt = 969 ;
awk -F"\t" '{IFS=OFS="\t"}($2 ~ /:/){print}' tmp1.txt > tmp2.txt
#wc -l tmp2.txt = 882 ;
#edited tmp2.txt to replace ; with \t, to retain only oncoKB assessment;
vi tmp2.txt  
#:1,$s/;/\t/
#:wq
awk -F"\t" '{IFS=OFS="\t"}{print $1,$2,$3,$4,$5}' tmp2.txt > tmp3.txt
#wc -l tmp3.txt = 882 ;
#a header line is required; took the line from foll file;
#/scratch/prasannalab/luad_drivr_mutns/infil_mutns808_assessmt_cv_oncokb.txt
#the header line is the foll:
#Gene    HGVSc   Protein Change  ClinVar Annotation
awk -F"\t" '(NR==1)' /scratch/prasannalab/luad_drivr_mutns/infil_mutns808_assessmt_cv_oncokb.txt > tmp4.txt
cat tmp4.txt tmp3.txt > infil_luad_mutns_cv_oncokbannotn.txt
rm tmp1.txt tmp2.txt tmp3.txt tmp4.txt

#Running perl program, srch_cbiomutns_in_clinvar.pl; took about 7 mins for the job to complete;
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists

nohup perl /scratch/prasannalab/luad_drivr_mutns/srch_cbiomutns_in_clinvar.pl infil_luad_mutns_cv_oncokbannotn.txt variant_summary_GRCh37.txt outfil_luad_cbio_clinvar.txt &

awk -F"\t" '{IFS=OFS="\t"}{print NF}' outfil_luad_cbio_clinvar.txt | sort | uniq -c
#   360 12 (for 360 - 1 header = 359 mutns, clinvar, dbsnp annotations obtained)
#   523 6  (for 523 mutns, clinvar and dbsnp annotations are not obtained; i.e., these mutns are obsvd only in cbio)


#header in outfil_luad_cbio_clinvar.txt
# 1     2      3               4       5            6         7     8     9           10                   11           12
#Gene  HGVSc  Protein Change  ClinVar Annotation  #AlleleID  Type  Name  GeneSymbol  ClinicalSignificance  RS# (dbSNP)  RCVaccession
#$1, $9, $2, $3, $8, $7, $11, $12, $6, $4, $10, $5;
awk -F"\t" '{IFS=OFS="\t"}{print $1, $9, $2, $3, $8, $7, $11, $12, $6, $4, $10, $5}' outfil_luad_cbio_clinvar.txt > cols_rearranged_cbio_clinvar_luad.txt

#my impression - clinvar and dbsnp store mutations which are observed in 1% of population
#cbio mutations are too small in number to be population based mutations; i.e., they 
#are disease causing mutations, that are rare and not observed in a population; 
#thus many mutations in cbio will not be found in dbsnp and clinvar;

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists
awk -F"\t" '{IFS=OFS="\t"}(NR>1)&&(NF==12){print $0}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/outfil_luad_cbio_clinvar.txt 
#wc -l = 359;  thus, for luad, there are 359 cbio mutns out of 523 with rs and cv ids; 
awk -F"\t" '{IFS=OFS="\t"}(NF==12){print $0}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/outfil_luad_cbio_clinvar.txt > /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/luad_359cbio_mutns_with_rs_cv_ids.txt 

#the next step is to see which of the 359 luad cbio mutns are in 4589 omim set; 
#cbio: $12 = clinvar accession; multiple entries per line; $11, which gives rs ID, contains one entry 
#per line, but some entries maybe -1, meaning rs ID is missing; 
#omim: $5 = SNP; more than one entries per line can occur; some lines can be blank; $7 = clinvar ID; 
#more than one entries can occur per line; some lines can be blank;

awk -F"\t" '{IFS=OFS="\t"}{print $11, $12}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/luad_359cbio_mutns_with_rs_cv_ids.txt | more
#RS# (dbSNP)     RCVaccession
#776240891       RCV000532198|RCV000574374
#387906849       RCV000023240|RCV001027030
#-1      RCV002025871
#876659613       RCV002234805
#-1      RCV001972712

awk -F"\t" '{IFS=OFS="\t"}{print $5, $7}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/omim_all_av_onco457.txt | more 
#SNP     ClinVar
#rs786205109     RCV000019398
#rs80051519      RCV000019399
#        RCV000019400
#rs786205110     RCV000019401
#        RCV000019402
#        RCV000019403
#rs121434538     RCV000019404,RCV001851942
#        RCV000019405
#rs1555760738    RCV000083256,RCV000083257

#running perl program, identifying_mutns_common_to_omim_and_clinv.pl
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists
perl /scratch/prasannalab/luad_drivr_mutns/identifying_mutns_common_to_omim_and_clinv.pl /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/luad_359cbio_mutns_with_rs_cv_ids.txt /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/omim_all_av_onco457.txt luad_cbio359_rs_mapped_to_omim.txt luad_cbio359_clinv_mapped_to_omim.txt
uniq luad_cbio359_clinv_mapped_to_omim.txt > luad_cbio359_clinv_mapped_to_omim_uniq.txt
#file to be used is luad_cbio359_clinv_mapped_to_omim_uniq.txt; this is for the foll reason:
#a mutn (e.g., AKT1 E17K) may occur once in the input file (luad_359cbio_mutns_with_rs_cv_ids.txt), 
#but may be associated with multiple RCV identifiers (24 identifiers for AKT1 E17K); hence in the output file 
#(luad_cbio359_clinv_mapped_to_omim.txt) the mutn (AKT1 E17K) is repeated as many times as there are RCV
#identifiers (24 times for AKT1 E17K); hence, to remove repeating mutn lines arising due to multiple RCV 
#identifiers, the uniq command has to be used;

wc -l luad_359cbio_mutns_with_rs_cv_ids.txt luad_cbio359_rs_mapped_to_omim.txt luad_cbio359_clinv_mapped_to_omim.txt luad_cbio359_clinv_mapped_to_omim_uniq.txt
#  360 (360 - 1 header = 359) luad_359cbio_mutns_with_rs_cv_ids.txt         (input file)
#  108 (108 - 1 header = 107) luad_cbio359_rs_mapped_to_omim.txt            (output file)
#  777 (777 - 1 header = 776) luad_cbio359_clinv_mapped_to_omim.txt         (output file)
#  139 (139 - 1 header = 138) luad_cbio359_clinv_mapped_to_omim_uniq.txt    (output file)


#did another sort and uniq -c on output file, luad_cbio359_clinv_mapped_to_omim_uniq.txt ;  
#this was done to club together identical mutations that might have been missed by above uniq cmd;
sort luad_cbio359_clinv_mapped_to_omim_uniq.txt | uniq -c > luad_cbio359_clinv_mapped_to_omim_sortuniqc.txt 
#wc -l luad_cbio359_clinv_mapped_to_omim_sortuniqc.txt = 61 (61-1 header = 60)
#thus 138 from the *_uniq.txt file has reduced to 60 in the *_sortuniqc.txt file;

#edited the file to bring header line to top of file, and to remove the count for header line;
vi luad_cbio359_clinv_mapped_to_omim_sortuniqc.txt
#this file gives count of number of times each unique mutation repeats; 

awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' luad_cbio359_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 != $6)' 
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' luad_cbio359_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 == $6)' | grep "CTNNB1"
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' luad_cbio359_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)' | grep "CTNNB1"
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' luad_cbio359_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 == $6)' | grep "ENST00000260795.2:c.1138G>A"
#for luad, in all 13 entries, $5=$6; 

###NOTE: below, I am using the *_uniq.txt file, NOT *_sortuniqc.txt file; this 
###is to get a proper count of uniq mutations; using *_sortuniqc.txt file below to get the final file gave some 
###duplicate mutations; hence, decided to use the *_uniq.txt file below to get the final file;
###however, using the *_sortuniqc.txt file ABOVE is helpful because the lists to examine are shorter;  
###the foll cmds may have to be customised in different cancers to include mutns you think should be included;

#for luad, foll first two cmds sufficient to generate the output file; 
#in luad, six mutns (3 CTNNB1, 2 KRAS and 1 EGFR) have mismatched ids; on inspection it seemed that all mutns 
#could be included; 
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' luad_cbio359_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 ~ /Gene/){print}($1 !~ /Gene/)&&($5 ~ $4)' > junk
#wc -l = 139 - 1 = 138
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' luad_cbio359_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)' >> junk
#wc -l = 43  

##foll 2 not needed for luad;
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' luad_cbio359_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)&&($5 ~ /^$/)' >> junk
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' luad_cbio359_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)' | grep "ENST00000263967.3:c.1634A>C" >> junk

sort junk | uniq -c > junk2
#wc -l junk2 = 61
#edit file junk2 to move header line to top; remove count for header line; add a col heading called "n(mutns)\t"
vi junk2
sed -e 's/^[ ]*//' -e '2,$s/ /\t/' junk2 > luad_cbio_omim_matched_mutns.txt
#wc -l luad_cbio_omim_matched_mutns.txt = 61 (60 uniq mutns + 1 header line = 61)

#Have to introduce the correct counts for each mutation in luad_cbio_omim_matched_mutns.txt from
#luad_drivers_for_ogenes_with_omimdiseases.txt or luad_temp_drivers.txt ; 
#have to turn luad_cbio_omim_matched_mutns.txt into a batch file which searches for each mutn in the
#above 2 driver files;
#have to create a batch file with cmds of the foll kind; 
#awk -F"\t" '{IFS=OFS="\t"}($1 ~ /^BAP1$/) && ($6 ~ /^Q267\*$/) && ($22 ~ /^ENST00000460680.1:c.799C>T$/)' luad_drivers_for_ogenes_with_omimdiseases.txt
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $2, $3, $10}' luad_cbio_omim_matched_mutns.txt | uniq > prep_luad_noccs_cbio_omim_matched_mutns.sh 
vi prep_luad_noccs_cbio_omim_matched_mutns.sh
#:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}(\$1 \~ \/\^/
#:1,$s/\t/    /
#:1,$s/    /\$\/) \&\& (\$6 \~ \/^/
#:1,$s/\t/    /
#:1,$s/    /\$\/) \&\& (\$22 \~ \/\^/
#:1,$s/$/\$\/)' luad_drivers_for_ogenes_with_omimdiseases.txt/
#:1,$s/\*/\\*/
#:wq
cp prep_luad_noccs_cbio_omim_matched_mutns.sh tst1.sh
vi tst1.sh
#####:1,$s/gbm_drivers_for_ogenes_with_omimdiseases.txt/\/scratch\/prasannalab\/cancers_in_detail\/gbm\/gbm_drivers.txt/
#####for gbm, EDIT ABOVE MODIFIED TO THE ONE BELOW 
#:1,$s/luad_drivers_for_ogenes_with_omimdiseases.txt/luad_temp_drivers.txt/
#:wq
sh tst1.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | more
#the output from tst1.sh should be same as output from cmd below: 
sh prep_luad_noccs_cbio_omim_matched_mutns.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | more

#if outputs are same, use cmds below to get final file;
echo "" > scratch.txt
sh prep_luad_noccs_cbio_omim_matched_mutns.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | sed -e 's/^[ ]*//' -e '1,$s/ /\t/' >> scratch.txt
#Use foll cmd to MANUALLY MAKE DUPLICATE LINES in scratch.txt of those mutations which occur multiple 
#times in luad_cbio_omim_matched_mutns.txt; to identify the duplicate mutations in 
#luad_cbio_omim_matched_mutns.txt, use foll cmd: (in luad, only FGFR3   G380R   ENST00000260795.2:c.1138G>A 
#had to be duplicated) 
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $2, $3, $10}' luad_cbio_omim_matched_mutns.txt | uniq -c | more 
vi scratch.txt
#use paste cmd below to make sure the same gene and mutn lines are being pasted;
paste -d"\t" scratch.txt luad_cbio_omim_matched_mutns.txt | more
paste -d"\t" scratch.txt luad_cbio_omim_matched_mutns.txt | awk -F"\t" '{IFS=OFS="\t"}{print $1,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}' > luad_noccs_cbio_omim_matched_mutns.txt

###taking foll file unix file to xl: 
#/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/luad_noccs_cbio_omim_matched_mutns.txt
#downloaded to windows area: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\luad\luad_noccs_cbio_omim_matched_mutns.txt
#xl file = D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx
#sheet = luad_cbio_omim_mutns ;

-------------------------------------------------------------------

#SKCM

#Comparing tcga mutations collected for skcm, for oncokb genes, with the mutations catalogued 
#for the genes in OMIM; the hnsc set of lines above have been copied below, and have been 
#appropriately modified;

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim

#Driver genes and mutations for skcm, obtained from cbioportal, are in the foll file; 
/scratch/prasannalab/cancers_in_detail/skcm/skcm_drivers.txt

grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/skcm/skcm_drivers.txt | wc -l
#1668 drivers

#https://askubuntu.com/questions/592273/count-the-number-of-unique-values-based-on-two-columns-in-a-spreadsheet
#Below, $1 = Gene name; $6 = "Protein Change"; i in a = loop through gene names; 
#j in a[i] = loop through "Protein Change" col associated with each gene name; 
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/skcm/skcm_drivers.txt | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$6]++} END {for (i in a) for (j in a[i]) print a[i][j], i, j}' | more
#wc -l = 1161

#Below, $32 = "ClinVar"; $6 = "Protein Change";  
#$32 is replaced by an integer: if mutn is documented in clinvar, $32 = 1; if no mention of mutn in clinvar, $32 = 0;
#grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/skcm/skcm_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int, $32}' | more
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/skcm/skcm_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int}' | more
#wc -l = 1668 lines

#foll. command seems to work; using a 3-d array (instead of the 2-d array in the gawk command above);
#$1=gene; $6="Protein Change"; $32=clinvar_as_int (which is 1 if mutn is mentioned in clinvar, 0 if it is not);
#all three can be counted together because, if a mutn repeats, the clinvar status will also repeat;
#Note: wc -l for cmd below (549) does not match wc -l for the cmd above (547);
#this is because a protein mutn can occur in several ways, and each mutn can have a different clinvar status; e.g., 
#1       PIK3CA  M1043I  0  c.3129G>C
#2       PIK3CA  M1043I  1  c.3129G>A  Pathogenic/Likely_pathogenic
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/skcm/skcm_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int}' | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$2][$3]++} END {for (i in a) for (j in a[i]) for (k in a[i][j]) print a[i][j][k], i, j, k}' > skcm_pr_mut_clinv_count.txt
#wc -l = 1166

#Latest and most accurate version of command; here, the definition of mutation has been expanded to include
#$6 (protein change), $16 (chromosome), $17 (start pos), $18 (end pos), $19 (ref), $20 (var) in 
#/scratch/prasannalab/cancers_in_detail/skcm/skcm_drivers.txt; thus, mutn definition is more 
#complete and accurate, and hence the mutn counts are more accurate; above, only $2 (protein change) 
#was used to define mutn
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/skcm/skcm_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6 "_" $16 "_" $17 "_" $18 "_" $19 "_" $20, clinvar_as_int}' | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$2][$3]++} END {for (i in a) for (j in a[i]) for (k in a[i][j]) print a[i][j][k], i, j, k}' > skcm_nt_mut_clinv_count.txt
#wc -l skcm_nt_mut_clinv_count.txt = 1179

#Both files may have their uses; two mutns may be different at nucleotide level, but may be the same
#at protein level;

wc -l skcm_pr_mut_clinv_count.txt skcm_nt_mut_clinv_count.txt
  1166 skcm_pr_mut_clinv_count.txt
  1179 skcm_nt_mut_clinv_count.txt
#thus, by improving mutn definition, the number of lines in file has increased (from 1166 to 1179);
#i.e., more unique mutations, and fewer repeating mutations;

#counting no. of unique mutns (protein level and nt level mutns) in each gene
awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count){print count[var], var}}' skcm_nt_mut_clinv_count.txt > skcm_nt_n_uniqmutns.txt
wc -l skcm_nt_n_uniqmutns.txt
273     #checking if things are ok, by counting no. of genes;

awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count){print count[var], var}}' skcm_pr_mut_clinv_count.txt > skcm_pr_n_uniqmutns.txt
wc -l skcm_pr_n_uniqmutns.txt
273     #checking if things are ok, by counting no. of genes;

#counting no. of repeating mutns in each gene;
awk -F"\t" '{IFS=OFS="\t"} ($1>1){print $0}' skcm_nt_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count) print count[var], var}' > skcm_nt_n_repeatmutns.txt
wc -l skcm_nt_n_repeatmutns.txt
54

awk -F"\t" '{IFS=OFS="\t"} ($1>1){print $0}' skcm_pr_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count) print count[var], var}' > skcm_pr_n_repeatmutns.txt  
wc -l skcm_pr_n_repeatmutns.txt
59

#counting no. of protein mutns, and nt mutns mentioned in clinvar in each gene;
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' skcm_pr_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {print $2, $3, $4}' | awk -F"\t" '{IFS=OFS="\t"} {count[$1]++} END {for (var in count) print count[var], var}' > skcm_pr_n_clinmutns.txt
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' skcm_nt_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {print $2, $3, $4}' | awk -F"\t" '{IFS=OFS="\t"} {count[$1]++} END {for (var in count) print count[var], var}' > skcm_nt_n_clinmutns.txt

#Total no. of genes = 273;

#counting total no. of unique protein mutns, and total no. of unique nt mutns;  
awk -F"\t" '{nuniqmutns += $1}END {print nuniqmutns}' skcm_pr_n_uniqmutns.txt
1166     #this is equal to no. of lines in file skcm_pr_mut_clinv_count.txt 
awk -F"\t" '{nuniqmutns += $1}END {print nuniqmutns}' skcm_nt_n_uniqmutns.txt
1179     #this is equal to no. of lines in file skcm_nt_mut_clinv_count.txt 

#counting total no. of repeating protein mutns, and total no. of repeating nt mutns;  
awk -F"\t" '{nrepmutns += $1}END {print nrepmutns}' skcm_pr_n_repeatmutns.txt
127
awk -F"\t" '{nrepmutns += $1}END {print nrepmutns}' skcm_nt_n_repeatmutns.txt
121

#Thus, above, the 6 files listed below have been created; 
#skcm_pr_n_uniqmutns.txt; skcm_pr_n_repeatmutns.txt; skcm_pr_n_clinmutns.txt
#skcm_nt_n_uniqmutns.txt; skcm_nt_n_repeatmutns.txt; skcm_nt_n_clinmutns.txt

#counting total no. of protein mutns mentioned in clinvar, and total no. of nt mutns mentioned in clinvar;  
#use foll. two commands OR the two below them;
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' skcm_pr_mut_clinv_count.txt | wc -l
291
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' skcm_nt_mut_clinv_count.txt | wc -l
298   

awk -F"\t" '{nclinmutns += $1}END {print nclinmutns}' skcm_pr_n_clinmutns.txt
291
awk -F"\t" '{nclinmutns += $1}END {print nclinmutns}' skcm_nt_n_clinmutns.txt
298 

#Foll cmd gives total no. of mutations for each gene;
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/skcm/skcm_drivers.txt | gawk -F"\t" '{IFS=OFS="\t"}{a[$1]++} END {for (i in a) print a[i], i}' > skcm_totalmutns_per_gene.txt

#used the above file to create the foll seven cmd files; 
#the basic cmd in the cmd files is:
#echo -n -e "HLA-C\t\c" ; grep -w "HLA-C" skcm_totalmutns_per_gene.txt ; echo -n -e ""

awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" skcm_totalmutns_per_gene.txt ; echo -n -e \"\\n\""}' skcm_totalmutns_per_gene.txt > skcm_cmdlite_totalmutns_pergene.sh

awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" skcm_pr_n_clinmutns.txt ; echo -n -e \"\\n\""}' skcm_totalmutns_per_gene.txt > skcm_cmdlite_pr_clin.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" skcm_pr_n_repeatmutns.txt ; echo -n -e \"\\n\""}' skcm_totalmutns_per_gene.txt > skcm_cmdlite_pr_rep.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" skcm_pr_n_uniqmutns.txt ; echo -n -e \"\\n\""}' skcm_totalmutns_per_gene.txt > skcm_cmdlite_pr_uniq.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" skcm_nt_n_clinmutns.txt ; echo -n -e \"\\n\""}' skcm_totalmutns_per_gene.txt > skcm_cmdlite_nt_clin.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" skcm_nt_n_repeatmutns.txt ; echo -n -e \"\\n\""}' skcm_totalmutns_per_gene.txt > skcm_cmdlite_nt_rep.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" skcm_nt_n_uniqmutns.txt ; echo -n -e \"\\n\""}' skcm_totalmutns_per_gene.txt > skcm_cmdlite_nt_uniq.sh

sh skcm_cmdlite_totalmutns_pergene.sh | grep -v ^$ > skcm_countoftotalmutns.txt

sh skcm_cmdlite_pr_clin.sh | grep -v ^$ > skcm_pr_countofclinmutns.txt
sh skcm_cmdlite_pr_rep.sh | grep -v ^$ > skcm_pr_countofrepmutns.txt
sh skcm_cmdlite_pr_uniq.sh | grep -v ^$ > skcm_pr_countofuniqmutns.txt
sh skcm_cmdlite_nt_clin.sh | grep -v ^$ > skcm_nt_countofclinmutns.txt
sh skcm_cmdlite_nt_rep.sh | grep -v ^$ > skcm_nt_countofrepmutns.txt
sh skcm_cmdlite_nt_uniq.sh | grep -v ^$ > skcm_nt_countofuniqmutns.txt

#for protein mutns;
#Total no. of unique mutns in 273 genes = 1166
#Total no. of repeating mutns in 273 genes = 127
#Total no. of mutns mentioned in clinvar in 273 genes = 291

#for nt mutns;
#Total no. of unique mutns in 273 genes = 1179
#Total no. of repeating mutns in 273 genes = 121
#Total no. of mutns mentioned in clinvar in 273 genes = 298

#Downloaded the 6 files created above and listed below, to windows area:
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\HNSC
#skcm_countoftotalmutns.txt    
#skcm_pr_countofuniqmutns.txt  skcm_pr_countofclinmutns.txt
#skcm_pr_countofrepmutns.txt  skcm_nt_countofuniqmutns.txt  
#skcm_nt_countofclinmutns.txt  skcm_nt_countofrepmutns.txt   

#imported the above files to excel; 
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx
#sheet = skcm_counting_dri_genes

#unix tip: in terminal how to erase typed command quickly:
#you can cancel current command with CTRL+c; you can clear command to the 
#beginning with CTRL+u; to clear line after the cursor press CTRL+k;
            

#Working with tcga-cbio and omim mutations;

#Reactome pway informn is available for 862 oncokb + 324 blair_mel = 1186 genes; 
#plan to work with cbio and omim mutations of only these genes; 
#the list of 1186 genes is in the file:
#/scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/lst_1186_oncokb_blair_mel_genes.txt ;

#omim diseases for ALL oncokb genes (1066) are in the file: 
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/genes_oncokb_order_omim_diseases.txt

#omim diseases for blair-mel-genes-not-in-oncokb are in file:
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/blair_mel_genes_not_in_oncokb_to_omim/omim_diseases_for_b_m_g_not_in_oncokb.txt

#these files are also in the excel table:
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx
#sheet = oncokb_b_m_g_omim_assocn

#the above 2 files have to be trimmed to include only those genes that are in the
#1186 set; 

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists

#av have been downloaded from omim for the 485 oncokb genes (there are only 457 out of 485 av 
#files because, for the remaining genes, omim does not provide an av table); av tables have also 
#to be downloaded for the remaining 306 blair_mel genes;  

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists ;  

#FOR THE NEWLY DONE CANCERS (i.e., hnsc, gbm, luad, skcm, laml) THE FOLLOWING MAY HAVE TO BE DONE;
#this is because, in the original /scratch/prasannalab/cancers_in_detail/skcm/skcm_drivers.txt
#file, after gene name, a space has been introduced; i.e., "ABL1 " instead of just "ABL1"
cp /scratch/prasannalab/cancers_in_detail/skcm/skcm_drivers.txt skcm_temp_drivers.txt
vi skcm_temp_drivers.txt
#:1,$s/ \t/\t/
#:wq

#to identify the subset of genes with driver mutations in skcm; decided to cp and re-use luad 
#prep file, rather than create a new prep file for skcm;  
cp prep_luad_485onco_diseasegene_dri.sh prep_skcm_485onco_diseasegene_dri.sh
vi prep_skcm_485onco_diseasegene_dri.sh
#:1,$s/luad/skcm/g
#:wq
sh prep_skcm_485onco_diseasegene_dri.sh > skcm_drivers_for_ogenes_with_omimdiseases.txt
#i.e., even though there are only 457 av files for the set of 485 oncokb genes associated with omim 
#diseases, the above prep file extracts skcm drivers using all 485 genes; 

#note: no av table is available for foll 28 genes;
grep "no av" /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/downloadnotes_remaining296_ogenes_with_omimdiseases.txt /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/genes_downloaded_from_omim.txt
#wc -l = 28 
#FOXO1  ; PGR  ; ACSL6  ; ASPSCR1 ; ATIC ; BCL2 ; BCR ; CBFB ; CEP43 ; CRTC1 ; DEK ; 
#LMO2 ; LYL1 ; MAML2 ; MIB1 ; MYB ; NR4A3 ; NRG1 ; NUMA1 ; PICALM ; PML ; PRCC ; RANBP2 ; 
#SF3B1 ; SH3GL1 ; TAF15 ; TAL1 ; TEC ; 

#foll cmd gives list of genes in above file; i.e., skcm genes associated with omim diseases; 
awk -F"\t" '{print $1}' skcm_drivers_for_ogenes_with_omimdiseases.txt | sort | uniq > skcm_tmplst1.sh
#wc -l skcm_tmplst1.sh = 188  there are 188 oncokb genes in skcm that are associated with omim diseases;
#turning skcm_tmplst1.sh to a cmd file;
vi skcm_tmplst1.sh
:1,$s/^/grep "\\b/
:1,$s/$/\\b" 485_ogenes_with_omimdiseases.txt/
:wq
sh skcm_tmplst1.sh > skcm_tmplst1out.txt
#wc -l skcm_tmplst1out.txt = 188
#skcm_tmplst1out.txt lists the 188 skcm genes whose allelic variants files from omim would be needed; 
#note: the 28 genes for which no av file is available ARE INCLUDED in this file (i.e., in 
#485_ogenes_with_omimdiseases.txt); 

#vi /scratch/prasannalab/cancers_in_detail/kirc/kirc_drivers.txt
#In the NEWLY DONE CANCERS (hnsc, gbm, luad, skcm, laml), USE FOLL cmd;
vi skcm_temp_drivers.txt
#/\t

#Useful cols;
#$1 = gene name; $6 = Protein Change; $7 = Annotation; $8 = Functional Impact; $9 = Mutation Type; 
#$10 = Variant Type; $11 = Copy #; $16 = Chromosome; $17 = Start Pos; 
#$18 = End Pos; $19 = Ref; $20 = Var; $22 = HGVSc; $32 = ClinVar; $33 = dbSNP; 

#ENST informn is important; it is in the HGVSc col, or $22;

#awk -F"\t" '{IFS=OFS="\t"} {print $1,$6,$7,$8,$9,$10,$11,$16,$17,$18,$19,$20,$22,$32,$33}' skcm_drivers_for_ogenes_with_omimdiseases.txt | cut -f1,1 | uniq
#wc -l = 188

#awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6,$16,$17,$18,$19,$20,$9,$10,$11,$32,$33,$7,$8}' skcm_drivers_for_ogenes_with_omimdiseases.txt 
#wc -l = 1350

awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' skcm_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq -c 
#wc -l = 919
#wc -l skcm_drivers_for_ogenes_with_omimdiseases.txt = 1350 ; thus, sort and uniq reduces 
#the number of mutns; 

awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' skcm_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > skcm_uniq_drivers_for_ogenes_with_omdis.txt 
#there are 919 unique mutations in 188 skcm driver genes; the 188 genes are
#associated with omim diseases, and are listed in skcm_tmplst1out.txt; 

#ClinVar
#$1 = AlleleID; $3 = name of variant with this AlleleID; $10 = RS# (dbSNP); $12 = RCVaccession
#$17 = Assembly
awk -F"\t" '{print $1, $3, $7, $10, $12, $17}' variant_summary.txt | more


#$2 below contains the important ENST informn; the informn comes from the HGVSc col, or $22, in: 
#skcm_drivers_for_ogenes_with_omimdiseases.txt
awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' skcm_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#61   i.e., there are 61 mutations without ENST Id; e.g.s listed below; 

#thankfully, all 61 mutns are fusions, and do not have an ENST Id in the tsv file downloaded from 
#cbio; for these, $2 or ENST col is empty; 

#####most of the mutations listed
#####below are fusions and genuinely do not have an ENST Id in the tsv file downloaded from cbio ;
#####for these, $2 or ENST col is empty;
#####however, below, for HLA-A, a decimal number was appearing as $2; went back to file:
#####luad_drivers_for_ogenes_with_omimdiseases.txt , and found that the col:
#####"OncoKB: Likely Oncogenic, ...." is missing in the file I downloaded from cbio; so, went back to
#####cbio and downloaded the file again for luad; found that this "OncoKB: Likely Oncogenic, ...."
#####col is now (irritatingly) present! as ENST is only being used in this part of the project,
#####decided NOT to start all over again, by going back to cbio; instead,
#####decided to MANUALLY EDIT the file: luad_drivers_for_ogenes_with_omimdiseases.txt;

AKT3            ZEB2-AKT3 Fusion
ALK             ALK-STK39 Fusion
APC             APC-NREP Fusion
ARID1A          ARID1A-DGKA Fusion
AXIN1           CMSS1-AXIN1 Fusion
B2M             B2M-PPP4R1 Fusion
BAP1            BAP1-MLLT3 Fusion

#####not executed for skcm; EXECUTED FOR luad
#####MANUALLY EDITING luad_drivers_for_ogenes_with_omimdiseases.txt to introduce correct HLA-A lines;
#####uploaded the new HLA-A.tsv file (called HLA_A_new_luad.tsv in unix server, but HLA_A_new.tsv in windows) 
#####to pwd; 
#####prepared HLA_A_new2_luad.tsv ;
awk -F"\t" '{print "HLA-A\t" $0}' HLA_A_new_luad.tsv > HLA_A_new2_luad.tsv 
#####edited the luad_drivers_for_ogenes_with_omimdiseases.txt file, went to the position where HLA-A lines 
#####are and introduced table2.tsv
#####in place of the old HLA-A lines;
vi luad_drivers_for_ogenes_with_omimdiseases.txt
/HLA-A
i, esc, !!, cat table2.tsv

#####below, re-ran cmd to get the luad_uniq_drivers_for_ogenes_with_omdis.txt file; 
awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' luad_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > luad_uniq_drivers_for_ogenes_with_omdis.txt 

#####reran above cmd to check if, for HLA-A, decimal number goes away from $2;
awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' luad_uniq_drivers_for_ogenes_with_omdis.txt
#####No HLA-A lines occur! 
#####note: the ENST Ids differ between old HLA-A.tsv file and new HLA_A_new.tsv file;   
#####not executed for skcm ends here; 

awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' skcm_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#61    61 fusions
awk -F"\t" '{IFS=OFS="\t"} ($2 ~ /:/){print}' skcm_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#858
wc -l skcm_uniq_drivers_for_ogenes_with_omdis.txt
#919    858 + 61 = 919


#Preparing input file for perl program; 
#getting the set of 919 unique mutns, and removing fusions from the list; 
awk -F"\t" '{IFS=OFS="\t"}{print $1,$22,$6,$32,$7}' skcm_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > tmp1.txt
#wc -l tmp1.txt = 919 ;
awk -F"\t" '{IFS=OFS="\t"}($2 ~ /:/){print}' tmp1.txt > tmp2.txt
#wc -l tmp2.txt = 858 ;
#edited tmp2.txt to replace ; with \t, to retain only oncoKB assessment;
vi tmp2.txt  
#:1,$s/;/\t/
#:wq
awk -F"\t" '{IFS=OFS="\t"}{print $1,$2,$3,$4,$5}' tmp2.txt > tmp3.txt
#wc -l tmp3.txt = 858 ;
#a header line is required; took the line from foll file;
#/scratch/prasannalab/skcm_drivr_mutns/infil_mutns808_assessmt_cv_oncokb.txt
#the header line is the foll:
#Gene    HGVSc   Protein Change  ClinVar Annotation
awk -F"\t" '(NR==1)' /scratch/prasannalab/luad_drivr_mutns/infil_mutns808_assessmt_cv_oncokb.txt > tmp4.txt
cat tmp4.txt tmp3.txt > infil_skcm_mutns_cv_oncokbannotn.txt
rm tmp1.txt tmp2.txt tmp3.txt tmp4.txt

#Running perl program, srch_cbiomutns_in_clinvar.pl; took about 8 mins for the job to complete;
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists

nohup perl /scratch/prasannalab/luad_drivr_mutns/srch_cbiomutns_in_clinvar.pl infil_skcm_mutns_cv_oncokbannotn.txt variant_summary_GRCh37.txt outfil_skcm_cbio_clinvar.txt &

awk -F"\t" '{IFS=OFS="\t"}{print NF}' outfil_skcm_cbio_clinvar.txt | sort | uniq -c
#   320 12 (for 320 - 1 header = 319 mutns, clinvar, dbsnp annotations obtained)
#   539 6  (for 539 mutns, clinvar and dbsnp annotations are not obtained; i.e., these mutns are obsvd only in cbio)

#header in outfil_skcm_cbio_clinvar.txt
# 1     2      3               4       5            6         7     8     9           10                   11           12
#Gene  HGVSc  Protein Change  ClinVar Annotation  #AlleleID  Type  Name  GeneSymbol  ClinicalSignificance  RS# (dbSNP)  RCVaccession
#$1, $9, $2, $3, $8, $7, $11, $12, $6, $4, $10, $5;
awk -F"\t" '{IFS=OFS="\t"}{print $1, $9, $2, $3, $8, $7, $11, $12, $6, $4, $10, $5}' outfil_skcm_cbio_clinvar.txt > cols_rearranged_cbio_clinvar_skcm.txt

#my impression - clinvar and dbsnp store mutations which are observed in 1% of population
#cbio mutations are too small in number to be population based mutations; i.e., they 
#are disease causing mutations, that are rare and not observed in a population; 
#thus many mutations in cbio will not be found in dbsnp and clinvar;

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists
awk -F"\t" '{IFS=OFS="\t"}(NR>1)&&(NF==12){print $0}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/outfil_skcm_cbio_clinvar.txt 
#wc -l = 319;  thus, for skcm, there are 319 cbio mutns out of 858 with rs and cv ids; 
awk -F"\t" '{IFS=OFS="\t"}(NF==12){print $0}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/outfil_skcm_cbio_clinvar.txt > /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/skcm_319cbio_mutns_with_rs_cv_ids.txt 

#the next step is to see which of the 319 skcm cbio mutns are in 4589 omim set; 
#cbio: $12 = clinvar accession; multiple entries per line; $11, which gives rs ID, contains one entry 
#per line, but some entries maybe -1, meaning rs ID is missing; 
#omim: $5 = SNP; more than one entries per line can occur; some lines can be blank; $7 = clinvar ID; 
#more than one entries can occur per line; some lines can be blank;

awk -F"\t" '{IFS=OFS="\t"}{print $11, $12}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/skcm_319cbio_mutns_with_rs_cv_ids.txt | more
#RS# (dbSNP)     RCVaccession
#776240891       RCV000532198|RCV000574374
#387906849       RCV000023240|RCV001027030
#-1      RCV002025871
#876659613       RCV002234805
#-1      RCV001972712

awk -F"\t" '{IFS=OFS="\t"}{print $5, $7}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/omim_all_av_onco457.txt | more 
#SNP     ClinVar
#rs786205109     RCV000019398
#rs80051519      RCV000019399
#        RCV000019400
#rs786205110     RCV000019401
#        RCV000019402
#        RCV000019403
#rs121434538     RCV000019404,RCV001851942
#        RCV000019405
#rs1555760738    RCV000083256,RCV000083257

#running perl program, identifying_mutns_common_to_omim_and_clinv.pl
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists
perl /scratch/prasannalab/luad_drivr_mutns/identifying_mutns_common_to_omim_and_clinv.pl /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/skcm_319cbio_mutns_with_rs_cv_ids.txt /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/omim_all_av_onco457.txt skcm_cbio319_rs_mapped_to_omim.txt skcm_cbio319_clinv_mapped_to_omim.txt
uniq skcm_cbio319_clinv_mapped_to_omim.txt > skcm_cbio319_clinv_mapped_to_omim_uniq.txt
#file to be used is skcm_cbio319_clinv_mapped_to_omim_uniq.txt; this is for the foll reason:
#a mutn (e.g., AKT1 E17K) may occur once in the input file (skcm_319cbio_mutns_with_rs_cv_ids.txt), 
#but may be associated with multiple RCV identifiers (24 identifiers for AKT1 E17K); hence in the output file 
#(skcm_cbio319_clinv_mapped_to_omim.txt) the mutn (AKT1 E17K) is repeated as many times as there are RCV
#identifiers (24 times for AKT1 E17K); hence, to remove repeating mutn lines arising due to multiple RCV 
#identifiers, the uniq command has to be used;

wc -l skcm_319cbio_mutns_with_rs_cv_ids.txt skcm_cbio319_rs_mapped_to_omim.txt skcm_cbio319_clinv_mapped_to_omim.txt skcm_cbio319_clinv_mapped_to_omim_uniq.txt
#  320 (320 - 1 header = 319) skcm_319cbio_mutns_with_rs_cv_ids.txt         (input file)
#   87 (87 - 1 header = 86) skcm_cbio319_rs_mapped_to_omim.txt            (output file)
#  622 (622 - 1 header = 621) skcm_cbio319_clinv_mapped_to_omim.txt         (output file)
#   94 (94 - 1 header = 93) skcm_cbio319_clinv_mapped_to_omim_uniq.txt    (output file)


#did another sort and uniq -c on output file, skcm_cbio319_clinv_mapped_to_omim_uniq.txt ;  
#this was done to club together identical mutations that might have been missed by above uniq cmd;
sort skcm_cbio319_clinv_mapped_to_omim_uniq.txt | uniq -c > skcm_cbio319_clinv_mapped_to_omim_sortuniqc.txt 
#wc -l skcm_cbio319_clinv_mapped_to_omim_sortuniqc.txt = 56 (56-1 header = 55)
#thus 94 from the *_uniq.txt file has reduced to 55 in the *_sortuniqc.txt file;

#edited the file to bring header line to top of file, and to remove the count for header line;
vi skcm_cbio319_clinv_mapped_to_omim_sortuniqc.txt
#this file gives count of number of times each unique mutation repeats; 

#only the KRAS G12D mutn has $5 != $6; remaining 54 entries have $5=$6; 
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' skcm_cbio319_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 != $6)' 

awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' skcm_cbio319_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 == $6)' | grep "CTNNB1"
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' skcm_cbio319_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)' | grep "CTNNB1"
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' skcm_cbio319_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 == $6)' | grep "ENST00000260795.2:c.1138G>A"
#for luad, in all 13 entries, $5=$6; 

###NOTE: below, I am using the *_uniq.txt file, NOT *_sortuniqc.txt file; this 
###is to get a proper count of uniq mutations; using *_sortuniqc.txt file below to get the final file gave some 
###duplicate mutations; hence, decided to use the *_uniq.txt file below to get the final file;
###however, using the *_sortuniqc.txt file ABOVE is helpful because the lists to examine are shorter;  
###the foll cmds may have to be customised in different cancers to include mutns you think should be included;

#for skcm, foll first two cmds sufficient to generate the output file; 
#in skcm, one mutn (1 KRAS) has mismatched ids; on inspection it seemed that all mutns 
#could be included; 
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' skcm_cbio319_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 ~ /Gene/){print}($1 !~ /Gene/)&&($5 ~ $4)' > junk
#wc -l = 74 - 1 = 73
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' skcm_cbio319_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)' >> junk
#wc -l = 20; repeating KRAS mutn;  

##foll 2 not needed for skcm;
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' skcm_cbio319_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)&&($5 ~ /^$/)' >> junk
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' skcm_cbio319_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)' | grep "ENST00000263967.3:c.1634A>C" >> junk

sort junk | uniq -c > junk2
#wc -l junk2 = 56
#edit file junk2 to move header line to top; remove count for header line; add a col heading called "n(mutns)\t"
vi junk2
sed -e 's/^[ ]*//' -e '2,$s/ /\t/' junk2 > skcm_cbio_omim_matched_mutns.txt
#wc -l skcm_cbio_omim_matched_mutns.txt = 56 (55 uniq mutns + 1 header line = 56)

#Have to introduce the correct counts for each mutation in skcm_cbio_omim_matched_mutns.txt from
#skcm_drivers_for_ogenes_with_omimdiseases.txt or skcm_temp_drivers.txt ; 
#have to turn skcm_cbio_omim_matched_mutns.txt into a batch file which searches for each mutn in the
#above 2 driver files;
#have to create a batch file with cmds of the foll kind; 
#awk -F"\t" '{IFS=OFS="\t"}($1 ~ /^BAP1$/) && ($6 ~ /^Q267\*$/) && ($22 ~ /^ENST00000460680.1:c.799C>T$/)' skcm_drivers_for_ogenes_with_omimdiseases.txt
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $2, $3, $10}' skcm_cbio_omim_matched_mutns.txt | uniq > prep_skcm_noccs_cbio_omim_matched_mutns.sh 
vi prep_skcm_noccs_cbio_omim_matched_mutns.sh
#:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}(\$1 \~ \/\^/
#:1,$s/\t/    /
#:1,$s/    /\$\/) \&\& (\$6 \~ \/^/
#:1,$s/\t/    /
#:1,$s/    /\$\/) \&\& (\$22 \~ \/\^/
#:1,$s/$/\$\/)' skcm_drivers_for_ogenes_with_omimdiseases.txt/
#:1,$s/\*/\\*/g
#:wq
cp prep_skcm_noccs_cbio_omim_matched_mutns.sh tst1.sh
vi tst1.sh
#####:1,$s/gbm_drivers_for_ogenes_with_omimdiseases.txt/\/scratch\/prasannalab\/cancers_in_detail\/gbm\/gbm_drivers.txt/
#####for gbm, EDIT ABOVE MODIFIED TO THE ONE BELOW 
#:1,$s/skcm_drivers_for_ogenes_with_omimdiseases.txt/skcm_temp_drivers.txt/
#:wq
sh tst1.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | more
#the output from tst1.sh should be same as output from cmd below: 
sh prep_skcm_noccs_cbio_omim_matched_mutns.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | more

#if outputs are same, use cmds below to get final file;
echo "" > scratch.txt
sh prep_skcm_noccs_cbio_omim_matched_mutns.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | sed -e 's/^[ ]*//' -e '1,$s/ /\t/' >> scratch.txt
#Use foll cmd to MANUALLY MAKE DUPLICATE LINES in scratch.txt of those mutations which occur multiple 
#times in skcm_cbio_omim_matched_mutns.txt; to identify the duplicate mutations in 
#skcm_cbio_omim_matched_mutns.txt, use foll cmd: (in skcm, only KRAS   G12D   ENST00000256078.4:c.35G>A  
#had to be duplicated); note: SDHD *160Lext*3 seems to be a no-stop mutation;
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $2, $3, $10}' skcm_cbio_omim_matched_mutns.txt | uniq -c | more 
vi scratch.txt
#use paste cmd below to make sure the same gene and mutn lines are being pasted;
paste -d"\t" scratch.txt skcm_cbio_omim_matched_mutns.txt | more
paste -d"\t" scratch.txt skcm_cbio_omim_matched_mutns.txt | awk -F"\t" '{IFS=OFS="\t"}{print $1,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}' > skcm_noccs_cbio_omim_matched_mutns.txt

###taking foll file unix file to xl: 
#/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/skcm_noccs_cbio_omim_matched_mutns.txt
#downloaded to windows area: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\skcm\skcm_noccs_cbio_omim_matched_mutns.txt
#xl file = D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx
#sheet = skcm_cbio_omim_mutns ;

-------------------------------------------------------------------

#LAML

#Comparing tcga mutations collected for laml, for oncokb genes, with the mutations catalogued 
#for the genes in OMIM; the hnsc set of lines above have been copied below, and have been 
#appropriately modified;

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim

#Driver genes and mutations for laml, obtained from cbioportal, are in the foll file; 
/scratch/prasannalab/cancers_in_detail/laml/laml_drivers.txt

grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/laml/laml_drivers.txt | wc -l
#510 drivers

#https://askubuntu.com/questions/592273/count-the-number-of-unique-values-based-on-two-columns-in-a-spreadsheet
#Below, $1 = Gene name; $6 = "Protein Change"; i in a = loop through gene names; 
#j in a[i] = loop through "Protein Change" col associated with each gene name; 
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/laml/laml_drivers.txt | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$6]++} END {for (i in a) for (j in a[i]) print a[i][j], i, j}' | more
#wc -l = 281

#Below, $32 = "ClinVar"; $6 = "Protein Change";  
#$32 is replaced by an integer: if mutn is documented in clinvar, $32 = 1; if no mention of mutn in clinvar, $32 = 0;
#grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/laml/laml_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int, $32}' | more
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/laml/laml_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int}' | more
#wc -l = 510 lines

#foll. command seems to work; using a 3-d array (instead of the 2-d array in the gawk command above);
#$1=gene; $6="Protein Change"; $32=clinvar_as_int (which is 1 if mutn is mentioned in clinvar, 0 if it is not);
#all three can be counted together because, if a mutn repeats, the clinvar status will also repeat;
#Note: wc -l for cmd below (549) does not match wc -l for the cmd above (547);
#this is because a protein mutn can occur in several ways, and each mutn can have a different clinvar status; e.g., 
#1       PIK3CA  M1043I  0  c.3129G>C
#2       PIK3CA  M1043I  1  c.3129G>A  Pathogenic/Likely_pathogenic
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/laml/laml_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6, clinvar_as_int}' | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$2][$3]++} END {for (i in a) for (j in a[i]) for (k in a[i][j]) print a[i][j][k], i, j, k}' > laml_pr_mut_clinv_count.txt
#wc -l = 282

#Latest and most accurate version of command; here, the definition of mutation has been expanded to include
#$6 (protein change), $16 (chromosome), $17 (start pos), $18 (end pos), $19 (ref), $20 (var) in 
#/scratch/prasannalab/cancers_in_detail/laml/laml_drivers.txt; thus, mutn definition is more 
#complete and accurate, and hence the mutn counts are more accurate; above, only $2 (protein change) 
#was used to define mutn
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/laml/laml_drivers.txt | awk -F"\t" '{IFS=OFS="\t"}{if ($32 !~ /^$/){clinvar_as_int = 1} else {clinvar_as_int = 0}}{print $1, $6 "_" $16 "_" $17 "_" $18 "_" $19 "_" $20, clinvar_as_int}' | gawk -F"\t" '{IFS=OFS="\t"}{a[$1][$2][$3]++} END {for (i in a) for (j in a[i]) for (k in a[i][j]) print a[i][j][k], i, j, k}' > laml_nt_mut_clinv_count.txt
#wc -l laml_nt_mut_clinv_count.txt = 320

#Both files may have their uses; two mutns may be different at nucleotide level, but may be the same
#at protein level;

wc -l laml_pr_mut_clinv_count.txt laml_nt_mut_clinv_count.txt
  282 laml_pr_mut_clinv_count.txt
  320 laml_nt_mut_clinv_count.txt
#thus, by improving mutn definition, the number of lines in file has increased (from 1166 to 1179);
#i.e., more unique mutations, and fewer repeating mutations;

#counting no. of unique mutns (protein level and nt level mutns) in each gene
awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count){print count[var], var}}' laml_nt_mut_clinv_count.txt > laml_nt_n_uniqmutns.txt
wc -l laml_nt_n_uniqmutns.txt
92     #checking if things are ok, by counting no. of genes;

awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count){print count[var], var}}' laml_pr_mut_clinv_count.txt > laml_pr_n_uniqmutns.txt
wc -l laml_pr_n_uniqmutns.txt
92     #checking if things are ok, by counting no. of genes;

#counting no. of repeating mutns in each gene;
awk -F"\t" '{IFS=OFS="\t"} ($1>1){print $0}' laml_nt_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count) print count[var], var}' > laml_nt_n_repeatmutns.txt
wc -l laml_nt_n_repeatmutns.txt
25

awk -F"\t" '{IFS=OFS="\t"} ($1>1){print $0}' laml_pr_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {count[$2]++} END {for (var in count) print count[var], var}' > laml_pr_n_repeatmutns.txt  
wc -l laml_pr_n_repeatmutns.txt
29

#counting no. of protein mutns, and nt mutns mentioned in clinvar in each gene;
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' laml_pr_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {print $2, $3, $4}' | awk -F"\t" '{IFS=OFS="\t"} {count[$1]++} END {for (var in count) print count[var], var}' > laml_pr_n_clinmutns.txt
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' laml_nt_mut_clinv_count.txt | awk -F"\t" '{IFS=OFS="\t"} {print $2, $3, $4}' | awk -F"\t" '{IFS=OFS="\t"} {count[$1]++} END {for (var in count) print count[var], var}' > laml_nt_n_clinmutns.txt

#Total no. of genes = 92;

#counting total no. of unique protein mutns, and total no. of unique nt mutns;  
awk -F"\t" '{nuniqmutns += $1}END {print nuniqmutns}' laml_pr_n_uniqmutns.txt
282     #this is equal to no. of lines in file laml_pr_mut_clinv_count.txt 
awk -F"\t" '{nuniqmutns += $1}END {print nuniqmutns}' laml_nt_n_uniqmutns.txt
320     #this is equal to no. of lines in file laml_nt_mut_clinv_count.txt 

#counting total no. of repeating protein mutns, and total no. of repeating nt mutns;  
awk -F"\t" '{nrepmutns += $1}END {print nrepmutns}' laml_pr_n_repeatmutns.txt
48
awk -F"\t" '{nrepmutns += $1}END {print nrepmutns}' laml_nt_n_repeatmutns.txt
50

#Thus, above, the 6 files listed below have been created; 
#laml_pr_n_uniqmutns.txt; laml_pr_n_repeatmutns.txt; laml_pr_n_clinmutns.txt
#laml_nt_n_uniqmutns.txt; laml_nt_n_repeatmutns.txt; laml_nt_n_clinmutns.txt

#counting total no. of protein mutns mentioned in clinvar, and total no. of nt mutns mentioned in clinvar;  
#use foll. two commands OR the two below them;
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' laml_pr_mut_clinv_count.txt | wc -l
86
awk -F"\t" '{IFS=OFS="\t"} ($4==1){print $0}' laml_nt_mut_clinv_count.txt | wc -l
89   

awk -F"\t" '{nclinmutns += $1}END {print nclinmutns}' laml_pr_n_clinmutns.txt
86
awk -F"\t" '{nclinmutns += $1}END {print nclinmutns}' laml_nt_n_clinmutns.txt
89 

#Foll cmd gives total no. of mutations for each gene;
grep -v "\bStudy of Origin\b" /scratch/prasannalab/cancers_in_detail/laml/laml_drivers.txt | gawk -F"\t" '{IFS=OFS="\t"}{a[$1]++} END {for (i in a) print a[i], i}' > laml_totalmutns_per_gene.txt

#used the above file to create the foll seven cmd files; 
#the basic cmd in the cmd files is:
#echo -n -e "HLA-C\t\c" ; grep -w "HLA-C" laml_totalmutns_per_gene.txt ; echo -n -e ""

awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" laml_totalmutns_per_gene.txt ; echo -n -e \"\\n\""}' laml_totalmutns_per_gene.txt > laml_cmdlite_totalmutns_pergene.sh

awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" laml_pr_n_clinmutns.txt ; echo -n -e \"\\n\""}' laml_totalmutns_per_gene.txt > laml_cmdlite_pr_clin.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" laml_pr_n_repeatmutns.txt ; echo -n -e \"\\n\""}' laml_totalmutns_per_gene.txt > laml_cmdlite_pr_rep.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" laml_pr_n_uniqmutns.txt ; echo -n -e \"\\n\""}' laml_totalmutns_per_gene.txt > laml_cmdlite_pr_uniq.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" laml_nt_n_clinmutns.txt ; echo -n -e \"\\n\""}' laml_totalmutns_per_gene.txt > laml_cmdlite_nt_clin.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" laml_nt_n_repeatmutns.txt ; echo -n -e \"\\n\""}' laml_totalmutns_per_gene.txt > laml_cmdlite_nt_rep.sh
awk -F"\t" '{print "echo -n -e \"" $2 "\\t\\c\" ; grep -w \"" $2 "\" laml_nt_n_uniqmutns.txt ; echo -n -e \"\\n\""}' laml_totalmutns_per_gene.txt > laml_cmdlite_nt_uniq.sh

sh laml_cmdlite_totalmutns_pergene.sh | grep -v ^$ > laml_countoftotalmutns.txt

sh laml_cmdlite_pr_clin.sh | grep -v ^$ > laml_pr_countofclinmutns.txt
sh laml_cmdlite_pr_rep.sh | grep -v ^$ > laml_pr_countofrepmutns.txt
sh laml_cmdlite_pr_uniq.sh | grep -v ^$ > laml_pr_countofuniqmutns.txt
sh laml_cmdlite_nt_clin.sh | grep -v ^$ > laml_nt_countofclinmutns.txt
sh laml_cmdlite_nt_rep.sh | grep -v ^$ > laml_nt_countofrepmutns.txt
sh laml_cmdlite_nt_uniq.sh | grep -v ^$ > laml_nt_countofuniqmutns.txt

#for protein mutns;
#Total no. of unique mutns in 92 genes = 282
#Total no. of repeating mutns in 92 genes = 48
#Total no. of mutns mentioned in clinvar in 92 genes = 86

#for nt mutns;
#Total no. of unique mutns in 92 genes = 320
#Total no. of repeating mutns in 92 genes = 50
#Total no. of mutns mentioned in clinvar in 92 genes = 89

#Downloaded the 6 files created above and listed below, to windows area:
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\HNSC
#laml_countoftotalmutns.txt    
#laml_pr_countofuniqmutns.txt  laml_pr_countofclinmutns.txt
#laml_pr_countofrepmutns.txt  laml_nt_countofuniqmutns.txt  
#laml_nt_countofclinmutns.txt  laml_nt_countofrepmutns.txt   

#imported the above files to excel; 
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx
#sheet = laml_counting_dri_genes

#unix tip: in terminal how to erase typed command quickly:
#you can cancel current command with CTRL+c; you can clear command to the 
#beginning with CTRL+u; to clear line after the cursor press CTRL+k;
            

#Working with tcga-cbio and omim mutations;

#Reactome pway informn is available for 862 oncokb + 324 blair_mel = 1186 genes; 
#plan to work with cbio and omim mutations of only these genes; 
#the list of 1186 genes is in the file:
#/scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/lst_1186_oncokb_blair_mel_genes.txt ;

#omim diseases for ALL oncokb genes (1066) are in the file: 
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/genes_oncokb_order_omim_diseases.txt

#omim diseases for blair-mel-genes-not-in-oncokb are in file:
#/scratch/prasannalab/cancers_in_detail/oncokb_to_omim/blair_mel_genes_not_in_oncokb_to_omim/omim_diseases_for_b_m_g_not_in_oncokb.txt

#these files are also in the excel table:
#d:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\oncokb_complexdisease_md_assocns.xlsx
#sheet = oncokb_b_m_g_omim_assocn

#the above 2 files have to be trimmed to include only those genes that are in the
#1186 set; 

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists

#av have been downloaded from omim for the 485 oncokb genes (there are only 457 out of 485 av 
#files because, for the remaining genes, omim does not provide an av table); av tables have also 
#to be downloaded for the remaining 306 blair_mel genes;  

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists ;  

#FOR THE NEWLY DONE CANCERS (i.e., hnsc, gbm, luad, skcm, laml) THE FOLLOWING MAY HAVE TO BE DONE;
#this is because, in the original /scratch/prasannalab/cancers_in_detail/laml/laml_drivers.txt
#file, after gene name, a space has been introduced; i.e., "ABL1 " instead of just "ABL1"
cp /scratch/prasannalab/cancers_in_detail/laml/laml_drivers.txt laml_temp_drivers.txt
vi laml_temp_drivers.txt
#:1,$s/ \t/\t/
#:wq

#to identify the subset of genes with driver mutations in laml; decided to cp and re-use skcm 
#prep file, rather than create a new prep file for laml;  
cp prep_skcm_485onco_diseasegene_dri.sh prep_laml_485onco_diseasegene_dri.sh
vi prep_laml_485onco_diseasegene_dri.sh
#:1,$s/skcm/laml/g
#:wq
sh prep_laml_485onco_diseasegene_dri.sh > laml_drivers_for_ogenes_with_omimdiseases.txt
#i.e., even though there are only 457 av files for the set of 485 oncokb genes associated with omim 
#diseases, the above prep file extracts laml drivers using all 485 genes; 

#note: no av table is available for foll 28 genes;
grep "no av" /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/downloadnotes_remaining296_ogenes_with_omimdiseases.txt /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/genes_downloaded_from_omim.txt
#wc -l = 28 
#FOXO1  ; PGR  ; ACSL6  ; ASPSCR1 ; ATIC ; BCL2 ; BCR ; CBFB ; CEP43 ; CRTC1 ; DEK ; 
#LMO2 ; LYL1 ; MAML2 ; MIB1 ; MYB ; NR4A3 ; NRG1 ; NUMA1 ; PICALM ; PML ; PRCC ; RANBP2 ; 
#SF3B1 ; SH3GL1 ; TAF15 ; TAL1 ; TEC ; 

#foll cmd gives list of genes in above file; i.e., laml genes associated with omim diseases; 
awk -F"\t" '{print $1}' laml_drivers_for_ogenes_with_omimdiseases.txt | sort | uniq > laml_tmplst1.sh
#wc -l laml_tmplst1.sh = 188  there are 188 oncokb genes in laml that are associated with omim diseases;
#turning laml_tmplst1.sh to a cmd file;
vi laml_tmplst1.sh
:1,$s/^/grep "\\b/
:1,$s/$/\\b" 485_ogenes_with_omimdiseases.txt/
:wq
sh laml_tmplst1.sh > laml_tmplst1out.txt
#wc -l laml_tmplst1out.txt = 65
#laml_tmplst1out.txt lists the 65 laml genes whose allelic variants files from omim would be needed; 
#note: the 28 genes for which no av file is available ARE INCLUDED in this file (i.e., in 
#485_ogenes_with_omimdiseases.txt); 

#vi /scratch/prasannalab/cancers_in_detail/kirc/kirc_drivers.txt
#In the NEWLY DONE CANCERS (hnsc, gbm, luad, skcm, laml), USE FOLL cmd;
vi laml_temp_drivers.txt
#/\t

#Useful cols;
#$1 = gene name; $6 = Protein Change; $7 = Annotation; $8 = Functional Impact; $9 = Mutation Type; 
#$10 = Variant Type; $11 = Copy #; $16 = Chromosome; $17 = Start Pos; 
#$18 = End Pos; $19 = Ref; $20 = Var; $22 = HGVSc; $32 = ClinVar; $33 = dbSNP; 

#ENST informn is important; it is in the HGVSc col, or $22;

#awk -F"\t" '{IFS=OFS="\t"} {print $1,$6,$7,$8,$9,$10,$11,$16,$17,$18,$19,$20,$22,$32,$33}' laml_drivers_for_ogenes_with_omimdiseases.txt | cut -f1,1 | uniq
#wc -l = 65

#awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6,$16,$17,$18,$19,$20,$9,$10,$11,$32,$33,$7,$8}' laml_drivers_for_ogenes_with_omimdiseases.txt 
#wc -l = 455

awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' laml_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq -c 
#wc -l = 248
#wc -l laml_drivers_for_ogenes_with_omimdiseases.txt = 455 ; thus, sort and uniq reduces 
#the number of mutns; 

awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' laml_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > laml_uniq_drivers_for_ogenes_with_omdis.txt 
#there are 248 unique mutations in 65 laml driver genes; the 65 genes are
#associated with omim diseases, and are listed in laml_tmplst1out.txt; 

#ClinVar
#$1 = AlleleID; $3 = name of variant with this AlleleID; $10 = RS# (dbSNP); $12 = RCVaccession
#$17 = Assembly
awk -F"\t" '{print $1, $3, $7, $10, $12, $17}' variant_summary.txt | more


#$2 below contains the important ENST informn; the informn comes from the HGVSc col, or $22, in: 
#laml_drivers_for_ogenes_with_omimdiseases.txt
awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' laml_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#23   i.e., there are 23 mutations without ENST Id; e.g.s listed below; 

#thankfully, all 23 mutns are fusions, and do not have an ENST Id in the tsv file downloaded from 
#cbio; for these, $2 or ENST col is empty; 

#####most of the mutations listed
#####below are fusions and genuinely do not have an ENST Id in the tsv file downloaded from cbio ;
#####for these, $2 or ENST col is empty;
#####however, below, for HLA-A, a decimal number was appearing as $2; went back to file:
#####luad_drivers_for_ogenes_with_omimdiseases.txt , and found that the col:
#####"OncoKB: Likely Oncogenic, ...." is missing in the file I downloaded from cbio; so, went back to
#####cbio and downloaded the file again for luad; found that this "OncoKB: Likely Oncogenic, ...."
#####col is now (irritatingly) present! as ENST is only being used in this part of the project,
#####decided NOT to start all over again, by going back to cbio; instead,
#####decided to MANUALLY EDIT the file: luad_drivers_for_ogenes_with_omimdiseases.txt;

ABL1            BCR-ABL1 Fusion
BCR             BCR-ABL1 Fusion
CBFB            CBFB-MYH11 Fusion
CEBPA           ANAPC2-CEBPA Fusion
CREBBP          KAT6A-CREBBP Fusion
DNMT3B          DNMT3B-MDM4 Fusion
FGFR3           FGFR3-TACC3 Fusion

#####not executed for laml; EXECUTED FOR luad
#####MANUALLY EDITING luad_drivers_for_ogenes_with_omimdiseases.txt to introduce correct HLA-A lines;
#####uploaded the new HLA-A.tsv file (called HLA_A_new_luad.tsv in unix server, but HLA_A_new.tsv in windows) 
#####to pwd; 
#####prepared HLA_A_new2_luad.tsv ;
awk -F"\t" '{print "HLA-A\t" $0}' HLA_A_new_luad.tsv > HLA_A_new2_luad.tsv 
#####edited the luad_drivers_for_ogenes_with_omimdiseases.txt file, went to the position where HLA-A lines 
#####are and introduced table2.tsv
#####in place of the old HLA-A lines;
vi luad_drivers_for_ogenes_with_omimdiseases.txt
/HLA-A
i, esc, !!, cat table2.tsv

#####below, re-ran cmd to get the luad_uniq_drivers_for_ogenes_with_omdis.txt file; 
awk -F"\t" '{IFS=OFS="\t"} {print $1,$22,$6}' luad_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > luad_uniq_drivers_for_ogenes_with_omdis.txt 

#####reran above cmd to check if, for HLA-A, decimal number goes away from $2;
awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' luad_uniq_drivers_for_ogenes_with_omdis.txt
#####No HLA-A lines occur! 
#####note: the ENST Ids differ between old HLA-A.tsv file and new HLA_A_new.tsv file;   
#####not executed for laml ends here; 

awk -F"\t" '{IFS=OFS="\t"} ($2 !~ /:/){print}' laml_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#23    23 fusions
awk -F"\t" '{IFS=OFS="\t"} ($2 ~ /:/){print}' laml_uniq_drivers_for_ogenes_with_omdis.txt | wc -l
#225
wc -l laml_uniq_drivers_for_ogenes_with_omdis.txt
#248    225 + 23 = 248


#Preparing input file for perl program; 
#getting the set of 248 unique mutns, and removing fusions from the list; 
awk -F"\t" '{IFS=OFS="\t"}{print $1,$22,$6,$32,$7}' laml_drivers_for_ogenes_with_omimdiseases.txt | sort -k1,1 -k2,2 -k3,3 | uniq > tmp1.txt
#wc -l tmp1.txt = 251 ;
awk -F"\t" '{IFS=OFS="\t"}($2 ~ /:/){print}' tmp1.txt > tmp2.txt
#wc -l tmp2.txt = 228 ;
#edited tmp2.txt to replace ; with \t, to retain only oncoKB assessment;
vi tmp2.txt  
#:1,$s/;/\t/
#:wq
awk -F"\t" '{IFS=OFS="\t"}{print $1,$2,$3,$4,$5}' tmp2.txt > tmp3.txt
#wc -l tmp3.txt = 228 ;
#a header line is required; took the line from foll file;
#/scratch/prasannalab/laml_drivr_mutns/infil_mutns808_assessmt_cv_oncokb.txt
#the header line is the foll:
#Gene    HGVSc   Protein Change  ClinVar Annotation
awk -F"\t" '(NR==1)' /scratch/prasannalab/luad_drivr_mutns/infil_mutns808_assessmt_cv_oncokb.txt > tmp4.txt
cat tmp4.txt tmp3.txt > infil_laml_mutns_cv_oncokbannotn.txt
rm tmp1.txt tmp2.txt tmp3.txt tmp4.txt

#Running perl program, srch_cbiomutns_in_clinvar.pl; took about 3 mins for the job to complete;
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists

nohup perl /scratch/prasannalab/luad_drivr_mutns/srch_cbiomutns_in_clinvar.pl infil_laml_mutns_cv_oncokbannotn.txt variant_summary_GRCh37.txt outfil_laml_cbio_clinvar.txt &

awk -F"\t" '{IFS=OFS="\t"}{print NF}' outfil_laml_cbio_clinvar.txt | sort | uniq -c
#    83 12 (for 83 - 1 header = 82 mutns, clinvar, dbsnp annotations obtained)
#   146 6  (for 146 mutns, clinvar and dbsnp annotations are not obtained; i.e., these mutns are obsvd only in cbio)

#header in outfil_laml_cbio_clinvar.txt
# 1     2      3               4       5            6         7     8     9           10                   11           12
#Gene  HGVSc  Protein Change  ClinVar Annotation  #AlleleID  Type  Name  GeneSymbol  ClinicalSignificance  RS# (dbSNP)  RCVaccession
#$1, $9, $2, $3, $8, $7, $11, $12, $6, $4, $10, $5;
awk -F"\t" '{IFS=OFS="\t"}{print $1, $9, $2, $3, $8, $7, $11, $12, $6, $4, $10, $5}' outfil_laml_cbio_clinvar.txt > cols_rearranged_cbio_clinvar_laml.txt

#my impression - clinvar and dbsnp store mutations which are observed in 1% of population
#cbio mutations are too small in number to be population based mutations; i.e., they 
#are disease causing mutations, that are rare and not observed in a population; 
#thus many mutations in cbio will not be found in dbsnp and clinvar;

#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists
awk -F"\t" '{IFS=OFS="\t"}(NR>1)&&(NF==12){print $0}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/outfil_laml_cbio_clinvar.txt 
#wc -l = 82;  thus, for laml, there are 82 cbio mutns out of 228 with rs and cv ids; 
awk -F"\t" '{IFS=OFS="\t"}(NF==12){print $0}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/outfil_laml_cbio_clinvar.txt > /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/laml_82cbio_mutns_with_rs_cv_ids.txt 

#the next step is to see which of the 82 laml cbio mutns are in 4589 omim set; 
#cbio: $12 = clinvar accession; multiple entries per line; $11, which gives rs ID, contains one entry 
#per line, but some entries maybe -1, meaning rs ID is missing; 
#omim: $5 = SNP; more than one entries per line can occur; some lines can be blank; $7 = clinvar ID; 
#more than one entries can occur per line; some lines can be blank;

awk -F"\t" '{IFS=OFS="\t"}{print $11, $12}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/laml_82cbio_mutns_with_rs_cv_ids.txt | more
#RS# (dbSNP)     RCVaccession
#776240891       RCV000532198|RCV000574374
#387906849       RCV000023240|RCV001027030
#-1      RCV002025871
#876659613       RCV002234805
#-1      RCV001972712

awk -F"\t" '{IFS=OFS="\t"}{print $5, $7}' /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/omim_all_av_onco457.txt | more 
#SNP     ClinVar
#rs786205109     RCV000019398
#rs80051519      RCV000019399
#        RCV000019400
#rs786205110     RCV000019401
#        RCV000019402
#        RCV000019403
#rs121434538     RCV000019404,RCV001851942
#        RCV000019405
#rs1555760738    RCV000083256,RCV000083257

#running perl program, identifying_mutns_common_to_omim_and_clinv.pl
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists
perl /scratch/prasannalab/luad_drivr_mutns/identifying_mutns_common_to_omim_and_clinv.pl /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/laml_82cbio_mutns_with_rs_cv_ids.txt /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/omim_all_av_onco457.txt laml_cbio82_rs_mapped_to_omim.txt laml_cbio82_clinv_mapped_to_omim.txt
uniq laml_cbio82_clinv_mapped_to_omim.txt > laml_cbio82_clinv_mapped_to_omim_uniq.txt
#file to be used is laml_cbio82_clinv_mapped_to_omim_uniq.txt; this is for the foll reason:
#a mutn (e.g., DNMT3A R882C) may occur once in the input file (laml_82cbio_mutns_with_rs_cv_ids.txt), 
#but may be associated with multiple RCV identifiers (7 identifiers for DNMT3A R882C); hence in the output file 
#(laml_cbio82_clinv_mapped_to_omim.txt) the mutn (DNMT3A R882C) is repeated as many times as there are RCV
#identifiers (7 times for DNMT3A R882C); hence, to remove repeating mutn lines arising due to multiple RCV 
#identifiers, the uniq command has to be used;

wc -l laml_82cbio_mutns_with_rs_cv_ids.txt laml_cbio82_rs_mapped_to_omim.txt laml_cbio82_clinv_mapped_to_omim.txt laml_cbio82_clinv_mapped_to_omim_uniq.txt
#   83 (83 - 1 header = 82) laml_82cbio_mutns_with_rs_cv_ids.txt         (input file)
#   49 (49 - 1 header = 48) laml_cbio82_rs_mapped_to_omim.txt            (output file)
#  291 (291 - 1 header = 290) laml_cbio82_clinv_mapped_to_omim.txt         (output file)
#   85 (85 - 1 header = 84) laml_cbio82_clinv_mapped_to_omim_uniq.txt    (output file)


#did another sort and uniq -c on output file, laml_cbio82_clinv_mapped_to_omim_uniq.txt ;  
#this was done to club together identical mutations that might have been missed by above uniq cmd;
sort laml_cbio82_clinv_mapped_to_omim_uniq.txt | uniq -c > laml_cbio82_clinv_mapped_to_omim_sortuniqc.txt 
#wc -l laml_cbio82_clinv_mapped_to_omim_sortuniqc.txt = 29 (29-1 header = 28)
#thus 84 from the *_uniq.txt file has reduced to 28 in the *_sortuniqc.txt file;

#edited the file to bring header line to top of file, and to remove the count for header line;
vi laml_cbio82_clinv_mapped_to_omim_sortuniqc.txt
#this file gives count of number of times each unique mutation repeats; 

#only the KRAS G12D and G12V mutns has $5 != $6; remaining 26 entries have $5=$6; 
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' laml_cbio82_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 != $6)' 

awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' laml_cbio82_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 == $6)' | grep "CTNNB1"
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' laml_cbio82_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)' | grep "CTNNB1"
awk -F"\t" '{IFS=OFS="\t"}{print $1, $2, $3, $11, $5, $12, $6, $13}' laml_cbio82_clinv_mapped_to_omim_sortuniqc.txt | sed 's/rs//' | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 == $6)' | grep "ENST00000260795.2:c.1138G>A"
#for luad, in all 13 entries, $5=$6; 

###NOTE: below, I am using the *_uniq.txt file, NOT *_sortuniqc.txt file; this 
###is to get a proper count of uniq mutations; using *_sortuniqc.txt file below to get the final file gave some 
###duplicate mutations; hence, decided to use the *_uniq.txt file below to get the final file;
###however, using the *_sortuniqc.txt file ABOVE is helpful because the lists to examine are shorter;  
###the foll cmds may have to be customised in different cancers to include mutns you think should be included;

#for laml, foll first two cmds sufficient to generate the output file; 
#in laml, 2 mutns (2 KRAS) have mismatched ids; on inspection it seemed that both mutns 
#could be included, because both the KRAS mutns have been encountered before; 
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' laml_cbio82_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 ~ /Gene/){print}($1 !~ /Gene/)&&($5 ~ $4)' > junk
#wc -l = 55 - 1 = 54
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' laml_cbio82_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)' >> junk
#wc -l = 30; repeating KRAS mutns;  

##foll 2 not needed for laml;
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' laml_cbio82_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)&&($5 ~ /^$/)' >> junk
awk -F"\t" '{IFS=OFS="\t"}{print $1, $3, $11, $5, $12, $6, $13, $10, $2, $4}' laml_cbio82_clinv_mapped_to_omim_uniq.txt | awk -F"\t" '{IFS=OFS="\t"}($1 !~ /Gene/)&&($5 !~ $4)' | grep "ENST00000263967.3:c.1634A>C" >> junk

sort junk | uniq -c > junk2
#wc -l junk2 = 29
#edit file junk2 to move header line to top; remove count for header line; add a col heading called "n(mutns)\t"
vi junk2
sed -e 's/^[ ]*//' -e '2,$s/ /\t/' junk2 > laml_cbio_omim_matched_mutns.txt
#wc -l laml_cbio_omim_matched_mutns.txt = 29 (28 uniq mutns + 1 header line = 29)

#Have to introduce the correct counts for each mutation in laml_cbio_omim_matched_mutns.txt from
#laml_drivers_for_ogenes_with_omimdiseases.txt or laml_temp_drivers.txt ; 
#have to turn laml_cbio_omim_matched_mutns.txt into a batch file which searches for each mutn in the
#above 2 driver files;
#have to create a batch file with cmds of the foll kind; 
#awk -F"\t" '{IFS=OFS="\t"}($1 ~ /^BAP1$/) && ($6 ~ /^Q267\*$/) && ($22 ~ /^ENST00000460680.1:c.799C>T$/)' laml_drivers_for_ogenes_with_omimdiseases.txt
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $2, $3, $10}' laml_cbio_omim_matched_mutns.txt | uniq > prep_laml_noccs_cbio_omim_matched_mutns.sh 
vi prep_laml_noccs_cbio_omim_matched_mutns.sh
#:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}(\$1 \~ \/\^/
#:1,$s/\t/    /
#:1,$s/    /\$\/) \&\& (\$6 \~ \/^/
#:1,$s/\t/    /
#:1,$s/    /\$\/) \&\& (\$22 \~ \/\^/
#:1,$s/$/\$\/)' laml_drivers_for_ogenes_with_omimdiseases.txt/
#:1,$s/\*/\\*/g
#:wq
cp prep_laml_noccs_cbio_omim_matched_mutns.sh tst1.sh
vi tst1.sh
#####:1,$s/gbm_drivers_for_ogenes_with_omimdiseases.txt/\/scratch\/prasannalab\/cancers_in_detail\/gbm\/gbm_drivers.txt/
#####for gbm, EDIT ABOVE MODIFIED TO THE ONE BELOW 
#:1,$s/laml_drivers_for_ogenes_with_omimdiseases.txt/laml_temp_drivers.txt/
#:wq
sh tst1.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | more
#the output from tst1.sh should be same as output from cmd below: 
sh prep_laml_noccs_cbio_omim_matched_mutns.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | more

#if outputs are same, use cmds below to get final file;
echo "" > scratch.txt
sh prep_laml_noccs_cbio_omim_matched_mutns.sh | awk -F"\t" '{IFS=OFS="\t"}{print $1, $6, $22}' | uniq -c | sed -e 's/^[ ]*//' -e '1,$s/ /\t/' >> scratch.txt
#Use foll cmd to MANUALLY MAKE DUPLICATE LINES in scratch.txt of those mutations which occur multiple 
#times in laml_cbio_omim_matched_mutns.txt; to identify the duplicate mutations in 
#laml_cbio_omim_matched_mutns.txt, use foll cmd: (in laml, only KRAS G12D and G12V 
#had to be duplicated); 
awk -F"\t" '{IFS=OFS="\t"}(NR != 1){print $2, $3, $10}' laml_cbio_omim_matched_mutns.txt | uniq -c | more 
vi scratch.txt
#use paste cmd below to make sure the same gene and mutn lines are being pasted;
paste -d"\t" scratch.txt laml_cbio_omim_matched_mutns.txt | more
paste -d"\t" scratch.txt laml_cbio_omim_matched_mutns.txt | awk -F"\t" '{IFS=OFS="\t"}{print $1,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}' > laml_noccs_cbio_omim_matched_mutns.txt

###taking foll file unix file to xl: 
#/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/laml_noccs_cbio_omim_matched_mutns.txt
#downloaded to windows area: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\laml\laml_noccs_cbio_omim_matched_mutns.txt
#xl file = D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\cancer_results.xlsx
#sheet = laml_cbio_omim_mutns ;

-------------------------------------------------------------------
#NOTE: the counts of total mutations, unique mutns, repeating mutns, and mutns in clinvar,  
#are for all oncokb driver genes in each cancer; the counts for the omim-related study differ
#because they are for the subset of oncokb genes which are associated with omim disease; i.e.,
#out of the set of 862 oncokb genes which are in reactome, 485 are associated with omim diseases;
#the driver mutations associated with these 485 genes in each cancer are being considered; 
-------------------------------------------------------------------

#used foll cmd to check if the coadread output file obtained using the new omim_all_av_onco457.txt file is 
#the same as the one obtained using coadread_omim_all_av.txt; created a temporary sub-dir, and executed 
#foll cmd; the output files obtained using below cmd were (thankfully) the same as the output files 
#obtained previously using coadread_omim_all_av.txt (i.e., coadread_cbio640_rs_mapped_to_omim.txt, 
#coadread_cbio640_clinv_mapped_to_omim.txt); hence deleted the new files and sub-directory, and continued 
#working with the output files obtained previously; 
mkdir /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/temp_coadread
perl /scratch/prasannalab/luad_drivr_mutns/identifying_mutns_common_to_omim_and_clinv.pl /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/coadread_640cbio_mutns_with_rs_cv_ids.txt /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/omim_all_av_onco457.txt tmpcoadread_cbio640_rs_mapped_to_omim.txt tmpcoadread_cbio640_clinv_mapped_to_omim.txt

-------------------------------------------------------------------

#downloading omim av files for 306 blair_mel genes associated with omim diseases; 
#the list of genes are in the file:
#/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/306_bmgenes_with_omimdiseases.txt 
#downloaded the files to windows area:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\all_omim_avfiles\bmgenes_assoc_omimdiseases

mkdir /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/bmgenes_assoc_omimdiseases
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/bmgenes_assoc_omimdiseases

#making copy of 306 bmgenes list for making notes during download;
cp /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/trimming_omim_disease_lists/306_bmgenes_with_omimdiseases.txt downloadnotes_306_bmgenes_with_omimdiseases.txt

#transferred files from above-mentioned windows area to pwd; there are 304 omim av files; 2 genes 
#have no av; 


#trial cmd;
awk -F"\t" '{IFS=OFS="\t"}(NR<9)||($0 ~ /^$/){print $0}(NR==9){print "Gene", $0}(NR>9)&&($0 !~ /^$/){print "APC", $0}' OMIM-Allelic-Variants-611731_APC.tsv

#creating small batch file to modify OMIM allelic variant (av) files;
#used ls1col cmd to create a list of genes whose omim av files have been downloaded;
ls1col *.tsv | sed -e 's/OMIM-Allelic-Variants-//' -e 's/[0-9]*_//' -e 's/.tsv//' > lst_304downloaded_omgenes_with_omdiseases.txt  

#wc -l lst_304downloaded_omgenes_with_omdiseases.txt = 304
cp lst_304downloaded_omgenes_with_omdiseases.txt temp1.txt

#manually edited temp1.txt to incorporate lines such as below:
#awk -F"\t" '{IFS=OFS="\t"}(NR==9){print "Gene", $0}(NR>9)&&($0 !~ /^$/){print "F8", $0}' OMIM-Allelic-Variants-300841_F8.tsv`>> bm304_omim_all_av.txt
vi temp1.txt
:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}(NR==9){print "Gene", \$0}(NR>9)\&\&(\$0 \!\~ \/\^\$\/){print "/
:1,$s/$/", \$0}' /
:wq

#temp file containing omim av filenames;  
ls1col *.tsv > temp2.txt
#wc -l temp2.txt = 304

paste -d" " temp1.txt temp2.txt > bm304_modify_omim_av_files.sh

vi bm304_modify_omim_av_files.sh
:1,$s/  OMIM/ OMIM/
:1,$s/$/ >> bm304_omim_all_av.txt/
:wq

sh bm304_modify_omim_av_files.sh
#output file = bm304_omim_all_av.txt

grep -v "Gene" bm304_omim_all_av.txt | wc -l
#5189   total number of omim av in the set of 304 blair-mel genes with omim diseases; 
#       the number of av are large; 

#checking if the total number of 5189 omim av obtained above is correct; using grep to search for the pattern 
#"Selected Example" in multiple files;
grep "Selected Example" OMIM*.tsv | awk -F"Variants " '{print $2}' | sed -e 's/(//' -e 's/ Selected Examples)//' -e 's/ Selected Example)//' | awk '{count += $1; print $1, count}'
#5189   this is the total obtained upon counting the numbers given in the "Selected Examples" or "Selected Example" lines; 
#       it matches the above total of 5189;

#removed header lines for individual genes, but retained one header line at the top; 
#i.e., 5189 av + 1 header line; 
awk -F"\t" '{IFS=OFS="\t"}(NR==1){print $0}(NR>1)&&($1 !~ /Gene/){print}' bm304_omim_all_av.txt > temp.txt
cp temp.txt bm304_omim_all_av.txt
rm temp.txt

#using foll cmd to remove mutations in which a single amino acid substitution is NOT occurring; 
awk -F"\t" '{print $4}' bm304_omim_all_av.txt | sed -e 's/, /\t/' | grep -v -e "BP DEL" -e "BP INS" -e "," -e ^$ -e "DEL" -e "-" -e "+" -e "/" -e "AND" -e " " -e "Mutation" | wc -l 
#3538
awk -F"\t" '{print $4}' bm304_omim_all_av.txt | sed -e 's/, /\t/' | grep -v -e "BP DEL" -e "BP INS" -e "," -e ^$ -e "DEL" -e "-" -e "+" -e "/" -e "AND" -e " " -e "Mutation" | sed '/\tTER/d' | wc -l 
#3529    last sed cmd above deletes no-stop mutations; e.g., HBA2 TER142Q, HBA2 TER142K, HBA2 TER142S

#unix tip:
#sed -n '/\tTER/p' suppress all other lines and print only the matched lines;
#sed '/\tTER/d'    delete the matched lines;

#run foll 2 cmds to get two files; the first file is an intermediate file which lists only the 
#single aa mutns in omim, for the set of 304 genes; mutations which are not single aa mutns
#have been deleted; the second file is the file obtained after changing 3 letter amino acid code
#to one letter code, and after replacing TER by *; the second file is the one to be used in cbio,
#to check if omim mutns occur in each cancer; 
awk -F"\t" '{IFS=OFS="\t"}{print $1, $4}' bm304_omim_all_av.txt | sed -e 's/, /\t/' | awk -F"\t" '{IFS=OFS="\t"}($1 == $2) {print $1, $3}($1 != $2)&&($2) {print $1, $3}' | grep -v -e "BP DEL" -e "BP INS" -e "," -e ^$ -e "DEL" -e "-" -e "+" -e "/" -e "AND" -e " " -e "Mutation" -e "EX" -e "Gene" | sed '/\tTER/d' | grep -v -e "BP DEL" -e "BP INS" -e "," -e ^$ -e "DEL" -e "INS" -e "-" -e "+" -e "/" -e "AND" -e " " -e "Mutation" -e "EX" -e "IVS" | sed -e '/\tTER/d' -e '/\t[0-9]\+/d'> bm304_1aa_mutns.txt
#wc -l bm304_1aa_mutns.txt = 3523

sed -e 's/\tALA/\tA/' -e 's/\tARG/\tR/' -e 's/\tASN/\tN/' -e 's/\tASP/\tD/' -e 's/\tCYS/\tC/' \
-e 's/\tGLN/\tQ/' -e 's/\tGLU/\tE/' -e 's/\tGLY/\tG/' -e 's/\tHIS/\tH/' -e 's/\tILE/\tI/' \
-e 's/\tLEU/\tL/' -e 's/\tLYS/\tK/' -e 's/\tMET/\tM/' -e 's/\tPHE/\tF/' -e 's/\tPRO/\tP/' \
-e 's/\tSER/\tS/' -e 's/\tTHR/\tT/' -e 's/\tTRP/\tW/' -e 's/\tTYR/\tY/' -e 's/\tVAL/\tV/' bm304_1aa_mutns.txt | \
sed -e 's/\([0-9]\+\)ALA/\1A/' -e 's/\([0-9]\+\)ARG/\1R/' -e 's/\([0-9]\+\)ASN/\1N/' -e 's/\([0-9]\+\)ASP/\1D/' \
-e 's/\([0-9]\+\)CYS/\1C/' -e 's/\([0-9]\+\)GLN/\1Q/' -e 's/\([0-9]\+\)GLU/\1E/' -e 's/\([0-9]\+\)GLY/\1G/' \
-e 's/\([0-9]\+\)HIS/\1H/' -e 's/\([0-9]\+\)ILE/\1I/' -e 's/\([0-9]\+\)LEU/\1L/' -e 's/\([0-9]\+\)LYS/\1K/' \
-e 's/\([0-9]\+\)MET/\1M/' -e 's/\([0-9]\+\)PHE/\1F/' -e 's/\([0-9]\+\)PRO/\1P/' -e 's/\([0-9]\+\)SER/\1S/' \
-e 's/\([0-9]\+\)THR/\1T/' -e 's/\([0-9]\+\)TRP/\1W/' -e 's/\([0-9]\+\)TYR/\1Y/' -e 's/\([0-9]\+\)VAL/\1V/' \
-e 's/\([0-9]\+\)TER/\1\*/' | awk -F"\t" '{print $1 ": MUT = " $2}' > bm304_1aa_mutns_for_cbio.txt
#wc -l bm304_1aa_mutns_for_cbio.txt = 3523; 

#transferred this file to windows area: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\all_omim_avfiles\bmgenes_assoc_omimdiseases\omim_mutns_in_cbio\bm304_1aa_mutns_for_cbio.txt

#used the above file in cbioportal to see if the omim mutations occur in each cancer; 

#There are 302 bmgenes, after discounting 2 genes for which no av tables are available;
#to begin with, there are 5189 av for the 302 genes; after removing avs which can't be
#searched in cbio (see grep -v cmd above), there is a final set of 3523 avs in which 
#an aa substitution or a nonsense mutation occurs; these 3523 avs were searched for in 
#cbioportal, for each of 8 cancers;  

#counting the number of genes in which these 3523 avs occur; 
cut -f1,1 bm304_1aa_mutns.txt | uniq | wc -l
#293    the 3523 avs occur in 293 genes; 

#omim mutations obsverved in coadread are in files in the windows area:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\all_omim_avfiles\bmgenes_assoc_omimdiseases\omim_mutns_in_cbio\COADREAD_om_to_cbio
#transferred these files to the foll sub-directory; 
mkdir /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/bmgenes_assoc_omimdiseases/om_mutns_in_cbio

ls1col *.tsv > temp1.txt
paste -d" " temp1.txt temp1.txt > temp2.txt
vi temp2.txt
#:1,$s/ / coadread_/
#:1,$s/^/mv /
cp temp2.txt renm_coadread_files.sh
rm temp1.txt temp2.txt
sh renm_coadread_files.sh

#next, transfer brca files from windows area to pwd:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\all_omim_avfiles\bmgenes_assoc_omimdiseases\omim_mutns_in_cbio\BRCA_om_to_cbio
ls1col | grep -v -e "coadread" > temp1.txt
paste -d" " temp1.txt temp1.txt > temp2.txt
vi temp2.txt
#delete temp1.txt line
#:1,$s/ / brca_/
#:1,$s/^/mv /
cp temp2.txt renm_brca_files.sh
rm temp1.txt temp2.txt
sh renm_brca_files.sh

#next, transfer kirc files from windows area to pwd:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\all_omim_avfiles\bmgenes_assoc_omimdiseases\omim_mutns_in_cbio\KIRC_om_to_cbio
ls1col | grep -v -e "coadread" -e "brca" > temp1.txt
paste -d" " temp1.txt temp1.txt > temp2.txt
vi temp2.txt
#delete temp1.txt line
#:1,$s/ / kirc_/
#:1,$s/^/mv /
cp temp2.txt renm_kirc_files.sh
rm temp1.txt temp2.txt
sh renm_kirc_files.sh

#next, transfer hnsc files from windows area to pwd:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\all_omim_avfiles\bmgenes_assoc_omimdiseases\omim_mutns_in_cbio\HNSC_om_to_cbio
ls1col | grep -v -e "coadread" -e "brca" -e "kirc" > temp1.txt
paste -d" " temp1.txt temp1.txt > temp2.txt
vi temp2.txt
#delete temp1.txt line
#:1,$s/ / hnsc_/
#:1,$s/^/mv /
cp temp2.txt renm_hnsc_files.sh
rm temp1.txt temp2.txt
sh renm_hnsc_files.sh

#next, transfer gbm files from windows area to pwd:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\all_omim_avfiles\bmgenes_assoc_omimdiseases\omim_mutns_in_cbio\GBM_om_to_cbio
ls1col | grep -v -e "coadread" -e "brca" -e "kirc" -e "hnsc" > temp1.txt
paste -d" " temp1.txt temp1.txt > temp2.txt
vi temp2.txt
#delete temp1.txt line
#:1,$s/ / gbm_/
#:1,$s/^/mv /
cp temp2.txt renm_gbm_files.sh
rm temp1.txt temp2.txt
sh renm_gbm_files.sh

#next, transfer luad files from windows area to pwd:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\all_omim_avfiles\bmgenes_assoc_omimdiseases\omim_mutns_in_cbio\LUAD_om_to_cbio
ls1col | grep -v -e "coadread" -e "brca" -e "kirc" -e "hnsc" -e "gbm" > temp1.txt
paste -d" " temp1.txt temp1.txt > temp2.txt
vi temp2.txt
#delete temp1.txt line
#:1,$s/ / luad_/
#:1,$s/^/mv /
cp temp2.txt renm_luad_files.sh
rm temp1.txt temp2.txt
sh renm_luad_files.sh

#next, transfer skcm files from windows area to pwd:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\all_omim_avfiles\bmgenes_assoc_omimdiseases\omim_mutns_in_cbio\SKCM_om_to_cbio
ls1col | grep -v -e "coadread" -e "brca" -e "kirc" -e "hnsc" -e "gbm" -e "luad" > temp1.txt
paste -d" " temp1.txt temp1.txt > temp2.txt
vi temp2.txt
#delete temp1.txt line
#:1,$s/ / skcm_/
#:1,$s/^/mv /
cp temp2.txt renm_skcm_files.sh
rm temp1.txt temp2.txt
sh renm_skcm_files.sh

#below, getting all the omim mutns found in each of the 7 cancers (no omim mutns found in laml)
#into a single file, with the addition of cancer name and gene name for each mutation; in this file, 
#plan to only include: cancer name, gene name, TCGA sample Id, Protein change; plan to leave out
#all other information; 
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/bmgenes_assoc_omimdiseases/om_mutns_in_cbio
#plan to generate a prep file with cmds of the foll kind;  
#awk -F"\t" '{IFS=OFS="\t"}{print "brca", "AHI1", $2, $5}' brca_AHI1.tsv
ls1col *.tsv > temp1.txt
paste -d" " temp1.txt temp1.txt > temp2.txt
vi temp2.txt
#:1,$s/_/ /
#:1,$s/.tsv//
#:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}{print "/
#:1,$s/brca /brca", "/
#:1,$s/coadread /coadread", "/
#:1,$s/kirc /kirc", "/
#:1,$s/gbm /gbm", "/
#:1,$s/hnsc /hnsc", "/
#:1,$s/luad /luad", "/
#:1,$s/skcm /skcm", "/
#:1,$s/ brca_/", \$2, \$5}' brca_/
#:1,$s/ coadread_/", \$2, \$5}' coadread_/
#:1,$s/ kirc_/", \$2, \$5}' kirc_/
#:1,$s/ hnsc_/", \$2, \$5}' hnsc_/
#:1,$s/ gbm_/", \$2, \$5}' gbm_/
#:1,$s/ luad_/", \$2, \$5}' luad_/
#:1,$s/ skcm_/", \$2, \$5}' skcm_/
#:wq
mv temp2.txt prep_omim_mutns_in_cbio.sh 

sh prep_omim_mutns_in_cbio.sh | awk -F"\t" '(NR==1)||($0 !~ /Sample ID/)' | more
#wc -l = 137 - 1 header line = 136

sh prep_omim_mutns_in_cbio.sh | awk -F"\t" '(NR==1)||($0 !~ /Sample ID/)' | sort -k1,1 -k3,3 > om_mutns_in_cbio_sorted_by_can_and_smplid.txt
#wc -l om_mutns_in_cbio_sorted_by_can_and_smplid.txt = 137 - 1 header line = 136

sh prep_omim_mutns_in_cbio.sh | awk -F"\t" '($0 !~ /Sample ID/)' | awk -F"\t" '{print $2}' | sort | uniq -c > omgenes_mutated_in_cbio.txt
#wc -l omgenes_mutated_in_cbio.txt = 78
#mutns in only 78 genes out of 293 are seen in all 7 cancers; some genes are mutated in several cancers; 

sh prep_omim_mutns_in_cbio.sh | awk -F"\t" '($0 !~ /Sample ID/)' | sort -k2,2 -k4,4 > om_mutns_in_cbio_sorted_by_gene_and_mutn_1letteraacode.txt
#this is the file to be taken further; it will be converted to a prep file to search for the mutn among omim av
#in order to identify the omim disease effect; 

sh prep_omim_mutns_in_cbio.sh | awk -F"\t" '($0 !~ /Sample ID/)' | awk -F"\t" '($4 ~ /^R/){print $4}' > om_mutns_in_cbio_are_freq_arg_mutns.txt
#wc -l om_mutns_in_cbio_are_freq_arg_mutns.txt = 79;  
#79   out of 136 omim-mutns-in-cbio, in more than half, R is mutated; 
#some mutations occur at the same position in more than one cancer; 
 
#pwd = /scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/bmgenes_assoc_omimdiseases/om_mutns_in_cbio

#in the above file, om_mutns_in_cbio_sorted_by_gene_and_mutn.txt, converting from 1-letter code of cbio aa mutn, 
#back to 3-letter code of omim aa mutn;
sed -e 's/\(-[0-9]\+\t\)A/\1ALA/' -e 's/\(-[0-9]\+\t\)R/\1ARG/' -e 's/\(-[0-9]\+\t\)N/\1ASN/' \
-e 's/\(-[0-9]\+\t\)D/\1ASP/' -e 's/\(-[0-9]\+\t\)C/\1CYS/' -e 's/\(-[0-9]\+\t\)G/\1GLY/' \
-e 's/\(-[0-9]\+\t\)Q/\1GLN/' -e 's/\(-[0-9]\+\t\)E/\1GLU/' -e 's/\(-[0-9]\+\t\)H/\1HIS/' \
-e 's/\(-[0-9]\+\t\)I/\1ILE/' -e 's/\(-[0-9]\+\t\)L/\1LEU/' -e 's/\(-[0-9]\+\t\)K/\1LYS/' \
-e 's/\(-[0-9]\+\t\)M/\1MET/' -e 's/\(-[0-9]\+\t\)P/\1PRO/' -e 's/\(-[0-9]\+\t\)F/\1PHE/' \
-e 's/\(-[0-9]\+\t\)S/\1SER/' -e 's/\(-[0-9]\+\t\)T/\1THR/' -e 's/\(-[0-9]\+\t\)W/\1TRP/' \
-e 's/\(-[0-9]\+\t\)Y/\1TYR/' -e 's/\(-[0-9]\+\t\)V/\1VAL/' \
-e 's/\([0-9]\+\)Y$/\1TYR/' -e 's/\([0-9]\+\)G$/\1GLY/' -e 's/\([0-9]\+\)R$/\1ARG/' \
-e 's/\([0-9]\+\)A$/\1ALA/' -e 's/\([0-9]\+\)N$/\1ASN/' -e 's/\([0-9]\+\)D$/\1ASP/' \
-e 's/\([0-9]\+\)S$/\1SER/' -e 's/\([0-9]\+\)C$/\1CYS/' -e 's/\([0-9]\+\)Q$/\1GLN/' \
-e 's/\([0-9]\+\)E$/\1GLU/' -e 's/\([0-9]\+\)H$/\1HIS/' -e 's/\([0-9]\+\)I$/\1ILE/' \
-e 's/\([0-9]\+\)L$/\1LEU/' -e 's/\([0-9]\+\)K$/\1LYS/' -e 's/\([0-9]\+\)T$/\1THR/' \
-e 's/\([0-9]\+\)M$/\1MET/' -e 's/\([0-9]\+\)F$/\1PHE/' -e 's/\([0-9]\+\)P$/\1PRO/' \
-e 's/\([0-9]\+\)W$/\1TRP/' -e 's/\([0-9]\+\)V$/\1VAL/' -e 's/\([0-9]\+\)\*/\1TER/' \
om_mutns_in_cbio_sorted_by_gene_and_mutn_1letteraacode.txt > om_mutns_in_cbio_sorted_by_gene_and_mutn_3letteraacode.txt
awk -F"\t" '{IFS=OFS="\t"}{print $2, $4}' om_mutns_in_cbio_sorted_by_gene_and_mutn_3letteraacode.txt > temp.txt

#temp.txt will be used to create commands of the foll kind;
#awk -F"\t" '{IFS=OFS="\t"}($0 ~ /ABCC6/) && ($0 ~ /ARG1164TER/){print $1, $3, $4}' ../bm304_omim_all_av.txt
vi temp.txt
#:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}(\$0 \~ \//
#:1,$s/\t/\/) \&\& (\$0 \~ \//
#:1,$s/$/\/){print \$1, \$3, \$4}' /
#:1,$s/$/\/scratch\/prasannalab\/cancers_in_detail\/map_tcga_mutns_to_omim\/all_omim_avfiles\/bmgenes_assoc_omimdiseases\/bm304_omim_all_av.txt/
#:wq
mv temp.txt prep_omphenotype_for_ommutns_in_cbio.sh
sh prep_omphenotype_for_ommutns_in_cbio.sh | awk -F"\t" '!($3 ~ /AND/)' > omphenotype_for_ommutns_in_cbio.txt

#in xl, manually paste om_mutns_in_cbio_sorted_by_gene_and_mutn_3letteraacode.txt and 
#omphenotype_for_ommutns_in_cbio.txt side by side; manually align the mutns and phenotypes; 
#also, create a sheet with om_mutns_in_cbio_sorted_by_can_and_smplid.txt;
#also, mention that out of 5189 avs for 304 genes, we have examined the occurrence of 3523 avs in 
#cbio; the 3523 avs occur in 293 genes; out of 293 genes, only 78 genes occur in cbio; from 
#these 79 genes 136 avs occur in cbio; of these 136 avs obsvd in cbio, 79 (i.e., more than half) 
#are arg mutns; create table om_mutns_in_cbio_are_freq_arg_mutns.txt in xl;

#taking foll files:
/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/bmgenes_assoc_omimdiseases/om_mutns_in_cbio/omgenes_mutated_in_cbio.txt
/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/bmgenes_assoc_omimdiseases/om_mutns_in_cbio/om_mutns_in_cbio_sorted_by_can_and_smplid.txt
/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/bmgenes_assoc_omimdiseases/om_mutns_in_cbio/om_mutns_in_cbio_are_freq_arg_mutns.txt
/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/bmgenes_assoc_omimdiseases/om_mutns_in_cbio/om_mutns_in_cbio_sorted_by_gene_and_mutn_3letteraacode.txt
/scratch/prasannalab/cancers_in_detail/map_tcga_mutns_to_omim/all_omim_avfiles/bmgenes_assoc_omimdiseases/om_mutns_in_cbio/omphenotype_for_ommutns_in_cbio.txt side by side
#transferred files to: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files
#the files are incorporated into xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\cancer_results_1186.xlsx
--------------------------------------------------
#started a new cmd file for the pways part;
/scratch/prasannalab/cancers_in_detail/pway_anal/cmd4_forwriteup.sh

############################################################
############################################################
############################################################

# MASTERFILES 4 and 5 query the Reactome Graph DB with cypher queries to obtain all reactions 
#in each of 28 top-level pathways;

#4) MASTERFILE4 = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

Autophagy ; R-HSA-9612973

MATCH (p:Pathway{stId:"R-HSA-9612973"})-[:hasEvent*1..5]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

108 records

*1..5 = 5 relationships, 6 nodes;
-------------------------------------------------
Cell Cycle ; R-HSA-1640170

MATCH (p:Pathway{stId:"R-HSA-1640170"})-[:hasEvent*1..8]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

449 records

*1..8 = 8 relationships, 9 nodes;
-------------------------------------------------
Cell-Cell communication ; R-HSA-1500931 

MATCH (p:Pathway{stId:"R-HSA-1500931"})-[:hasEvent*1..5]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

60 records

*1..5 = 5 relationships, 6 nodes;
-------------------------------------------------
Cellular responses to stimuli ; R-HSA-8953897 

MATCH (p:Pathway{stId:"R-HSA-8953897"})-[:hasEvent*1..6]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

412 records

*1..6 = 6 relationships, 7 nodes;
-------------------------------------------------
Chromatin organization ; R-HSA-4839726 

MATCH (p:Pathway{stId:"R-HSA-4839726"})-[:hasEvent*1..3]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

85 records

*1..3 = 3 relationships, 4 nodes;
-------------------------------------------------
Circadian Clock ; R-HSA-400253 

MATCH (p:Pathway{stId:"R-HSA-400253"})-[:hasEvent*1..2]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

59 records

*1..2 = 2 relationships, 3 nodes;
-------------------------------------------------
Developmental Biology ; R-HSA-1266738 

MATCH (p:Pathway{stId:"R-HSA-1266738"})-[:hasEvent*1..6]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

556 records

*1..6 = 6 relationships, 7 nodes;
-------------------------------------------------
Digestion and absorption ; R-HSA-8963743 

MATCH (p:Pathway{stId:"R-HSA-8963743"})-[:hasEvent*1..3]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

30 records

*1..3 = 3 relationships, 4 nodes;
-------------------------------------------------
Disease ; R-HSA-1643685 

MATCH (p:Pathway{stId:"R-HSA-1643685"})-[:hasEvent*1..9]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

1632 records

*1..9 = 9 relationships, 10 nodes;
-------------------------------------------------
DNA Repair ; R-HSA-73894 

MATCH (p:Pathway{stId:"R-HSA-73894"})-[:hasEvent*1..7]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

335 records

*1..7 = 7 relationships, 8 nodes;
-------------------------------------------------
DNA Replication ; R-HSA-69306 

MATCH (p:Pathway{stId:"R-HSA-69306"})-[:hasEvent*1..6]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

47 records

*1..6 = 6 relationships, 7 nodes;
-------------------------------------------------
Drug ADME ; R-HSA-9748784 

MATCH (p:Pathway{stId:"R-HSA-9748784"})-[:hasEvent*1..6]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

DOES NOT WORK
-------------------------------------------------
Extracellular matrix organization ; R-HSA-1474244 

MATCH (p:Pathway{stId:"R-HSA-1474244"})-[:hasEvent*1..4]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

319 records

*1..4 = 4 relationships, 5 nodes;
-------------------------------------------------
Gene expression (Transcription) ; R-HSA-74160 

MATCH (p:Pathway{stId:"R-HSA-74160"})-[:hasEvent*1..7]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

1001 records

*1..7 = 7 relationships, 8 nodes;
-------------------------------------------------
Hemostasis ; R-HSA-109582 

MATCH (p:Pathway{stId:"R-HSA-109582"})-[:hasEvent*1..5]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

334 records

*1..5 = 5 relationships, 6 nodes;
-------------------------------------------------
Immune System ; R-HSA-168256 

MATCH (p:Pathway{stId:"R-HSA-168256"})-[:hasEvent*1..8]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

1627 records

*1..8 = 8 relationships, 9 nodes;
-------------------------------------------------
Metabolism ; R-HSA-1430728 

MATCH (p:Pathway{stId:"R-HSA-1430728"})-[:hasEvent*1..6]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

2250 records

*1..6 = 6 relationships, 7 nodes;
-------------------------------------------------
Metabolism of proteins ; R-HSA-392499 

MATCH (p:Pathway{stId:"R-HSA-392499"})-[:hasEvent*1..6]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

798 records

*1..6 = 6 relationships, 7 nodes;
-------------------------------------------------
Metabolism of RNA ; R-HSA-8953854 

MATCH (p:Pathway{stId:"R-HSA-8953854"})-[:hasEvent*1..5]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

189 records

*1..5 = 5 relationships, 6 nodes;
-------------------------------------------------
Muscle contraction ; R-HSA-397014 

MATCH (p:Pathway{stId:"R-HSA-397014"})-[:hasEvent*1..3]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

42 records

*1..3 = 3 relationships, 4 nodes;
-------------------------------------------------
Neuronal System ; R-HSA-112316 

MATCH (p:Pathway{stId:"R-HSA-112316"})-[:hasEvent*1..7]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

216 records

*1..7 = 7 relationships, 8 nodes;
-------------------------------------------------
Organelle biogenesis and maintenance ; R-HSA-1852241 

MATCH (p:Pathway{stId:"R-HSA-1852241"})-[:hasEvent*1..4]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

86 records

*1..4 = 4 relationships, 5 nodes;
-------------------------------------------------
Programmed Cell Death ; R-HSA-5357801 

MATCH (p:Pathway{stId:"R-HSA-5357801"})-[:hasEvent*1..7]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

197 records

*1..7 = 7 relationships, 8 nodes;
-------------------------------------------------
Protein localization ; R-HSA-9609507 

MATCH (p:Pathway{stId:"R-HSA-9609507"})-[:hasEvent*1..3]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

53 records

*1..3 = 3 relationships, 4 nodes;
-------------------------------------------------
Reproduction ; R-HSA-1474165 

MATCH (p:Pathway{stId:"R-HSA-1474165"})-[:hasEvent*1..3]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

24 records

*1..3 = 3 relationships, 4 nodes;
-------------------------------------------------
Sensory Perception ; R-HSA-9709957 

MATCH (p:Pathway{stId:"R-HSA-9709957"})-[:hasEvent*1..4]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

107 records

*1..4 = 4 relationships, 5 nodes;
-------------------------------------------------
Signal Transduction ; R-HSA-162582 

MATCH (p:Pathway{stId:"R-HSA-162582"})-[:hasEvent*1..9]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

2445 records

*1..9 = 9 relationships, 10 nodes;
-------------------------------------------------
Transport of small molecules ; R-HSA-382551 

MATCH (p:Pathway{stId:"R-HSA-382551"})-[:hasEvent*1..6]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

442 records

*1..6 = 6 relationships, 7 nodes;
-------------------------------------------------
Vesicle-mediated transport ; R-HSA-5653656 

MATCH (p:Pathway{stId:"R-HSA-5653656"})-[:hasEvent*1..7]->(rle:ReactionLikeEvent)
RETURN DISTINCT rle

252 records

*1..7 = 7 relationships, 8 nodes;
-------------------------------------------------

############################################################

#5) MASTERFILE5 = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/toplevelpways/cypherq_for_hierarchy.txt

Circadian Clock ; R-HSA-400253
1     *1..2 = 2 relationships, 3 nodes; 

MATCH (p:Pathway{stId:"R-HSA-400253"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-400253"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn

--------------------------------------------------
--------------------------------------------------
Chromatin organization ; R-HSA-4839726
Digestion and absorption ; R-HSA-8963743
Muscle contraction ; R-HSA-397014
Protein localization ; R-HSA-9609507
Reproduction ; R-HSA-1474165
5     *1..3 = 3 relationships, 4 nodes;

#Chromatin organization ; R-HSA-4839726
//first part-query returns nothing; no rle directly under superpway
MATCH (p:Pathway{stId:"R-HSA-4839726"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-4839726"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-4839726"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn

#Digestion and absorption ; R-HSA-8963743
MATCH (p:Pathway{stId:"R-HSA-8963743"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-8963743"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-8963743"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn

Muscle contraction ; R-HSA-397014
MATCH (p:Pathway{stId:"R-HSA-397014"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-397014"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-397014"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn

Protein localization ; R-HSA-9609507
MATCH (p:Pathway{stId:"R-HSA-9609507"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-9609507"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-9609507"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn

Reproduction ; R-HSA-1474165
MATCH (p:Pathway{stId:"R-HSA-1474165"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1474165"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1474165"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn

--------------------------------------------------
--------------------------------------------------
Extracellular matrix organization ; R-HSA-1474244
Organelle biogenesis and maintenance ; R-HSA-1852241
Sensory Perception ; R-HSA-9709957
3     *1..4 = 4 relationships, 5 nodes;

Extracellular matrix organization ; R-HSA-1474244
MATCH (p:Pathway{stId:"R-HSA-1474244"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1474244"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1474244"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1474244"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn

Organelle biogenesis and maintenance ; R-HSA-1852241
MATCH (p:Pathway{stId:"R-HSA-1852241"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1852241"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1852241"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1852241"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn

Sensory Perception ; R-HSA-9709957
MATCH (p:Pathway{stId:"R-HSA-9709957"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-9709957"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-9709957"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-9709957"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn

--------------------------------------------------
--------------------------------------------------
Autophagy ; R-HSA-9612973
Cell-Cell communication ; R-HSA-1500931
Hemostasis ; R-HSA-109582
Metabolism of RNA ; R-HSA-8953854
4     *1..5 = 5 relationships, 6 nodes;

Autophagy ; R-HSA-9612973
MATCH (p:Pathway{stId:"R-HSA-9612973"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-9612973"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-9612973"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-9612973"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-9612973"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn

Cell-Cell communication ; R-HSA-1500931
MATCH (p:Pathway{stId:"R-HSA-1500931"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1500931"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1500931"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1500931"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1500931"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn

Hemostasis ; R-HSA-109582
MATCH (p:Pathway{stId:"R-HSA-109582"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-109582"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-109582"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-109582"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-109582"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn

Metabolism of RNA ; R-HSA-8953854
MATCH (p:Pathway{stId:"R-HSA-8953854"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-8953854"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-8953854"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-8953854"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-8953854"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn

--------------------------------------------------
--------------------------------------------------
Cellular responses to stimuli ; R-HSA-8953897
Developmental Biology ; R-HSA-1266738
DNA Replication ; R-HSA-69306
Metabolism ; R-HSA-1430728
Metabolism of proteins ; R-HSA-392499
Transport of small molecules ; R-HSA-382551
6     *1..6 = 6 relationships, 7 nodes;

Cellular responses to stimuli ; R-HSA-8953897
MATCH (p:Pathway{stId:"R-HSA-8953897"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-8953897"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-8953897"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-8953897"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-8953897"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-8953897"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, rle.stId AS r, rle.displayName AS rn

Developmental Biology ; R-HSA-1266738
MATCH (p:Pathway{stId:"R-HSA-1266738"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1266738"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1266738"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1266738"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1266738"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1266738"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, rle.stId AS r, rle.displayName AS rn

DNA Replication ; R-HSA-69306
MATCH (p:Pathway{stId:"R-HSA-69306"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-69306"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-69306"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-69306"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-69306"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-69306"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, rle.stId AS r, rle.displayName AS rn

Metabolism ; R-HSA-1430728
MATCH (p:Pathway{stId:"R-HSA-1430728"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1430728"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1430728"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1430728"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1430728"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1430728"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, rle.stId AS r, rle.displayName AS rn

Metabolism of proteins ; R-HSA-392499
MATCH (p:Pathway{stId:"R-HSA-392499"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-392499"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-392499"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-392499"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-392499"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-392499"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, rle.stId AS r, rle.displayName AS rn

Transport of small molecules ; R-HSA-382551
MATCH (p:Pathway{stId:"R-HSA-382551"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-382551"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-382551"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-382551"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-382551"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-382551"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, rle.stId AS r, rle.displayName AS rn

--------------------------------------------------
--------------------------------------------------
DNA Repair ; R-HSA-73894
Gene expression (Transcription) ; R-HSA-74160
Neuronal System ; R-HSA-112316
Programmed Cell Death ; R-HSA-5357801
Vesicle-mediated transport ; R-HSA-5653656
5     *1..7 = 7 relationships, 8 nodes;

DNA Repair ; R-HSA-73894
MATCH (p:Pathway{stId:"R-HSA-73894"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-73894"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-73894"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-73894"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-73894"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-73894"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-73894"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(s6p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, s6p.stId AS s6p, s6p.displayName AS s6pn, rle.stId AS r, rle.displayName AS rn

Gene expression (Transcription) ; R-HSA-74160
MATCH (p:Pathway{stId:"R-HSA-74160"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-74160"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-74160"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-74160"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-74160"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-74160"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-74160"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(s6p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, s6p.stId AS s6p, s6p.displayName AS s6pn, rle.stId AS r, rle.displayName AS rn

Neuronal System ; R-HSA-112316
MATCH (p:Pathway{stId:"R-HSA-112316"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-112316"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-112316"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-112316"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-112316"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-112316"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-112316"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(s6p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, s6p.stId AS s6p, s6p.displayName AS s6pn, rle.stId AS r, rle.displayName AS rn

Programmed Cell Death ; R-HSA-5357801
MATCH (p:Pathway{stId:"R-HSA-5357801"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-5357801"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-5357801"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-5357801"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-5357801"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-5357801"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-5357801"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(s6p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, s6p.stId AS s6p, s6p.displayName AS s6pn, rle.stId AS r, rle.displayName AS rn

Vesicle-mediated transport ; R-HSA-5653656
MATCH (p:Pathway{stId:"R-HSA-5653656"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-5653656"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-5653656"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-5653656"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-5653656"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-5653656"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-5653656"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(s6p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, s6p.stId AS s6p, s6p.displayName AS s6pn, rle.stId AS r, rle.displayName AS rn

--------------------------------------------------
--------------------------------------------------
Cell Cycle ; R-HSA-1640170
Immune System ; R-HSA-168256
2     *1..8 = 8 relationships, 9 nodes;

Cell Cycle ; R-HSA-1640170
MATCH (p:Pathway{stId:"R-HSA-1640170"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1640170"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1640170"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1640170"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1640170"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1640170"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1640170"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(s6p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, s6p.stId AS s6p, s6p.displayName AS s6pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1640170"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(s6p:Pathway)-[:hasEvent]->(s7p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, s6p.stId AS s6p, s6p.displayName AS s6pn, s7p.stId AS s7p, s7p.displayName AS s7pn, rle.stId AS r, rle.displayName AS rn

Immune System ; R-HSA-168256
MATCH (p:Pathway{stId:"R-HSA-168256"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-168256"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-168256"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-168256"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-168256"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-168256"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-168256"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(s6p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, s6p.stId AS s6p, s6p.displayName AS s6pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-168256"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(s6p:Pathway)-[:hasEvent]->(s7p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, s6p.stId AS s6p, s6p.displayName AS s6pn, s7p.stId AS s7p, s7p.displayName AS s7pn, rle.stId AS r, rle.displayName AS rn

--------------------------------------------------
--------------------------------------------------
Disease ; R-HSA-1643685
Signal Transduction ; R-HSA-162582
2     *1..9 = 9 relationships, 10 nodes;

Disease ; R-HSA-1643685
MATCH (p:Pathway{stId:"R-HSA-1643685"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1643685"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1643685"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1643685"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1643685"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1643685"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1643685"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(s6p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, s6p.stId AS s6p, s6p.displayName AS s6pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1643685"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(s6p:Pathway)-[:hasEvent]->(s7p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, s6p.stId AS s6p, s6p.displayName AS s6pn, s7p.stId AS s7p, s7p.displayName AS s7pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-1643685"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(s6p:Pathway)-[:hasEvent]->(s7p:Pathway)-[:hasEvent]->(s8p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, s6p.stId AS s6p, s6p.displayName AS s6pn, s7p.stId AS s7p, s7p.displayName AS s7pn, s8p.stId AS s8p, s8p.displayName AS s8pn, rle.stId AS r, rle.displayName AS rn

Signal Transduction ; R-HSA-162582
MATCH (p:Pathway{stId:"R-HSA-162582"})-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-162582"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-162582"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-162582"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-162582"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-162582"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-162582"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(s6p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, s6p.stId AS s6p, s6p.displayName AS s6pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-162582"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(s6p:Pathway)-[:hasEvent]->(s7p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, s6p.stId AS s6p, s6p.displayName AS s6pn, s7p.stId AS s7p, s7p.displayName AS s7pn, rle.stId AS r, rle.displayName AS rn
MATCH (p:Pathway{stId:"R-HSA-162582"})-[:hasEvent]->(s1p:Pathway)-[:hasEvent]->(s2p:Pathway)-[:hasEvent]->(s3p:Pathway)-[:hasEvent]->(s4p:Pathway)-[:hasEvent]->(s5p:Pathway)-[:hasEvent]->(s6p:Pathway)-[:hasEvent]->(s7p:Pathway)-[:hasEvent]->(s8p:Pathway)-[:hasEvent]->(rle:ReactionLikeEvent)
RETURN p.stId AS p, p.displayName AS pn, s1p.stId AS s1p, s1p.displayName AS s1pn, s2p.stId AS s2p, s2p.displayName AS s2pn, s3p.stId AS s3p, s3p.displayName AS s3pn, s4p.stId AS s4p, s4p.displayName AS s4pn, s5p.stId AS s5p, s5p.displayName AS s5pn, s6p.stId AS s6p, s6p.displayName AS s6pn, s7p.stId AS s7p, s7p.displayName AS s7pn, s8p.stId AS s8p, s8p.displayName AS s8pn, rle.stId AS r, rle.displayName AS rn

--------------------------------------------------
--------------------------------------------------

############################################################
############################################################
############################################################

# MASTERFILES 6 and 7 query the Reactome Graph DB with cypher queries to obtain, respectively, 
#all reactions in which each cancer- and comorbidity-associated gene participates;

#6) MASTERFILE6 = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/1066oncokbpways/all_1056_queries_oncokb_genes.cypher

//In which pathways does ABL1 (UniProt:P00519) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P00519"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ABL1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AKT1 (UniProt:P31749) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P31749"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AKT1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ALK (UniProt:Q9UM73) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UM73"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ALK_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AMER1 (UniProt:Q5JTC6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q5JTC6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AMER1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does APC (UniProt:P25054) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P25054"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS APC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AR (UniProt:P10275) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P10275"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARID1A (UniProt:O14497) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O14497"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARID1A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ASXL1 (UniProt:Q8IXJ9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8IXJ9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ASXL1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATM (UniProt:Q13315) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13315"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATM_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AXIN1 (UniProt:O15169) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15169"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AXIN1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BAP1 (UniProt:Q92560) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92560"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BAP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BCL2 (UniProt:P10415) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P10415"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BCL2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BCOR (UniProt:Q6W2J9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6W2J9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BCOR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BRAF (UniProt:P15056) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15056"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BRAF_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BRCA1 (UniProt:P38398) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P38398"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BRCA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BRCA2 (UniProt:P51587) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P51587"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BRCA2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CARD11 (UniProt:Q9BXL7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BXL7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CARD11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CBL (UniProt:P22681) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P22681"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CBL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CDC73 (UniProt:Q6P1J9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6P1J9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CDC73_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CDH1 (UniProt:P12830) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P12830"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CDH1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CDKN2A (UniProt:P42771) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P42771"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CDKN2A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CDKN2A (UniProt:Q8N726) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N726"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CDKN2A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CEBPA (UniProt:P49715) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P49715"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CEBPA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CIC (UniProt:Q96RK0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96RK0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CIC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CREBBP (UniProt:Q92793) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92793"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CREBBP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CTNNB1 (UniProt:P35222) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35222"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CTNNB1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DAXX (UniProt:Q9UER7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UER7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DAXX_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DNMT3A (UniProt:Q9Y6K1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y6K1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DNMT3A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EGFR (UniProt:P00533) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P00533"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EGFR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EP300 (UniProt:Q09472) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q09472"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EP300_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ERBB2 (UniProt:P04626) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04626"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ERBB2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EZH2 (UniProt:Q15910) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15910"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EZH2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FBXW7 (UniProt:Q969H0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q969H0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FBXW7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FGFR2 (UniProt:P21802) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P21802"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FGFR2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FGFR3 (UniProt:P22607) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P22607"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FGFR3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FLT3 (UniProt:P36888) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P36888"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FLT3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FOXL2 (UniProt:P58012) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P58012"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FOXL2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GATA3 (UniProt:P23771) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P23771"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GATA3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GNA11 (UniProt:P29992) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P29992"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GNA11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GNAQ (UniProt:P50148) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P50148"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GNAQ_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GNAS (UniProt:P63092) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P63092"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GNAS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GNAS (UniProt:Q5JWF2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q5JWF2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GNAS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HNF1A (UniProt:P20823) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P20823"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HNF1A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HRAS (UniProt:P01112) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P01112"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HRAS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IDH1 (UniProt:O75874) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75874"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IDH1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IDH2 (UniProt:P48735) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P48735"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IDH2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does JAK1 (UniProt:P23458) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P23458"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS JAK1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does JAK2 (UniProt:O60674) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O60674"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS JAK2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does JAK3 (UniProt:P52333) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P52333"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS JAK3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KDM5C (UniProt:P41229) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P41229"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KDM5C_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KDM6A (UniProt:O15550) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15550"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KDM6A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KIT (UniProt:P10721) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P10721"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KIT_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KMT2D (UniProt:O14686) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O14686"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KMT2D_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KRAS (UniProt:P01116) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P01116"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KRAS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MAP2K1 (UniProt:Q02750) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q02750"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MAP2K1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MAP3K1 (UniProt:Q13233) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13233"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MAP3K1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MED12 (UniProt:Q93074) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q93074"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MED12_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MEN1 (UniProt:O00255) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O00255"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MEN1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MET (UniProt:P08581) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P08581"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MET_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MLH1 (UniProt:P40692) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P40692"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MLH1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MPL (UniProt:P40238) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P40238"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MPL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MSH2 (UniProt:P43246) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P43246"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MSH2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MSH6 (UniProt:P52701) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P52701"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MSH6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MYD88 (UniProt:Q99836) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99836"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MYD88_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NF1 (UniProt:P21359) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P21359"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NF2 (UniProt:P35240) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35240"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NF2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NFE2L2 (UniProt:Q16236) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16236"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NFE2L2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NOTCH1 (UniProt:P46531) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P46531"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NOTCH1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NOTCH2 (UniProt:Q04721) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q04721"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NOTCH2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NPM1 (UniProt:P06748) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P06748"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NPM1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NRAS (UniProt:P01111) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P01111"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NRAS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PAX5 (UniProt:Q02548) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q02548"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PAX5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PBRM1 (UniProt:Q86U86) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86U86"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PBRM1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PDGFRA (UniProt:P16234) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P16234"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PDGFRA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PIK3CA (UniProt:P42336) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P42336"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PIK3CA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PIK3R1 (UniProt:P27986) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P27986"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PIK3R1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PPP2R1A (UniProt:P30153) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P30153"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PPP2R1A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRDM1 (UniProt:O75626) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75626"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRDM1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PTCH1 (UniProt:Q13635) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13635"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PTCH1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PTEN (UniProt:P60484) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P60484"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PTEN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PTPN11 (UniProt:Q06124) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q06124"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PTPN11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RB1 (UniProt:P06400) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P06400"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RB1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RET (UniProt:P07949) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P07949"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RET_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RNF43 (UniProt:Q68DV7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q68DV7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RNF43_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SETD2 (UniProt:Q9BYW2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BYW2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SETD2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SF3B1 (UniProt:O75533) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75533"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SF3B1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SMAD2 (UniProt:Q15796) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15796"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SMAD2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SMAD4 (UniProt:Q13485) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13485"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SMAD4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SMARCA4 (UniProt:P51532) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P51532"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SMARCA4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SMARCB1 (UniProt:Q12824) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q12824"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SMARCB1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SMO (UniProt:Q99835) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99835"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SMO_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SOCS1 (UniProt:O15524) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15524"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SOCS1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SPOP (UniProt:O43791) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43791"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SPOP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does STAG2 (UniProt:Q8N3U4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N3U4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS STAG2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does STK11 (UniProt:Q15831) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15831"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS STK11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TET2 (UniProt:Q6N021) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6N021"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TET2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TNFAIP3 (UniProt:P21580) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P21580"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TNFAIP3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TP53 (UniProt:P04637) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04637"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TP53_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TSC1 (UniProt:Q92574) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92574"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TSC1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does U2AF1 (UniProt:Q01081) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q01081"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS U2AF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does VHL (UniProt:P40337) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P40337"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS VHL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does WT1 (UniProt:P19544) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P19544"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS WT1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AKT2 (UniProt:P31751) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P31751"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AKT2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARID2 (UniProt:Q68CP9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q68CP9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARID2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATR (UniProt:Q13535) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13535"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does B2M (UniProt:P61769) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P61769"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS B2M_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BARD1 (UniProt:Q99728) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99728"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BARD1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BCL6 (UniProt:P41182) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P41182"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BCL6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BRD4 (UniProt:O60885) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O60885"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BRD4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BRIP1 (UniProt:Q9BX63) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BX63"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BRIP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BTK (UniProt:Q06187) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q06187"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BTK_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CALR (UniProt:P27797) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P27797"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CALR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CASP8 (UniProt:Q14790) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14790"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CASP8_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CBFB (UniProt:Q13951) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13951"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CBFB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CCND1 (UniProt:P24385) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P24385"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CCND1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CCND2 (UniProt:P30279) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P30279"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CCND2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CCND3 (UniProt:P30281) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P30281"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CCND3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CCNE1 (UniProt:P24864) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P24864"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CCNE1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CD274 (UniProt:Q9NZQ7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NZQ7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CD274_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CD79A (UniProt:P11912) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P11912"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CD79A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CD79B (UniProt:P40259) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P40259"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CD79B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CDK12 (UniProt:Q9NYV4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NYV4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CDK12_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CDK4 (UniProt:P11802) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P11802"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CDK4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CDK6 (UniProt:Q00534) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q00534"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CDK6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CDKN1B (UniProt:P46527) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P46527"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CDKN1B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CDKN2C (UniProt:P42773) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P42773"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CDKN2C_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CHEK2 (UniProt:O96017) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O96017"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CHEK2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CRLF2 (UniProt:Q9HC73) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9HC73"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CRLF2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CSF1R (UniProt:P07333) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P07333"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CSF1R_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CSF3R (UniProt:Q99062) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99062"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CSF3R_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CTCF (UniProt:P49711) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P49711"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CTCF_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CXCR4 (UniProt:P61073) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P61073"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CXCR4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DDR2 (UniProt:Q16832) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16832"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DDR2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ERBB3 (UniProt:P21860) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P21860"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ERBB3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ERBB4 (UniProt:Q15303) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15303"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ERBB4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ERG (UniProt:P11308) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P11308"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ERG_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ESR1 (UniProt:P03372) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P03372"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ESR1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ETV6 (UniProt:P41212) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P41212"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ETV6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FANCA (UniProt:O15360) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15360"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FANCA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FANCC (UniProt:Q00597) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q00597"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FANCC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FGFR1 (UniProt:P11362) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P11362"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FGFR1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FGFR4 (UniProt:P22455) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P22455"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FGFR4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FLCN (UniProt:Q8NFG4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8NFG4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FLCN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FUBP1 (UniProt:Q96AE4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96AE4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FUBP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GATA1 (UniProt:P15976) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15976"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GATA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GATA2 (UniProt:P23769) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P23769"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GATA2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IKZF1 (UniProt:Q13422) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13422"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IKZF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IRF4 (UniProt:Q15306) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15306"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IRF4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does JUN (UniProt:P05412) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P05412"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS JUN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KDM5A (UniProt:P29375) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P29375"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KDM5A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KDR (UniProt:P35968) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35968"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KDR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KEAP1 (UniProt:Q14145) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14145"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KEAP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KMT2A (UniProt:Q03164) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q03164"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KMT2A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KMT2C (UniProt:Q8NEZ4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8NEZ4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KMT2C_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MAP2K2 (UniProt:P36507) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P36507"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MAP2K2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MAP2K4 (UniProt:P45985) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P45985"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MAP2K4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MAPK1 (UniProt:P28482) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P28482"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MAPK1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MDM2 (UniProt:Q00987) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q00987"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MDM2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MDM4 (UniProt:O15151) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15151"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MDM4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MITF (UniProt:O75030) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75030"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MITF_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MTOR (UniProt:P42345) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P42345"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MTOR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MUTYH (UniProt:Q9UIF7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UIF7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MUTYH_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MYC (UniProt:P01106) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P01106"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MYC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MYCL (UniProt:P12524) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P12524"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MYCL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MYCN (UniProt:P04198) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04198"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MYCN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NKX2_1 (UniProt:P43699) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P43699"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NKX2_1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NSD2 (UniProt:O96028) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O96028"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NSD2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NSD3 (UniProt:Q9BZ95) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BZ95"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NSD3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NTRK1 (UniProt:P04629) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04629"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NTRK1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NTRK3 (UniProt:Q16288) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16288"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NTRK3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PALB2 (UniProt:Q86YC2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86YC2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PALB2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PDCD1LG2 (UniProt:Q9BQ51) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BQ51"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PDCD1LG2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PDGFRB (UniProt:P09619) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P09619"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PDGFRB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PHF6 (UniProt:Q8IWS0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8IWS0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PHF6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PIM1 (UniProt:P11309) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P11309"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PIM1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRKAR1A (UniProt:P10644) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P10644"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRKAR1A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAD21 (UniProt:O60216) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O60216"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAD21_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAF1 (UniProt:P04049) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04049"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RARA (UniProt:P10276) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P10276"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RARA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ROS1 (UniProt:P08922) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P08922"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ROS1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RUNX1 (UniProt:Q01196) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q01196"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RUNX1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SDHA (UniProt:P31040) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P31040"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SDHA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SDHB (UniProt:P21912) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P21912"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SDHB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SDHC (UniProt:Q99643) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99643"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SDHC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SDHD (UniProt:O14521) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O14521"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SDHD_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SOX2 (UniProt:P48431) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P48431"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SOX2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SPEN (UniProt:Q96T58) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96T58"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SPEN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SRC (UniProt:P12931) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P12931"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SRC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SRSF2 (UniProt:Q01130) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q01130"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SRSF2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does STAT3 (UniProt:P40763) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P40763"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS STAT3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SUFU (UniProt:Q9UMX1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UMX1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SUFU_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SYK (UniProt:P43405) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P43405"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SYK_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TENT5C (UniProt:Q5VWP2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q5VWP2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TENT5C_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TGFBR2 (UniProt:P37173) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P37173"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TGFBR2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TMPRSS2 (UniProt:O15393) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15393"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TMPRSS2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TNFRSF14 (UniProt:Q92956) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92956"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TNFRSF14_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TSC2 (UniProt:P49815) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P49815"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TSC2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TSHR (UniProt:P16473) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P16473"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TSHR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does XPO1 (UniProt:O14980) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O14980"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS XPO1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AKT3 (UniProt:Q9Y243) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y243"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AKT3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARAF (UniProt:P10398) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P10398"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARAF_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARID1B (UniProt:Q8NFD5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8NFD5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARID1B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AURKA (UniProt:O14965) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O14965"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AURKA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AURKB (UniProt:Q96GD4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96GD4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AURKB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AXL (UniProt:P30530) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P30530"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AXL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BCL10 (UniProt:O95999) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95999"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BCL10_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BCORL1 (UniProt:Q5H9F3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q5H9F3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BCORL1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BCR (UniProt:P11274) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P11274"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BCR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BIRC3 (UniProt:Q13489) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13489"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BIRC3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BLM (UniProt:P54132) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P54132"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BLM_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BTG1 (UniProt:P62324) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P62324"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BTG1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CDK8 (UniProt:P49336) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P49336"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CDK8_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CDKN2B (UniProt:P42772) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P42772"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CDKN2B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CHEK1 (UniProt:O14757) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O14757"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CHEK1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CRKL (UniProt:P46109) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P46109"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CRKL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CYLD (UniProt:Q9NQC7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NQC7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CYLD_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DOT1L (UniProt:Q8TEK3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8TEK3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DOT1L_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EED (UniProt:O75530) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75530"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EED_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EIF4A2 (UniProt:Q14240) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14240"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EIF4A2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EPHA3 (UniProt:P29320) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P29320"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EPHA3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EPHB1 (UniProt:P54762) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P54762"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EPHB1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ERCC4 (UniProt:Q92889) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92889"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ERCC4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ETV1 (UniProt:P50549) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P50549"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ETV1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FAS (UniProt:P25445) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P25445"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FAS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FGF19 (UniProt:O95750) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95750"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FGF19_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FGF3 (UniProt:P11487) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P11487"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FGF3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FGF4 (UniProt:P08620) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P08620"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FGF4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FH (UniProt:P07954) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P07954"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FH_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FLT1 (UniProt:P17948) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P17948"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FLT1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FLT4 (UniProt:P35916) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35916"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FLT4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FOXO1 (UniProt:Q12778) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q12778"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FOXO1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FOXP1 (UniProt:Q9H334) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9H334"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FOXP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GRIN2A (UniProt:Q12879) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q12879"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GRIN2A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GSK3B (UniProt:P49841) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P49841"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GSK3B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HGF (UniProt:P14210) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P14210"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HGF_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ID3 (UniProt:Q02535) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q02535"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ID3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IGF1R (UniProt:P08069) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P08069"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IGF1R_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IKBKE (UniProt:Q14164) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14164"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IKBKE_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IL7R (UniProt:P16871) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P16871"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IL7R_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does INPP4B (UniProt:O15327) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15327"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS INPP4B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IRS2 (UniProt:Q9Y4H2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y4H2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IRS2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KLF4 (UniProt:O43474) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43474"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KLF4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LMO1 (UniProt:P25800) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P25800"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LMO1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MALT1 (UniProt:Q9UDY8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UDY8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MALT1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MAP3K13 (UniProt:O43283) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43283"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MAP3K13_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MCL1 (UniProt:Q07820) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q07820"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MCL1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MEF2B (UniProt:Q02080) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q02080"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MEF2B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MRE11 (UniProt:P49959) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P49959"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MRE11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MSH3 (UniProt:P20585) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P20585"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MSH3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MSI2 (UniProt:Q96DH6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96DH6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MSI2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NBN (UniProt:O60934) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O60934"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NBN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NCOR1 (UniProt:O75376) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75376"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NCOR1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NFKBIA (UniProt:P25963) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P25963"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NFKBIA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NSD1 (UniProt:Q96L73) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96L73"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NSD1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NT5C2 (UniProt:P49902) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P49902"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NT5C2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NTRK2 (UniProt:Q16620) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16620"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NTRK2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does P2RY8 (UniProt:Q86VZ1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86VZ1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS P2RY8_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PDCD1 (UniProt:Q15116) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15116"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PDCD1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PIK3CB (UniProt:P42338) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P42338"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PIK3CB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PMS2 (UniProt:P54278) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P54278"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PMS2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does POLD1 (UniProt:P28340) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P28340"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS POLD1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does POLE (UniProt:Q07864) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q07864"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS POLE_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does POT1 (UniProt:Q9NUX5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NUX5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS POT1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PPARG (UniProt:P37231) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P37231"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PPARG_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAC1 (UniProt:P63000) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P63000"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAC1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAD51 (UniProt:Q06609) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q06609"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAD51_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAD51B (UniProt:O15315) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15315"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAD51B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RBM10 (UniProt:P98175) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P98175"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RBM10_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does REL (UniProt:Q04864) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q04864"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS REL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RHOA (UniProt:P61586) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P61586"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RHOA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RICTOR (UniProt:Q6R327) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6R327"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RICTOR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPTOR (UniProt:Q8N122) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N122"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPTOR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SETBP1 (UniProt:Q9Y6X0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y6X0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SETBP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SOX9 (UniProt:P48436) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P48436"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SOX9_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does STAT5B (UniProt:P51692) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P51692"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS STAT5B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SUZ12 (UniProt:Q15022) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15022"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SUZ12_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TBX3 (UniProt:O15119) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15119"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TBX3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TCF3 (UniProt:P15923) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15923"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TCF3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TERT (UniProt:O14746) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O14746"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TERT_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TET1 (UniProt:Q8NFU7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8NFU7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TET1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TOP1 (UniProt:P11387) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P11387"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TOP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TP63 (UniProt:Q9H3D4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9H3D4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TP63_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TRAF7 (UniProt:Q6Q0C0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6Q0C0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TRAF7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZRSR2 (UniProt:Q15696) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15696"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZRSR2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ACVR1 (UniProt:Q04771) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q04771"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ACVR1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ALOX12B (UniProt:O75342) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75342"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ALOX12B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AXIN2 (UniProt:Q9Y2T1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y2T1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AXIN2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BCL2L1 (UniProt:Q07817) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q07817"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BCL2L1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BMPR1A (UniProt:P36894) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P36894"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BMPR1A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CDKN1A (UniProt:P38936) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P38936"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CDKN1A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CIITA (UniProt:P33076) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P33076"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CIITA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CUL3 (UniProt:Q13618) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13618"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CUL3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CUX1 (UniProt:P39880) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P39880"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CUX1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CUX1 (UniProt:Q13948) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13948"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CUX1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DDX3X (UniProt:O00571) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O00571"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DDX3X_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DICER1 (UniProt:Q9UPY3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UPY3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DICER1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DIS3 (UniProt:Q9Y2L1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y2L1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DIS3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DNAJB1 (UniProt:P25685) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P25685"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DNAJB1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DNMT1 (UniProt:P26358) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P26358"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DNMT1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DROSHA (UniProt:Q9NRR4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NRR4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DROSHA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EPAS1 (UniProt:Q99814) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99814"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EPAS1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EPHA5 (UniProt:P54756) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P54756"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EPHA5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EPHA7 (UniProt:Q15375) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15375"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EPHA7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ERCC2 (UniProt:P18074) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P18074"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ERCC2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ERCC3 (UniProt:P19447) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P19447"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ERCC3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ERCC5 (UniProt:P28715) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P28715"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ERCC5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ERRFI1 (UniProt:Q9UJM3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UJM3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ERRFI1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ETV4 (UniProt:P43268) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P43268"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ETV4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ETV5 (UniProt:P41161) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P41161"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ETV5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EWSR1 (UniProt:Q01844) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q01844"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EWSR1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FANCD2 (UniProt:Q9BXW9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BXW9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FANCD2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FAT1 (UniProt:Q14517) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14517"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FAT1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FBXO11 (UniProt:Q86XK2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86XK2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FBXO11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FOXA1 (UniProt:P55317) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P55317"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FOXA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GLI1 (UniProt:P08151) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P08151"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GLI1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GNA13 (UniProt:Q14344) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14344"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GNA13_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H1_2 (UniProt:P16403) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P16403"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H1_2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H3_3A (UniProt:P84243) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P84243"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H3_3A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HDAC1 (UniProt:Q13547) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13547"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HDAC1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HLA_A (UniProt:P04439) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04439"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HLA_A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does INHBA (UniProt:P08476) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P08476"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS INHBA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LATS1 (UniProt:O95835) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95835"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LATS1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LATS2 (UniProt:Q9NRM7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NRM7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LATS2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LYN (UniProt:P07948) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P07948"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LYN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MAF (UniProt:O75444) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75444"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MAF_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MAP3K14 (UniProt:Q99558) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99558"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MAP3K14_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MAX (UniProt:P61244) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P61244"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MAX_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MLLT1 (UniProt:Q03111) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q03111"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MLLT1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MST1R (UniProt:Q04912) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q04912"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MST1R_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MYOD1 (UniProt:P15172) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15172"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MYOD1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NCOR2 (UniProt:Q9Y618) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y618"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NCOR2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NOTCH3 (UniProt:Q9UM47) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UM47"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NOTCH3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NUP93 (UniProt:Q8N1F7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N1F7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NUP93_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PARP1 (UniProt:P09874) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P09874"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PARP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PHOX2B (UniProt:Q99453) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99453"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PHOX2B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PIK3C2G (UniProt:O75747) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75747"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PIK3C2G_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PIK3CG (UniProt:P48736) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P48736"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PIK3CG_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PIK3R2 (UniProt:O00459) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O00459"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PIK3R2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PLCG2 (UniProt:P16885) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P16885"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PLCG2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PPM1D (UniProt:O15297) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15297"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PPM1D_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PPP6C (UniProt:O00743) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O00743"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PPP6C_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PREX2 (UniProt:Q70Z35) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q70Z35"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PREX2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRKCI (UniProt:P41743) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P41743"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRKCI_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRKN (UniProt:O60260) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O60260"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRKN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PTPRT (UniProt:O14522) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O14522"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PTPRT_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAD50 (UniProt:Q92878) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92878"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAD50_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAD51C (UniProt:O43502) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43502"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAD51C_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAD51D (UniProt:O75771) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75771"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAD51D_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAD52 (UniProt:P43351) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P43351"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAD52_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATRX (UniProt:P46100) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P46100"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATRX_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAD54L (UniProt:P46100) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P46100"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAD54L_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RECQL4 (UniProt:O94761) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O94761"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RECQL4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RUNX1T1 (UniProt:Q06455) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q06455"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RUNX1T1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SDHAF2 (UniProt:Q9NX18) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NX18"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SDHAF2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SGK1 (UniProt:O00141) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O00141"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SGK1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SH2B3 (UniProt:Q9UQQ2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UQQ2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SH2B3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SMAD3 (UniProt:P84022) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P84022"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SMAD3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SMARCD1 (UniProt:Q96GM5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96GM5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SMARCD1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does STAT5A (UniProt:P42229) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P42229"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS STAT5A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does STAT6 (UniProt:P42226) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P42226"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS STAT6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TBL1XR1 (UniProt:Q9BZK7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BZK7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TBL1XR1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TCF7L2 (UniProt:Q9NQB0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NQB0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TCF7L2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TEK (UniProt:Q02763) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q02763"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TEK_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TMEM127 (UniProt:O75204) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75204"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TMEM127_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TRAF2 (UniProt:Q12933) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q12933"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TRAF2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does VEGFA (UniProt:P15692) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15692"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS VEGFA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does WWTR1 (UniProt:Q9GZV5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9GZV5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS WWTR1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does XRCC2 (UniProt:O43543) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43543"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS XRCC2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZFHX3 (UniProt:Q15911) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15911"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZFHX3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ABL2 (UniProt:P42684) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P42684"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ABL2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ABRAXAS1 (UniProt:Q6UWZ7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6UWZ7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ABRAXAS1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AGO2 (UniProt:Q9UKV8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UKV8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AGO2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ANKRD11 (UniProt:Q6UB99) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6UB99"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ANKRD11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARID5B (UniProt:Q14865) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14865"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARID5B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ASXL2 (UniProt:Q76L83) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q76L83"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ASXL2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATF1 (UniProt:P18846) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P18846"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BABAM1 (UniProt:Q9NWV8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NWV8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BABAM1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BBC3 (UniProt:Q9BXH1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BXH1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BBC3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BCL2L11 (UniProt:O43521) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43521"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BCL2L11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BCL9 (UniProt:O00512) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O00512"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BCL9_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CARM1 (UniProt:Q86X55) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86X55"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CARM1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CCNQ (UniProt:Q8N1B3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N1B3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CCNQ_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CD276 (UniProt:Q5ZPR3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q5ZPR3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CD276_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CD58 (UniProt:P19256) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P19256"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CD58_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CDC42 (UniProt:P60953) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P60953"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CDC42_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CENPA (UniProt:P49450) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P49450"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CENPA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does COP1 (UniProt:Q8NHY2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8NHY2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS COP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CSDE1 (UniProt:O75534) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75534"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CSDE1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CTLA4 (UniProt:P16410) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P16410"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CTLA4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CYSLTR2 (UniProt:Q9NS75) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NS75"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CYSLTR2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DCUN1D1 (UniProt:Q96GG9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96GG9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DCUN1D1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DDIT3 (UniProt:P35638) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35638"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DDIT3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DEK (UniProt:P35659) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35659"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DEK_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DNMT3B (UniProt:Q9UBC3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UBC3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DNMT3B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DTX1 (UniProt:Q86Y01) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86Y01"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DTX1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DUSP22 (UniProt:Q9NRW4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NRW4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DUSP22_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DUSP4 (UniProt:Q13115) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13115"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DUSP4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does E2F3 (UniProt:O00716) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O00716"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS E2F3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EGFL7 (UniProt:Q9UHF1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UHF1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EGFL7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EIF1AX (UniProt:P47813) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P47813"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EIF1AX_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EIF4E (UniProt:P06730) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P06730"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EIF4E_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ELF3 (UniProt:P78545) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P78545"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ELF3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ELOC (UniProt:Q15369) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15369"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ELOC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EPCAM (UniProt:P16422) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P16422"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EPCAM_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ERF (UniProt:P50548) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P50548"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ERF_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ETNK1 (UniProt:Q9HBU6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9HBU6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ETNK1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EZH1 (UniProt:Q92800) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92800"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EZH1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FANCG (UniProt:O15287) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15287"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FANCG_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FANCL (UniProt:Q9NW38) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NW38"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FANCL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FEV (UniProt:Q99581) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99581"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FEV_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FLI1 (UniProt:Q01543) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q01543"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FLI1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FYN (UniProt:P06241) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P06241"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FYN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GNA12 (UniProt:Q03113) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q03113"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GNA12_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GNB1 (UniProt:P62873) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P62873"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GNB1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GPS2 (UniProt:Q13227) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13227"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GPS2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GREM1 (UniProt:O60565) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O60565"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GREM1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H1_3 (UniProt:P16402) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P16402"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H1_3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H1_4 (UniProt:P10412) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P10412"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H1_4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H2AC11 (UniProt:P0C0S8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P0C0S8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H2AC11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H2AC16 (UniProt:P0C0S8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P0C0S8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H2AC16_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H2AC17 (UniProt:P0C0S8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P0C0S8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H2AC17_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H2AC6 (UniProt:Q93077) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q93077"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H2AC6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H2BC11 (UniProt:P06899) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P06899"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H2BC11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H2BC12 (UniProt:O60814) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O60814"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H2BC12_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H2BC17 (UniProt:P23527) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P23527"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H2BC17_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H2BC5 (UniProt:P58876) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P58876"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H2BC5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H3_4 (UniProt:Q16695) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16695"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H3_4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H3_5 (UniProt:Q6NXT2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6NXT2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H3_5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H3C2 (UniProt:P68431) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P68431"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H3C2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H3C1 (UniProt:P68431) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P68431"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H3C1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H3C10 (UniProt:P68431) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P68431"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H3C10_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H3C11 (UniProt:P68431) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P68431"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H3C11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H3C12 (UniProt:P68431) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P68431"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H3C12_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H3C3 (UniProt:P68431) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P68431"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H3C3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H3C4 (UniProt:P68431) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P68431"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H3C4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H3C6 (UniProt:P68431) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P68431"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H3C6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H3C7 (UniProt:P68431) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P68431"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H3C7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H3C8 (UniProt:P68431) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P68431"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H3C8_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HDAC4 (UniProt:P56524) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P56524"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HDAC4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HDAC7 (UniProt:Q8WUI4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8WUI4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HDAC7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HIF1A (UniProt:Q16665) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16665"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HIF1A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HLA_B (UniProt:P01889) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P01889"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HLA_B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HOXB13 (UniProt:Q92826) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92826"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HOXB13_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ICOSLG (UniProt:O75144) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75144"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ICOSLG_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IFNGR1 (UniProt:P15260) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15260"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IFNGR1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IGF1 (UniProt:P05019) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P05019"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IGF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IGF2 (UniProt:P01344) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P01344"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IGF2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IKZF3 (UniProt:Q9UKT9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UKT9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IKZF3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IL10 (UniProt:P22301) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P22301"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IL10_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does INHA (UniProt:P05111) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P05111"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS INHA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does INPP4A (UniProt:Q96PE3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96PE3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS INPP4A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does INPPL1 (UniProt:O15357) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15357"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS INPPL1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does INSR (UniProt:P06213) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P06213"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS INSR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IRF1 (UniProt:P10914) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P10914"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IRF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IRF8 (UniProt:Q02556) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q02556"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IRF8_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IRS1 (UniProt:P35568) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35568"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IRS1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does JARID2 (UniProt:Q92833) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92833"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS JARID2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KAT6A (UniProt:Q92794) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92794"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KAT6A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KMT2B (UniProt:Q9UMN6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UMN6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KMT2B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KMT5A (UniProt:Q9NQR1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NQR1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KMT5A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KNSTRN (UniProt:Q9Y448) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y448"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KNSTRN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LCK (UniProt:P06239) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P06239"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LCK_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LMO2 (UniProt:P25791) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P25791"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LMO2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LZTR1 (UniProt:Q8N653) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N653"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LZTR1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MAFB (UniProt:Q9Y5Q3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y5Q3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MAFB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MAPK3 (UniProt:P27361) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P27361"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MAPK3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MAPKAP1 (UniProt:Q9BPZ7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BPZ7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MAPKAP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MDC1 (UniProt:Q14676) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14676"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MDC1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MECOM (UniProt:Q03112) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q03112"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MECOM_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MGA (UniProt:Q8IWI9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8IWI9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MGA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MLLT10 (UniProt:P55197) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P55197"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MLLT10_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MSI1 (UniProt:O43347) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43347"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MSI1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MST1 (UniProt:P26927) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P26927"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MST1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MTAP (UniProt:Q13126) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13126"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MTAP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MYB (UniProt:P10242) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P10242"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MYB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NCOA3 (UniProt:Q9Y6Q9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y6Q9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NCOA3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NCSTN (UniProt:Q92542) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92542"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NCSTN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NEGR1 (UniProt:Q7Z3B1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q7Z3B1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NEGR1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NKX3_1 (UniProt:Q99801) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99801"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NKX3_1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NOTCH4 (UniProt:Q99466) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99466"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NOTCH4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NTHL1 (UniProt:P78549) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P78549"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NTHL1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NUF2 (UniProt:Q9BZD4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BZD4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NUF2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NUP98 (UniProt:P52948) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P52948"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NUP98_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NUTM1 (UniProt:Q86Y26) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86Y26"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NUTM1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PAK1 (UniProt:Q13153) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13153"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PAK1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PAK5 (UniProt:Q9P286) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9P286"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PAK5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PCBP1 (UniProt:Q15365) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15365"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PCBP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PDGFB (UniProt:P01127) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P01127"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PDGFB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PGR (UniProt:P06401) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P06401"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PGR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PIK3C3 (UniProt:Q8NEB9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8NEB9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PIK3C3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PIK3CD (UniProt:O00329) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O00329"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PIK3CD_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PIK3R3 (UniProt:Q92569) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92569"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PIK3R3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PLCG1 (UniProt:P19174) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P19174"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PLCG1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PLK2 (UniProt:Q9NYY3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NYY3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PLK2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PMAIP1 (UniProt:Q13794) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13794"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PMAIP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PMS1 (UniProt:P54277) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P54277"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PMS1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PNRC1 (UniProt:Q12796) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q12796"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PNRC1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PPP4R2 (UniProt:Q9NY27) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NY27"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PPP4R2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRDM14 (UniProt:Q9GZV8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9GZV8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRDM14_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRKD1 (UniProt:Q15139) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15139"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRKD1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PTP4A1 (UniProt:Q93096) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q93096"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PTP4A1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PTPN2 (UniProt:P17706) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P17706"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PTPN2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PTPRD (UniProt:P23468) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P23468"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PTPRD_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PTPRS (UniProt:Q13332) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13332"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PTPRS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAB35 (UniProt:Q15286) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15286"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAB35_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAC2 (UniProt:P15153) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15153"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAC2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RASA1 (UniProt:P20936) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P20936"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RASA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RBM15 (UniProt:Q96T37) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96T37"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RBM15_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RECQL (UniProt:P46063) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P46063"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RECQL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RHEB (UniProt:Q15382) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15382"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RHEB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RIT1 (UniProt:Q92963) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92963"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RIT1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BCL11B (UniProt:Q9C0K0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9C0K0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BCL11B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPS6KA4 (UniProt:O75676) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75676"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPS6KA4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPS6KB2 (UniProt:Q9UBS0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UBS0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPS6KB2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RRAGC (UniProt:Q9HB90) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9HB90"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RRAGC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RRAS (UniProt:P10301) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P10301"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RRAS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RRAS2 (UniProt:P62070) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P62070"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RRAS2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RTEL1 (UniProt:Q9NZ71) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NZ71"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RTEL1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RXRA (UniProt:P19793) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P19793"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RXRA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RYBP (UniProt:Q8N488) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N488"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RYBP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SESN1 (UniProt:Q9Y6P5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y6P5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SESN1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SESN2 (UniProt:P58004) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P58004"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SESN2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SESN3 (UniProt:P58005) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P58005"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SESN3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SETDB1 (UniProt:Q15047) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15047"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SETDB1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SH2D1A (UniProt:O60880) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O60880"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SH2D1A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SHOC2 (UniProt:Q9UQ13) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UQ13"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SHOC2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SHQ1 (UniProt:Q6PI26) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6PI26"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SHQ1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SLX4 (UniProt:Q8IY92) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8IY92"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SLX4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SMARCE1 (UniProt:Q969G3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q969G3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SMARCE1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SMC1A (UniProt:Q14683) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14683"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SMC1A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SMC3 (UniProt:Q9UQE7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UQE7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SMC3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SMYD3 (UniProt:Q9H7B4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9H7B4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SMYD3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SOS1 (UniProt:Q07889) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q07889"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SOS1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SOX17 (UniProt:Q9H6I2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9H6I2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SOX17_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SPRED1 (UniProt:Q7Z699) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q7Z699"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SPRED1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SS18 (UniProt:Q15532) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15532"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SS18_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does STK19 (UniProt:P49842) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P49842"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS STK19_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does STK40 (UniProt:Q8N2I9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N2I9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS STK40_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TAL1 (UniProt:P17542) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P17542"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TAL1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TAP1 (UniProt:Q03518) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q03518"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TAP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TAP2 (UniProt:Q03519) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q03519"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TAP2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TCL1A (UniProt:P56279) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P56279"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TCL1A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TFE3 (UniProt:P19532) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P19532"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TFE3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TGFBR1 (UniProt:P36897) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P36897"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TGFBR1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TLX1 (UniProt:P31314) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P31314"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TLX1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TLX3 (UniProt:O43711) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43711"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TLX3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TP53BP1 (UniProt:Q12888) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q12888"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TP53BP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TRAF3 (UniProt:Q13114) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13114"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TRAF3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TRAF5 (UniProt:O00463) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O00463"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TRAF5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TYK2 (UniProt:P29597) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P29597"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TYK2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does U2AF2 (UniProt:P26368) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P26368"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS U2AF2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does UBR5 (UniProt:O95071) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95071"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS UBR5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does UPF1 (UniProt:Q92900) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92900"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS UPF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does USP8 (UniProt:P40818) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P40818"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS USP8_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does VTCN1 (UniProt:Q7Z7D3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q7Z7D3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS VTCN1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does XBP1 (UniProt:P17861) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P17861"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS XBP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does XIAP (UniProt:P98170) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P98170"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS XIAP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does YAP1 (UniProt:P46937) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P46937"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS YAP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does YES1 (UniProt:P07947) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P07947"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS YES1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ABI1 (UniProt:Q8IZP0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8IZP0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ABI1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ACTG1 (UniProt:P63261) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P63261"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ACTG1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ACVR1B (UniProt:P36896) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P36896"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ACVR1B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AFDN (UniProt:P55196) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P55196"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AFDN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AFF1 (UniProt:P51825) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P51825"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AFF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AFF4 (UniProt:Q9UHB7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UHB7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AFF4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AGO1 (UniProt:Q9UL18) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UL18"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AGO1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ALB (UniProt:P02768) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P02768"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ALB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does APLNR (UniProt:P35414) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35414"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS APLNR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARFRP1 (UniProt:Q13795) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13795"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARFRP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARHGAP26 (UniProt:Q9UNA1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UNA1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARHGAP26_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARHGAP35 (UniProt:Q9NRY4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NRY4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARHGAP35_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARHGEF12 (UniProt:Q9NZN5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NZN5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARHGEF12_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARHGEF28 (UniProt:Q8N1W1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N1W1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARHGEF28_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARID3A (UniProt:Q99856) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99856"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARID3A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARID3B (UniProt:Q8IVW6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8IVW6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARID3B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARID3C (UniProt:A6NKF2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"A6NKF2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARID3C_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARID4A (UniProt:P29374) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P29374"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARID4A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARID4B (UniProt:Q4LE39) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q4LE39"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARID4B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARID5A (UniProt:Q03989) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q03989"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARID5A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARNT (UniProt:P27540) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P27540"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARNT_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATIC (UniProt:P31939) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P31939"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATIC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATP6AP1 (UniProt:Q15904) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15904"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATP6AP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATP6V1B2 (UniProt:P21281) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P21281"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATP6V1B2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATXN2 (UniProt:Q99700) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99700"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATXN2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATXN7 (UniProt:O15265) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15265"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATXN7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BACH2 (UniProt:Q9BYV9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BYV9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BACH2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BCL11A (UniProt:Q9H165) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9H165"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BCL11A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BCL2L2 (UniProt:Q92843) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92843"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BCL2L2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BCL3 (UniProt:P20749) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P20749"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BCL3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BCL7A (UniProt:Q4VC05) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q4VC05"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BCL7A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BTG2 (UniProt:P78543) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P78543"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BTG2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CAMTA1 (UniProt:Q9Y6Y1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y6Y1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CAMTA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CARS1 (UniProt:P49589) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P49589"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CARS1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CBFA2T3 (UniProt:O75081) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75081"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CBFA2T3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CD22 (UniProt:P20273) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P20273"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CD22_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CD28 (UniProt:P10747) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P10747"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CD28_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CD70 (UniProt:P32970) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P32970"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CD70_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CD74 (UniProt:P04233) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04233"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CD74_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CDX2 (UniProt:Q99626) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99626"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CDX2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CEP43 (UniProt:O95684) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95684"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CEP43_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CLTC (UniProt:Q00610) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q00610"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CLTC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CLTCL1 (UniProt:P53675) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P53675"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CLTCL1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CMTR2 (UniProt:Q8IYT2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8IYT2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CMTR2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CNTRL (UniProt:Q7Z7A1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q7Z7A1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CNTRL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does COL1A1 (UniProt:P02452) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P02452"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS COL1A1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CRBN (UniProt:Q96SW2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96SW2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CRBN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CREB1 (UniProt:P16220) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P16220"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CREB1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CREB3L1 (UniProt:Q96BA8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96BA8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CREB3L1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CREB3L2 (UniProt:Q70SY1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q70SY1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CREB3L2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CTNNA1 (UniProt:P35221) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35221"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CTNNA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CTR9 (UniProt:Q6PD62) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6PD62"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CTR9_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CYP19A1 (UniProt:P11511) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P11511"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CYP19A1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DDX10 (UniProt:Q13206) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13206"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DDX10_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DDX6 (UniProt:P26196) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P26196"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DDX6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DNM2 (UniProt:P50570) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P50570"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DNM2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EBF1 (UniProt:Q9UH73) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UH73"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EBF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ECT2L (UniProt:Q008S8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q008S8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ECT2L_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EGR1 (UniProt:P18146) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P18146"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EGR1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ELF4 (UniProt:Q99607) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99607"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ELF4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ELL (UniProt:P55199) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P55199"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ELL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EML4 (UniProt:Q9HC35) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9HC35"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EML4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EMSY (UniProt:Q7Z589) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q7Z589"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EMSY_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EP400 (UniProt:Q96L91) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96L91"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EP400_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EPOR (UniProt:P19235) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P19235"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EPOR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EPS15 (UniProt:P42566) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P42566"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EPS15_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ESCO2 (UniProt:Q56NI9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q56NI9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ESCO2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ETAA1 (UniProt:Q9NY74) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NY74"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ETAA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EXT1 (UniProt:Q16394) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16394"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EXT1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EZHIP (UniProt:Q86X51) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86X51"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EZHIP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EZR (UniProt:P15311) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15311"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EZR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FANCE (UniProt:Q9HB96) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9HB96"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FANCE_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FANCF (UniProt:Q9NPI8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NPI8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FANCF_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FCGR2B (UniProt:P31994) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P31994"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FCGR2B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FCRL4 (UniProt:Q96PJ5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96PJ5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FCRL4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FGF10 (UniProt:O15520) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15520"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FGF10_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FGF14 (UniProt:Q92915) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92915"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FGF14_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FGF23 (UniProt:Q9GZV9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9GZV9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FGF23_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FGF6 (UniProt:P10767) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P10767"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FGF6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FHIT (UniProt:P49789) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P49789"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FHIT_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FOXF1 (UniProt:Q12946) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q12946"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FOXF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FOXO3 (UniProt:O43524) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43524"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FOXO3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FOXO4 (UniProt:P98177) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P98177"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FOXO4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FSTL3 (UniProt:O95633) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95633"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FSTL3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FURIN (UniProt:P09958) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P09958"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FURIN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FUS (UniProt:P35637) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35637"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FUS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GAB1 (UniProt:Q13480) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13480"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GAB1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GAB2 (UniProt:Q9UQC2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UQC2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GAB2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GAS7 (UniProt:O60861) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O60861"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GAS7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GID4 (UniProt:Q8IVV7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8IVV7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GID4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GPHN (UniProt:Q9NQX3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NQX3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GPHN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GTF2I (UniProt:P78347) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P78347"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GTF2I_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H1_5 (UniProt:P16401) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P16401"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H1_5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H2BC4 (UniProt:P62807) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P62807"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H2BC4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H2BC8 (UniProt:P62807) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P62807"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H2BC8_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H4C9 (UniProt:P62805) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P62805"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H4C9_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HERPUD1 (UniProt:Q15011) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15011"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HERPUD1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HEY1 (UniProt:Q9Y5J3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y5J3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HEY1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HIP1 (UniProt:O00291) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O00291"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HIP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HLA_C (UniProt:P10321) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P10321"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HLA_C_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HLF (UniProt:Q16534) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16534"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HLF_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HMGA1 (UniProt:P17096) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P17096"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HMGA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HMGA2 (UniProt:P52926) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P52926"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HMGA2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HOXA11 (UniProt:P31270) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P31270"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HOXA11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HOXA13 (UniProt:P31271) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P31271"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HOXA13_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HOXA9 (UniProt:P31269) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P31269"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HOXA9_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HOXC11 (UniProt:O43248) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43248"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HOXC11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HOXC13 (UniProt:P31276) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P31276"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HOXC13_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HOXD11 (UniProt:P31277) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P31277"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HOXD11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HOXD13 (UniProt:P35453) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35453"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HOXD13_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HSP90AA1 (UniProt:P07900) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P07900"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HSP90AA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HSP90AB1 (UniProt:P08238) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P08238"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HSP90AB1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IL21R (UniProt:Q9HBE5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9HBE5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IL21R_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IL3 (UniProt:P08700) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P08700"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IL3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IL6ST (UniProt:P40189) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P40189"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IL6ST_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ITK (UniProt:Q08881) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q08881"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ITK_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KBTBD4 (UniProt:Q9NVX7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NVX7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KBTBD4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KDSR (UniProt:Q06136) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q06136"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KDSR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KIF5B (UniProt:P33176) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P33176"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KIF5B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KLF5 (UniProt:Q13887) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13887"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KLF5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KLHL6 (UniProt:Q8WZ60) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8WZ60"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KLHL6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KSR2 (UniProt:Q6VAB6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6VAB6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KSR2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LASP1 (UniProt:Q14847) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14847"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LASP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LEF1 (UniProt:Q9UJU2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UJU2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LEF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LPP (UniProt:Q93052) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q93052"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LPP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LRP1B (UniProt:Q9NZR2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NZR2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LRP1B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LTB (UniProt:Q06643) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q06643"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LTB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LTK (UniProt:P29376) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P29376"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LTK_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LYL1 (UniProt:P12980) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P12980"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LYL1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MAD2L2 (UniProt:Q9UI95) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UI95"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MAD2L2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MGAM (UniProt:O43451) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43451"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MGAM_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MLF1 (UniProt:P58340) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P58340"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MLF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MLLT3 (UniProt:P42568) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P42568"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MLLT3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MLLT6 (UniProt:P55198) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P55198"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MLLT6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MN1 (UniProt:Q10571) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q10571"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MN1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MOB3B (UniProt:Q86TA1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86TA1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MOB3B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MPEG1 (UniProt:Q2M385) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q2M385"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MPEG1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MRTFA (UniProt:Q969V6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q969V6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MRTFA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MSN (UniProt:P26038) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P26038"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MSN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MUC1 (UniProt:P15941) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15941"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MUC1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MYH11 (UniProt:P35749) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35749"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MYH11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MYH9 (UniProt:P35579) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35579"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MYH9_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NADK (UniProt:O95544) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95544"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NADK_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NCOA2 (UniProt:Q15596) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15596"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NCOA2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NDRG1 (UniProt:Q92597) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92597"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NDRG1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NFE2 (UniProt:Q16621) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16621"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NFE2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NFKB2 (UniProt:Q00653) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q00653"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NFKB2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NIN (UniProt:Q8N4C6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N4C6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NIN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NRG1 (UniProt:Q02297) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q02297"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NRG1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NUMA1 (UniProt:Q14980) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14980"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NUMA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NUP214 (UniProt:P35658) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35658"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NUP214_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NUTM2A (UniProt:Q8IVF1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8IVF1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NUTM2A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PAFAH1B2 (UniProt:P68402) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P68402"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PAFAH1B2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PAX3 (UniProt:P23760) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P23760"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PAX3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PAX7 (UniProt:P23759) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P23759"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PAX7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PAX8 (UniProt:Q06710) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q06710"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PAX8_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PBX1 (UniProt:P40424) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P40424"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PBX1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PCM1 (UniProt:Q15154) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15154"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PCM1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PDE4DIP (UniProt:Q5VU43) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q5VU43"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PDE4DIP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PDPK1 (UniProt:O15530) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15530"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PDPK1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PDK1 (UniProt:Q15118) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15118"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PDK1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PDS5B (UniProt:Q9NTI5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NTI5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PDS5B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PER1 (UniProt:O15534) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15534"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PER1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PGBD5 (UniProt:Q8N414) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N414"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PGBD5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PICALM (UniProt:Q13492) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13492"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PICALM_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PIGA (UniProt:P37287) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P37287"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PIGA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PLAG1 (UniProt:Q6DJT9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6DJT9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PLAG1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PML (UniProt:P29590) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P29590"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PML_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does POU2AF1 (UniProt:Q16633) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16633"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS POU2AF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PPP2R2A (UniProt:P63151) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P63151"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PPP2R2A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRDM16 (UniProt:Q9HAZ2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9HAZ2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRDM16_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRKACA (UniProt:P17612) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P17612"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRKACA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRRX1 (UniProt:P54821) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P54821"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRRX1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PSIP1 (UniProt:O75475) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75475"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PSIP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PTPN1 (UniProt:P18031) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P18031"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PTPN1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PTPRO (UniProt:Q16827) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16827"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PTPRO_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does QKI (UniProt:Q96PU8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96PU8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS QKI_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RABEP1 (UniProt:Q15276) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15276"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RABEP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAP1GDS1 (UniProt:P52306) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P52306"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAP1GDS1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RELN (UniProt:P78509) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P78509"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RELN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does REST (UniProt:Q13127) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13127"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS REST_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RHOH (UniProt:Q15669) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15669"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RHOH_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RNF213 (UniProt:Q63HN8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q63HN8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RNF213_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ROBO1 (UniProt:Q9Y6N7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y6N7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ROBO1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPL22 (UniProt:P35268) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35268"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPL22_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPN1 (UniProt:P04843) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04843"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPN1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RSPO2 (UniProt:Q6UXX9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6UXX9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RSPO2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SAMHD1 (UniProt:Q9Y3Z3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y3Z3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SAMHD1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SCG5 (UniProt:P05408) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P05408"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SCG5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SDC4 (UniProt:P31431) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P31431"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SDC4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SERPINB3 (UniProt:P29508) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P29508"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SERPINB3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SERPINB4 (UniProt:P48594) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P48594"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SERPINB4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SET (UniProt:Q01105) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q01105"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SET_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SETD1A (UniProt:O15047) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15047"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SETD1A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SETD1B (UniProt:Q9UPS6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UPS6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SETD1B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SETD3 (UniProt:Q86TU7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86TU7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SETD3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SETD4 (UniProt:Q9NVD3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NVD3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SETD4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SETD5 (UniProt:Q9C0A6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9C0A6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SETD5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SETD6 (UniProt:Q8TBK2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8TBK2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SETD6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SETD7 (UniProt:Q8WTS6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8WTS6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SETD7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SETDB2 (UniProt:Q96T68) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96T68"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SETDB2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SH3GL1 (UniProt:Q99961) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99961"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SH3GL1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SLC34A2 (UniProt:O95436) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95436"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SLC34A2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SLFN11 (UniProt:Q7Z7L1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q7Z7L1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SLFN11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SMARCA2 (UniProt:P51531) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P51531"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SMARCA2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SMG1 (UniProt:Q96Q15) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96Q15"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SMG1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SOCS3 (UniProt:O14543) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O14543"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SOCS3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SP140 (UniProt:Q13342) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13342"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SP140_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SPRTN (UniProt:Q9H040) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9H040"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SPRTN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SRSF3 (UniProt:P84103) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P84103"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SRSF3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SSX1 (UniProt:Q16384) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16384"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SSX1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SSX2 (UniProt:Q16385) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16385"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SSX2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SSX4 (UniProt:O60224) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O60224"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SSX4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does STAG1 (UniProt:Q8WVM7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8WVM7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS STAG1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TAF15 (UniProt:Q92804) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92804"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TAF15_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TAL2 (UniProt:Q16559) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16559"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TAL2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TET3 (UniProt:O43151) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43151"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TET3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TFG (UniProt:Q92734) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92734"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TFG_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TNFRSF17 (UniProt:Q02223) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q02223"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TNFRSF17_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TPM3 (UniProt:P06753) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P06753"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TPM3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TPM4 (UniProt:P67936) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P67936"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TPM4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TRIM24 (UniProt:O15164) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15164"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TRIM24_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TRIP11 (UniProt:Q15643) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15643"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TRIP11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TRIP13 (UniProt:Q15645) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15645"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TRIP13_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does USP6 (UniProt:P35125) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35125"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS USP6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does VAV1 (UniProt:P15498) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15498"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS VAV1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does VAV2 (UniProt:P52735) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P52735"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS VAV2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does WIF1 (UniProt:Q9Y5W5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y5W5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS WIF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZBTB16 (UniProt:Q05516) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q05516"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZBTB16_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZMYM2 (UniProt:Q9UBW7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UBW7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZMYM2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZNF217 (UniProt:O75362) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75362"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZNF217_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZNF384 (UniProt:Q8TF68) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8TF68"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZNF384_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZNF521 (UniProt:Q96K83) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96K83"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZNF521_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZNF703 (UniProt:Q9H7S9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9H7S9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZNF703_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZNRF3 (UniProt:Q9ULT6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9ULT6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZNRF3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ACKR3 (UniProt:P25106) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P25106"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ACKR3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ACSL3 (UniProt:O95573) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95573"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ACSL3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ACSL6 (UniProt:Q9UKU0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UKU0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ACSL6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ACTB (UniProt:P60709) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P60709"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ACTB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ACVR2A (UniProt:P27037) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P27037"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ACVR2A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ADGRA2 (UniProt:Q96PE1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96PE1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ADGRA2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AFF3 (UniProt:P51826) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P51826"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AFF3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AJUBA (UniProt:Q96IF1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96IF1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AJUBA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does APH1A (UniProt:Q96BI3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96BI3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS APH1A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does APOBEC3B (UniProt:Q9UH17) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UH17"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS APOBEC3B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ASMTL (UniProt:O95671) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95671"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ASMTL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ASPSCR1 (UniProt:Q9BZE9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BZE9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ASPSCR1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATG5 (UniProt:Q9H1Y0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9H1Y0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATG5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATP1A1 (UniProt:P05023) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P05023"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATP1A1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATP2B3 (UniProt:Q16720) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16720"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATP2B3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BAX (UniProt:Q07812) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q07812"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BAX_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BCL9L (UniProt:Q86UU0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86UU0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BCL9L_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BRD3 (UniProt:Q15059) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15059"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BRD3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BRSK1 (UniProt:Q8TDC3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8TDC3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BRSK1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BTLA (UniProt:Q7Z6A9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q7Z6A9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BTLA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BUB1B (UniProt:O60566) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O60566"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BUB1B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CACNA1D (UniProt:Q01668) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q01668"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CACNA1D_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CAD (UniProt:P27708) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P27708"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CAD_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CANT1 (UniProt:Q8WVQ1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8WVQ1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CANT1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CBLB (UniProt:Q13191) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13191"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CBLB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CBLC (UniProt:Q9ULV8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9ULV8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CBLC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CCDC6 (UniProt:Q16204) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16204"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CCDC6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CCN6 (UniProt:O95389) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95389"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CCN6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CCNB1IP1 (UniProt:Q9NPC3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NPC3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CCNB1IP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CCNB3 (UniProt:Q8WWL7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8WWL7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CCNB3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CCT6B (UniProt:Q92526) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92526"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CCT6B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CD36 (UniProt:P16671) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P16671"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CD36_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CDH11 (UniProt:P55287) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P55287"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CDH11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CHCHD7 (UniProt:Q9BUK0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BUK0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CHCHD7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CHD2 (UniProt:O14647) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O14647"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CHD2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CHD4 (UniProt:Q14839) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14839"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CHD4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CHIC2 (UniProt:Q9UKJ5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UKJ5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CHIC2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CHN1 (UniProt:P15882) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15882"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CHN1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CILK1 (UniProt:Q9UPZ9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UPZ9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CILK1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CKS1B (UniProt:P61024) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P61024"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CKS1B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CLIP1 (UniProt:P30622) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P30622"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CLIP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CLP1 (UniProt:Q92989) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92989"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CLP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CNBP (UniProt:P62633) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P62633"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CNBP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CNOT3 (UniProt:O75175) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75175"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CNOT3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does COL2A1 (UniProt:P02458) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P02458"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS COL2A1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CPS1 (UniProt:P31327) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P31327"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CPS1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CRTC1 (UniProt:Q6UUV9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6UUV9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CRTC1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CRTC3 (UniProt:Q6UUV7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6UUV7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CRTC3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CSF1 (UniProt:P09603) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P09603"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CSF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CUL4A (UniProt:Q13619) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13619"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CUL4A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CYP17A1 (UniProt:P05093) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P05093"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CYP17A1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DAZAP1 (UniProt:Q96EP5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96EP5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DAZAP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DCTN1 (UniProt:Q14203) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14203"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DCTN1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DDB2 (UniProt:Q92466) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92466"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DDB2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DDR1 (UniProt:Q08345) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q08345"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DDR1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DDX4 (UniProt:Q9NQI0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NQI0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DDX4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DDX41 (UniProt:Q9UJV9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UJV9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DDX41_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DDX5 (UniProt:P17844) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P17844"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DDX5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DKK1 (UniProt:O94907) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O94907"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DKK1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DKK2 (UniProt:Q9UBU2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UBU2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DKK2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DKK3 (UniProt:Q9UBP4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UBP4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DKK3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DKK4 (UniProt:Q9UBT3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UBT3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DKK4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DUSP2 (UniProt:Q05923) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q05923"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DUSP2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DUSP9 (UniProt:Q99956) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99956"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DUSP9_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EIF3E (UniProt:P60228) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P60228"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EIF3E_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ELK4 (UniProt:P28324) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P28324"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ELK4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ELN (UniProt:P15502) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15502"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ELN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ELP2 (UniProt:Q6IA86) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6IA86"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ELP2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EPHB4 (UniProt:P54760) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P54760"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EPHB4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ERC1 (UniProt:Q8IUD2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8IUD2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ERC1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ETS1 (UniProt:P14921) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P14921"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ETS1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EXOSC6 (UniProt:Q5RKV6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q5RKV6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EXOSC6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EXT2 (UniProt:Q93063) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q93063"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EXT2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FAF1 (UniProt:Q9UNN5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UNN5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FAF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FAT4 (UniProt:Q6V0I7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6V0I7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FAT4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FBXO31 (UniProt:Q5XUX0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q5XUX0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FBXO31_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FES (UniProt:P07332) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P07332"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FES_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FGF12 (UniProt:P61328) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P61328"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FGF12_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FIP1L1 (UniProt:Q6UN15) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6UN15"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FIP1L1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FLYWCH1 (UniProt:Q4VC44) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q4VC44"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FLYWCH1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FNBP1 (UniProt:Q96RU3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96RU3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FNBP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FRS2 (UniProt:Q8WU20) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8WU20"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FRS2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GABRA6 (UniProt:Q16445) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16445"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GABRA6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GADD45B (UniProt:O75293) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75293"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GADD45B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GATA4 (UniProt:P43694) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P43694"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GATA4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GATA6 (UniProt:Q92908) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92908"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GATA6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GMPS (UniProt:P49915) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P49915"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GMPS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GOLGA5 (UniProt:Q8TBA6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8TBA6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GOLGA5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GOPC (UniProt:Q9HD26) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9HD26"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GOPC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GPC3 (UniProt:P51654) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P51654"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GPC3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GRM3 (UniProt:Q14832) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14832"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GRM3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GTSE1 (UniProt:Q9NYZ3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NYZ3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GTSE1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H3C13 (UniProt:Q71DI3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q71DI3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H3C13_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H3C14 (UniProt:Q71DI3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q71DI3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H3C14_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does H3C15 (UniProt:Q71DI3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q71DI3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS H3C15_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HIRA (UniProt:P54198) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P54198"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HIRA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HNRNPA2B1 (UniProt:P22626) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P22626"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HNRNPA2B1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HOOK3 (UniProt:Q86VS8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86VS8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HOOK3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HOXA3 (UniProt:O43365) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43365"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HOXA3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HSD3B1 (UniProt:P14060) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P14060"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HSD3B1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IKBKB (UniProt:O14920) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O14920"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IKBKB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IKZF2 (UniProt:Q9UKS7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UKS7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IKZF2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IL2 (UniProt:P60568) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P60568"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IL2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does INPP5D (UniProt:Q92835) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92835"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS INPP5D_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IRF2 (UniProt:P14316) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P14316"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IRF2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IRS4 (UniProt:O14654) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O14654"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IRS4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does JAZF1 (UniProt:Q86VZ6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86VZ6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS JAZF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KAT6B (UniProt:Q8WYB5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8WYB5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KAT6B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KCNJ5 (UniProt:P48544) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P48544"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KCNJ5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KDM2B (UniProt:Q8NHM5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8NHM5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KDM2B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KDM4C (UniProt:Q9H3R0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9H3R0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KDM4C_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KEL (UniProt:P23276) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P23276"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KEL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KLF2 (UniProt:Q9Y5W3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y5W3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KLF2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KLF3 (UniProt:P57682) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P57682"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KLF3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KLF6 (UniProt:Q99612) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99612"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KLF6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KLK2 (UniProt:P20151) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P20151"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KLK2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KNL1 (UniProt:Q8NG31) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8NG31"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KNL1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KTN1 (UniProt:Q86UP2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86UP2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KTN1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LARP4B (UniProt:Q92615) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92615"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LARP4B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LCP1 (UniProt:P13796) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P13796"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LCP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LIFR (UniProt:P42702) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P42702"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LIFR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LMNA (UniProt:P02545) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P02545"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LMNA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LRIG3 (UniProt:Q6UXM1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6UXM1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LRIG3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LRP5 (UniProt:O75197) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75197"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LRP5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LRP6 (UniProt:O75581) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75581"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LRP6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LRRK2 (UniProt:Q5S007) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q5S007"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LRRK2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MAGED1 (UniProt:Q9Y5V3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y5V3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MAGED1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MAML2 (UniProt:Q8IZL2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8IZL2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MAML2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MAP3K6 (UniProt:O95382) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95382"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MAP3K6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MAP3K7 (UniProt:O43318) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43318"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MAP3K7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MBD6 (UniProt:Q96DN6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96DN6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MBD6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MDS2 (UniProt:Q8NDY4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8NDY4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MDS2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MEF2C (UniProt:Q06413) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q06413"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MEF2C_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MEF2D (UniProt:Q14814) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14814"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MEF2D_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MERTK (UniProt:Q12866) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q12866"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MERTK_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MIB1 (UniProt:Q86YT6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86YT6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MIB1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MIDEAS (UniProt:Q6PJG2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6PJG2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MIDEAS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MKI67 (UniProt:P46013) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P46013"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MKI67_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MKNK1 (UniProt:Q9BUB5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BUB5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MKNK1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MLLT11 (UniProt:Q13015) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13015"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MLLT11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MNX1 (UniProt:P50219) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P50219"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MNX1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MTCP1 (UniProt:P56277) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P56277"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MTCP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MYO18A (UniProt:Q92614) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92614"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MYO18A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MYO5A (UniProt:Q9Y4I1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y4I1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MYO5A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NAB2 (UniProt:Q15742) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15742"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NAB2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NACA (UniProt:Q13765) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13765"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NACA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NBEAP1 (UniProt:P0C6P0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P0C6P0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NBEAP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NCOA1 (UniProt:Q15788) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15788"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NCOA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NCOA4 (UniProt:Q13772) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13772"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NCOA4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NFATC2 (UniProt:Q13469) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13469"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NFATC2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NFIB (UniProt:O00712) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O00712"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NFIB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NFKBIE (UniProt:O00221) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O00221"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NFKBIE_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NOD1 (UniProt:Q9Y239) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y239"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NOD1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NONO (UniProt:Q15233) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15233"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NONO_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NUTM2B (UniProt:A6NNL0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"A6NNL0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NUTM2B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does OLIG2 (UniProt:Q13516) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13516"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS OLIG2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does OMD (UniProt:Q99983) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99983"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS OMD_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PAG1 (UniProt:Q9NWQ8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NWQ8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PAG1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PAK3 (UniProt:O75914) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75914"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PAK3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PARP2 (UniProt:Q9UGN5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UGN5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PARP2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PARP3 (UniProt:Q9Y6F1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y6F1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PARP3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PASK (UniProt:Q96RG2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96RG2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PASK_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PATZ1 (UniProt:Q9HBE1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9HBE1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PATZ1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PC (UniProt:P11498) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P11498"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PCLO (UniProt:Q9Y6V0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y6V0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PCLO_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PCSK7 (UniProt:Q16549) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16549"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PCSK7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PDCD11 (UniProt:Q14690) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14690"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PDCD11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PHF1 (UniProt:O43189) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43189"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PHF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PIK3C2B (UniProt:O00750) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O00750"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PIK3C2B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does POLQ (UniProt:O75417) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75417"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS POLQ_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does POU5F1 (UniProt:Q01860) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q01860"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS POU5F1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PPFIBP1 (UniProt:Q86W92) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86W92"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PPFIBP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PPP1CB (UniProt:P62140) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P62140"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PPP1CB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRCC (UniProt:Q92733) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92733"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRCC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRF1 (UniProt:P14222) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P14222"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRKDC (UniProt:P78527) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P78527"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRKDC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRSS1 (UniProt:P07477) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P07477"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRSS1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRSS8 (UniProt:Q16651) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16651"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRSS8_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PTK6 (UniProt:Q13882) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13882"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PTK6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PTK7 (UniProt:Q13308) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13308"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PTK7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PTPN13 (UniProt:Q12923) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q12923"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PTPN13_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PTPN6 (UniProt:P29350) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P29350"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PTPN6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PTPRB (UniProt:P23467) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P23467"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PTPRB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PTPRC (UniProt:P08575) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P08575"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PTPRC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PTPRK (UniProt:Q15262) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15262"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PTPRK_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RALGDS (UniProt:Q12967) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q12967"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RALGDS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RANBP2 (UniProt:P49792) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P49792"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RANBP2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RASGEF1A (UniProt:Q8N9B8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N9B8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RASGEF1A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RMI2 (UniProt:Q96E14) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96E14"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RMI2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPL10 (UniProt:P27635) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P27635"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPL10_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPL5 (UniProt:P46777) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P46777"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPL5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RSPO3 (UniProt:Q9BXY4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BXY4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RSPO3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RUNX2 (UniProt:Q13950) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13950"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RUNX2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does S1PR2 (UniProt:O95136) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95136"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS S1PR2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SALL4 (UniProt:Q9UJQ4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UJQ4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SALL4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SBDS (UniProt:Q9Y3A5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y3A5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SBDS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SEC31A (UniProt:O94979) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O94979"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SEC31A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SEPTIN5 (UniProt:Q99719) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99719"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SEPTIN5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SEPTIN6 (UniProt:Q14141) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14141"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SEPTIN6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SEPTIN9 (UniProt:Q9UHD8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UHD8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SEPTIN9_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SERP2 (UniProt:Q8N6R1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N6R1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SERP2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SFPQ (UniProt:P23246) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P23246"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SFPQ_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SFRP1 (UniProt:Q8N474) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N474"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SFRP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SFRP2 (UniProt:Q96HF1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96HF1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SFRP2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SFRP4 (UniProt:Q6FHJ7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6FHJ7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SFRP4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SIX1 (UniProt:Q15475) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15475"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SIX1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SLC1A2 (UniProt:P43004) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P43004"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SLC1A2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SLC45A3 (UniProt:Q96JT2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96JT2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SLC45A3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SMARCA1 (UniProt:P28370) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P28370"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SMARCA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SNCAIP (UniProt:Q9Y6H5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y6H5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SNCAIP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SND1 (UniProt:Q7KZF4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q7KZF4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SND1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SNX29 (UniProt:Q8TEQ0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8TEQ0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SNX29_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SOCS2 (UniProt:O14508) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O14508"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SOCS2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SOX10 (UniProt:P56693) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P56693"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SOX10_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SS18L1 (UniProt:O75177) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75177"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SS18L1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does STAT1 (UniProt:P42224) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P42224"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS STAT1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does STAT2 (UniProt:P52630) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P52630"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS STAT2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does STAT4 (UniProt:Q14765) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14765"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS STAT4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does STIL (UniProt:Q15468) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15468"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS STIL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does STRN (UniProt:O43815) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43815"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS STRN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TAF1 (UniProt:P21675) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P21675"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TAF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TCEA1 (UniProt:P23193) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P23193"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TCEA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TCF12 (UniProt:Q99081) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99081"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TCF12_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TCL1B (UniProt:O95988) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95988"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TCL1B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TEC (UniProt:P42680) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P42680"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TEC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NR4A3 (UniProt:Q92570) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92570"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NR4A3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TFEB (UniProt:P19484) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P19484"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TFEB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TFPT (UniProt:P0C1Z6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P0C1Z6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TFPT_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TFRC (UniProt:P02786) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P02786"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TFRC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TIPARP (UniProt:Q7Z3E1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q7Z3E1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TIPARP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TLE1 (UniProt:Q04724) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q04724"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TLE1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TLE2 (UniProt:Q04725) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q04725"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TLE2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TLE3 (UniProt:Q04726) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q04726"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TLE3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TLE4 (UniProt:Q04727) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q04727"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TLE4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TLL2 (UniProt:Q9Y6L7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y6L7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TLL2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TMEM30A (UniProt:Q9NV96) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NV96"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TMEM30A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TNFRSF11A (UniProt:Q9Y6Q6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y6Q6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TNFRSF11A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TPR (UniProt:P12270) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P12270"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TPR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TRIM27 (UniProt:P14373) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P14373"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TRIM27_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TRIM33 (UniProt:Q9UPN9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UPN9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TRIM33_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TRRAP (UniProt:Q9Y4A5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y4A5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TRRAP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TTL (UniProt:Q8NG68) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8NG68"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TTL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TUSC3 (UniProt:Q13454) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13454"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TUSC3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TYRO3 (UniProt:Q06418) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q06418"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TYRO3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does WAS (UniProt:P42768) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P42768"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS WAS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does WDCP (UniProt:Q9H6R7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9H6R7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS WDCP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does WDR90 (UniProt:Q96KV7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96KV7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS WDR90_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does WRN (UniProt:Q14191) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14191"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS WRN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does WWP1 (UniProt:Q9H0M0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9H0M0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS WWP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does XPA (UniProt:P23025) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P23025"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS XPA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does XPC (UniProt:Q01831) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q01831"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS XPC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does YPEL5 (UniProt:P62699) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P62699"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS YPEL5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does YWHAE (UniProt:P62258) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P62258"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS YWHAE_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does YY1 (UniProt:P25490) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P25490"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS YY1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does YY1AP1 (UniProt:Q9H869) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9H869"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS YY1AP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZBTB20 (UniProt:Q9HC78) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9HC78"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZBTB20_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZBTB7A (UniProt:O95365) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95365"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZBTB7A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZFP36L1 (UniProt:Q07352) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q07352"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZFP36L1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZMYM3 (UniProt:Q14202) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14202"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZMYM3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZNF24 (UniProt:P17028) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P17028"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZNF24_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZNF331 (UniProt:Q9NQX6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NQX6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZNF331_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZNF750 (UniProt:Q32MQ0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q32MQ0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZNF750_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;


############################################################

#7) MASTERFILE7 = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/396blairmelpways/all_387_queries_blair_mel_genes.cypher

//In which pathways does ABCA1 (UniProt:O95477) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95477"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ABCA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ABCA12 (UniProt:Q86UK0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86UK0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ABCA12_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ABCA4 (UniProt:P78363) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P78363"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ABCA4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ABCC6 (UniProt:O95255) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95255"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ABCC6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ABHD5 (UniProt:Q8WTS1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8WTS1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ABHD5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ACVRL1 (UniProt:P37023) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P37023"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ACVRL1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ADA (UniProt:P00813) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P00813"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ADA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ADAMTS2 (UniProt:O95450) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95450"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ADAMTS2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AFG3L2 (UniProt:Q9Y4W6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y4W6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AFG3L2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AGL (UniProt:P35573) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35573"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AGL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AHCY (UniProt:P23526) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P23526"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AHCY_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AHI1 (UniProt:Q8N157) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N157"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AHI1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AK2 (UniProt:P54819) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P54819"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AK2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ALDH3A2 (UniProt:P51648) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P51648"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ALDH3A2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ALOXE3 (UniProt:Q9BYJ1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BYJ1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ALOXE3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ANO10 (UniProt:Q9NW15) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NW15"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ANO10_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does AP3B1 (UniProt:O00203) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O00203"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS AP3B1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does APOA1 (UniProt:P02647) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P02647"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS APOA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does APOB (UniProt:P04114) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04114"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS APOB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does APRT (UniProt:P07741) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P07741"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS APRT_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does APTX (UniProt:Q7Z2E3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q7Z2E3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS APTX_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARG1 (UniProt:P05089) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P05089"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARG1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARL13B (UniProt:Q3SXY8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q3SXY8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARL13B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARL6 (UniProt:Q9H0F7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9H0F7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARL6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ARSA (UniProt:P15289) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15289"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ARSA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ASL (UniProt:P04424) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04424"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ASL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ASS1 (UniProt:P00966) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P00966"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ASS1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATP2A2 (UniProt:P16615) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P16615"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATP2A2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATP2C1 (UniProt:P98194) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P98194"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATP2C1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATP7A (UniProt:Q04656) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q04656"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATP7A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATP7B (UniProt:P35670) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35670"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATP7B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATXN1 (UniProt:P54253) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P54253"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATXN1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATXN10 (UniProt:Q9UBB4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UBB4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATXN10_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATXN3 (UniProt:P54252) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P54252"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATXN3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATXN8 (UniProt:Q156A1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q156A1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATXN8_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ATXN8OS (UniProt:P0DMR3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P0DMR3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ATXN8OS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does B9D1 (UniProt:Q9UPM9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UPM9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS B9D1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does B9D2 (UniProt:Q9BPU9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BPU9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS B9D2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BBS1 (UniProt:Q8NFJ9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8NFJ9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BBS1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BBS10 (UniProt:Q8TAM1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8TAM1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BBS10_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BBS12 (UniProt:Q6ZW61) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6ZW61"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BBS12_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BBS2 (UniProt:Q9BXC9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BXC9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BBS2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BBS4 (UniProt:Q96RK4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96RK4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BBS4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BBS5 (UniProt:Q8N3I7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N3I7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BBS5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BBS7 (UniProt:Q8IWZ6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8IWZ6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BBS7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BBS9 (UniProt:Q3SYG4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q3SYG4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BBS9_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BEST1 (UniProt:O76090) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O76090"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BEST1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BLNK (UniProt:Q8WV28) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8WV28"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BLNK_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BLOC1S3 (UniProt:Q6QNY0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6QNY0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BLOC1S3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BLOC1S6 (UniProt:Q9UL45) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UL45"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BLOC1S6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BMP4 (UniProt:P12644) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P12644"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BMP4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does BSCL2 (UniProt:Q96G97) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96G97"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS BSCL2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does C10orf2 (UniProt:Q96RR1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96RR1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS C10orf2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does C2orf71 (UniProt:A6NGG8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"A6NGG8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS C2orf71_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CA4 (UniProt:P22748) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P22748"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CA4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CACNA1A (UniProt:O00555) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O00555"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CACNA1A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CACNA1C (UniProt:Q13936) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13936"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CACNA1C_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CAV3 (UniProt:P56539) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P56539"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CAV3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CC2D2A (UniProt:Q9P2K1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9P2K1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CC2D2A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CD3D (UniProt:P04234) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04234"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CD3D_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CD40LG (UniProt:P29965) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P29965"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CD40LG_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CEP290 (UniProt:O15078) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15078"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CEP290_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CERKL (UniProt:Q49MI3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q49MI3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CERKL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CFTR (UniProt:P13569) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P13569"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CFTR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CHD7 (UniProt:Q9P2D1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9P2D1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CHD7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CLCN5 (UniProt:P51795) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P51795"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CLCN5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CLIP2 (UniProt:Q9UDT6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UDT6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CLIP2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CNGA1 (UniProt:P29973) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P29973"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CNGA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CNGB1 (UniProt:Q14028) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14028"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CNGB1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does COL11A2 (UniProt:P13942) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P13942"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS COL11A2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does COL17A1 (UniProt:Q9UMD9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UMD9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS COL17A1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does COL1A2 (UniProt:P08123) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P08123"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS COL1A2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does COL3A1 (UniProt:P02461) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P02461"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS COL3A1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does COL5A1 (UniProt:P20908) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P20908"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS COL5A1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does COL5A2 (UniProt:P05997) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P05997"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS COL5A2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does COL7A1 (UniProt:Q02388) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q02388"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS COL7A1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CRB1 (UniProt:P82279) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P82279"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CRB1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CRTAP (UniProt:O75718) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75718"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CRTAP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CRX (UniProt:O43186) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43186"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CRX_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CSTA (UniProt:P01040) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P01040"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CSTA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CUL7 (UniProt:Q14999) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14999"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CUL7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CYBA (UniProt:P13498) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P13498"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CYBA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CYBB (UniProt:P04839) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04839"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CYBB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CYP11A1 (UniProt:P05108) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P05108"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CYP11A1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CYP11B1 (UniProt:P15538) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15538"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CYP11B1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CYP21A2 (UniProt:P08686) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P08686"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CYP21A2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CYP27B1 (UniProt:O15528) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15528"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CYP27B1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does CYP4F22 (UniProt:Q6NT55) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6NT55"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS CYP4F22_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DAGLA (UniProt:Q9Y4D2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y4D2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DAGLA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DCLRE1C (UniProt:Q96SD1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96SD1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DCLRE1C_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DHCR7 (UniProt:Q9UBM7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UBM7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DHCR7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DHTKD1 (UniProt:Q96HY7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96HY7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DHTKD1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DISP1 (UniProt:Q96F81) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96F81"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DISP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DKC1 (UniProt:O60832) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O60832"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DKC1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DMP1 (UniProt:Q13316) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13316"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DMP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does DTNBP1 (UniProt:Q96EV8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96EV8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS DTNBP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EDA (UniProt:Q92838) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92838"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EDA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EDAR (UniProt:Q9UNE0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UNE0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EDAR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EDARADD (UniProt:Q8WWZ3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8WWZ3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EDARADD_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EDN3 (UniProt:P14138) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P14138"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EDN3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EDNRB (UniProt:P24530) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P24530"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EDNRB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EGR2 (UniProt:P11161) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P11161"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EGR2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ELOVL4 (UniProt:Q9GZR5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9GZR5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ELOVL4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ENG (UniProt:P17813) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P17813"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ENG_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ENPP1 (UniProt:P22413) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P22413"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ENPP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does EYS (UniProt:Q5T1H1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q5T1H1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS EYS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does F12 (UniProt:P00748) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P00748"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS F12_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does F8 (UniProt:P00451) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P00451"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS F8_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does F9 (UniProt:P00740) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P00740"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS F9_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FAH (UniProt:P16930) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P16930"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FAH_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FAM161A (UniProt:Q3B820) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q3B820"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FAM161A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FERMT3 (UniProt:Q86UX7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86UX7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FERMT3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FGD1 (UniProt:P98174) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P98174"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FGD1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FGD4 (UniProt:Q96M96) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96M96"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FGD4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FGF8 (UniProt:P55075) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P55075"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FGF8_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FIG4 (UniProt:Q92562) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92562"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FIG4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FOXH1 (UniProt:O75593) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75593"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FOXH1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FSCN2 (UniProt:O14926) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O14926"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FSCN2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does FXN (UniProt:Q16595) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16595"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS FXN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does G6PC (UniProt:P35575) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35575"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS G6PC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does G6PD (UniProt:P11413) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P11413"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS G6PD_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GAA (UniProt:P10253) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P10253"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GAA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GALC (UniProt:P54803) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P54803"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GALC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GARS (UniProt:P41250) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P41250"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GARS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GATM (UniProt:P50440) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P50440"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GATM_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GBA (UniProt:P04062) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04062"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GBA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GCDH (UniProt:Q92947) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92947"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GCDH_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GCH1 (UniProt:P30793) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P30793"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GCH1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GDAP1 (UniProt:Q8TB36) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8TB36"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GDAP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GDF3 (UniProt:Q9NR23) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NR23"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GDF3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GDF6 (UniProt:Q6KF10) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6KF10"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GDF6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GFAP (UniProt:P14136) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P14136"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GFAP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GH1 (UniProt:P01241) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P01241"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GH1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GHRHR (UniProt:Q02643) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q02643"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GHRHR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GJB1 (UniProt:P08034) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P08034"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GJB1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GJB6 (UniProt:O95452) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95452"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GJB6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GLA (UniProt:P06280) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P06280"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GLA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GLDC (UniProt:P23378) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P23378"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GLDC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GLI2 (UniProt:P10070) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P10070"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GLI2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GNMT (UniProt:Q14749) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14749"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GNMT_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GTF2IRD1 (UniProt:Q9UHL9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UHL9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GTF2IRD1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does GUCA1B (UniProt:Q9UMX6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UMX6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS GUCA1B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HBA2 (UniProt:P69905) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P69905"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HBA2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HBB (UniProt:P68871) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P68871"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HBB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HESX1 (UniProt:Q9UBX0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UBX0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HESX1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HPD (UniProt:P32754) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P32754"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HPD_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HPRT1 (UniProt:P00492) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P00492"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HPRT1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HPS1 (UniProt:Q92902) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92902"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HPS1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HPS4 (UniProt:Q9NQG7) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NQG7"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HPS4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HPS5 (UniProt:Q9UPZ3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UPZ3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HPS5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HPS6 (UniProt:Q86YV9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86YV9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HPS6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HSD11B1 (UniProt:P28845) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P28845"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HSD11B1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HSD3B2 (UniProt:P26439) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P26439"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HSD3B2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HSPB1 (UniProt:P04792) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04792"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HSPB1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HSPB8 (UniProt:Q9UJY1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UJY1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HSPB8_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HSPG2 (UniProt:P98160) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P98160"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HSPG2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IDH3B (UniProt:O43837) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43837"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IDH3B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IDUA (UniProt:P35475) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35475"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IDUA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IGHM (UniProt:P01871) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P01871"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IGHM_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IGLL1 (UniProt:P15814) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15814"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IGLL1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IKBKAP (UniProt:O95163) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95163"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IKBKAP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IL2RG (UniProt:P31785) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P31785"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IL2RG_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IMPDH1 (UniProt:P20839) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P20839"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IMPDH1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IMPG2 (UniProt:Q9BZV3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BZV3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IMPG2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does INF2 (UniProt:Q27J81) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q27J81"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS INF2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does INPP5E (UniProt:Q9NRR6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NRR6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS INPP5E_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does IRF6 (UniProt:O14896) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O14896"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS IRF6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ITGA6 (UniProt:P23229) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P23229"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ITGA6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ITGB2 (UniProt:P05107) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P05107"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ITGB2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ITGB4 (UniProt:P16144) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P16144"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ITGB4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ITPR1 (UniProt:Q14643) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14643"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ITPR1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does JAG1 (UniProt:P78504) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P78504"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS JAG1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does JPH3 (UniProt:Q8WXH2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8WXH2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS JPH3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KAL1 (UniProt:P23352) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P23352"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KAL1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KARS (UniProt:Q15046) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15046"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KARS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KCNC3 (UniProt:Q14003) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14003"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KCNC3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KCNE1 (UniProt:P15382) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15382"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KCNE1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KCNE2 (UniProt:Q9Y6J6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y6J6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KCNE2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KCNH2 (UniProt:Q12809) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q12809"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KCNH2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KCNQ1 (UniProt:P51787) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P51787"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KCNQ1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KIF1B (UniProt:O60333) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O60333"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KIF1B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KLHL7 (UniProt:Q8IXQ5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8IXQ5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KLHL7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KRT1 (UniProt:P04264) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04264"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KRT1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KRT14 (UniProt:P02533) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P02533"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KRT14_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KRT16 (UniProt:P08779) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P08779"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KRT16_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KRT17 (UniProt:Q04695) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q04695"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KRT17_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KRT2 (UniProt:P35908) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35908"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KRT2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KRT5 (UniProt:P13647) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P13647"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KRT5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KRT6A (UniProt:P02538) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P02538"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KRT6A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KRT6B (UniProt:P04259) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04259"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KRT6B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KRT6C (UniProt:P48668) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P48668"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KRT6C_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does KRT9 (UniProt:P35527) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35527"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS KRT9_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does L1CAM (UniProt:P32004) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P32004"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS L1CAM_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LAMA3 (UniProt:Q16787) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16787"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LAMA3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LAMB3 (UniProt:Q13751) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13751"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LAMB3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LAMC2 (UniProt:Q13753) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13753"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LAMC2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LAMP2 (UniProt:P13473) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P13473"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LAMP2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LCAT (UniProt:P04180) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04180"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LCAT_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LEPRE1 (UniProt:Q32P28) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q32P28"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LEPRE1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LETM1 (UniProt:O95202) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95202"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LETM1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LHCGR (UniProt:P22888) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P22888"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LHCGR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LHX3 (UniProt:Q9UBR4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UBR4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LHX3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LHX4 (UniProt:Q969G2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q969G2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LHX4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LIMK1 (UniProt:P53667) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P53667"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LIMK1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LIPN (UniProt:Q5VXI9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q5VXI9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LIPN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LITAF (UniProt:Q99732) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99732"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LITAF_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LMX1B (UniProt:O60663) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O60663"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LMX1B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LPL (UniProt:P06858) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P06858"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LPL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LRAT (UniProt:O95237) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95237"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LRAT_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does LRRC8A (UniProt:Q8IWT6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8IWT6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS LRRC8A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MAT1A (UniProt:Q00266) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q00266"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MAT1A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MC1R (UniProt:Q01726) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q01726"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MC1R_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MED25 (UniProt:Q71SY5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q71SY5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MED25_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MFN2 (UniProt:O95140) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95140"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MFN2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MFRP (UniProt:Q9BY79) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BY79"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MFRP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MKKS (UniProt:Q9NPJ1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NPJ1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MKKS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MKS1 (UniProt:Q9NXB0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NXB0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MKS1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MPZ (UniProt:P25189) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P25189"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MPZ_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MSX1 (UniProt:P28360) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P28360"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MSX1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MTMR2 (UniProt:Q13614) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13614"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MTMR2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does MTTP (UniProt:P55157) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P55157"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS MTTP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NAGS (UniProt:Q8N159) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N159"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NAGS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NCF1 (UniProt:P14598) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P14598"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NCF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NCF2 (UniProt:P19878) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P19878"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NCF2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NCF4 (UniProt:Q15080) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15080"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NCF4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NEFL (UniProt:P07196) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P07196"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NEFL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NHEJ1 (UniProt:Q9H9Q4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9H9Q4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NHEJ1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NHP2 (UniProt:Q9NX24) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NX24"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NHP2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NIPAL4 (UniProt:Q0D2K0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q0D2K0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NIPAL4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NIPBL (UniProt:Q6KC79) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6KC79"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NIPBL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NODAL (UniProt:Q96S42) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96S42"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NODAL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NOP10 (UniProt:Q9NPE3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NPE3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NOP10_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NOP56 (UniProt:O00567) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O00567"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NOP56_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NPC1 (UniProt:O15118) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15118"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NPC1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NPC2 (UniProt:P61916) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P61916"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NPC2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NPHP1 (UniProt:O15259) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15259"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NPHP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NR2E3 (UniProt:Q9Y5X4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y5X4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NR2E3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does NRL (UniProt:P54845) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P54845"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS NRL_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does OCA2 (UniProt:Q04671) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q04671"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS OCA2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does OFD1 (UniProt:O75665) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75665"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS OFD1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does OTX2 (UniProt:P32243) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P32243"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS OTX2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PAH (UniProt:P00439) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P00439"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PAH_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PAX6 (UniProt:P26367) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P26367"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PAX6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PCNT (UniProt:O95613) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95613"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PCNT_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PDE6A (UniProt:P16499) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P16499"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PDE6A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PDE6B (UniProt:P35913) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35913"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PDE6B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PDE6G (UniProt:P18545) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P18545"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PDE6G_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PDYN (UniProt:P01213) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P01213"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PDYN_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PGAM2 (UniProt:P15259) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15259"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PGAM2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PHEX (UniProt:P78562) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P78562"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PHEX_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PHKA1 (UniProt:P46020) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P46020"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PHKA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PHKA2 (UniProt:P46019) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P46019"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PHKA2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PHKB (UniProt:Q93100) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q93100"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PHKB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PHKG2 (UniProt:P15735) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15735"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PHKG2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PKD1 (UniProt:P98161) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P98161"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PKD1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PKHD1 (UniProt:P08F94) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P08F94"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PKHD1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PLEC (UniProt:Q15149) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15149"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PLEC_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PLOD1 (UniProt:Q02809) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q02809"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PLOD1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PMP22 (UniProt:Q01453) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q01453"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PMP22_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PMPCA (UniProt:Q10713) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q10713"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PMPCA_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PNP (UniProt:P00491) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P00491"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PNP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does POLH (UniProt:Q9Y253) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y253"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS POLH_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does POLR1C (UniProt:O15160) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15160"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS POLR1C_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does POLR1D (UniProt:P0DPB5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P0DPB5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS POLR1D_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does POR (UniProt:P16435) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P16435"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS POR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does POU1F1 (UniProt:P28069) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P28069"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS POU1F1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PPP2R2B (UniProt:Q00005) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q00005"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PPP2R2B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRCD (UniProt:Q00LT1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q00LT1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRCD_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRKCG (UniProt:P05129) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P05129"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRKCG_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRNP (UniProt:P04156) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04156"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRNP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PROK2 (UniProt:Q9HC23) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9HC23"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PROK2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PROKR2 (UniProt:Q8NFJ6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8NFJ6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PROKR2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PROM1 (UniProt:O43490) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43490"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PROM1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRPF3 (UniProt:O43395) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43395"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRPF3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRPF31 (UniProt:Q8WWY3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8WWY3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRPF31_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRPF8 (UniProt:Q6P2Q9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6P2Q9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRPF8_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRPH2 (UniProt:P23942) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P23942"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRPH2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRPS1 (UniProt:P60891) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P60891"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRPS1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRSS56 (UniProt:P0CW18) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P0CW18"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRSS56_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PRX (UniProt:Q9BXM0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BXM0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PRX_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PSAP (UniProt:P07602) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P07602"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PSAP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PSPH (UniProt:P78330) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P78330"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PSPH_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does PYGM (UniProt:P11217) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P11217"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS PYGM_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAB23 (UniProt:Q9ULC3) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9ULC3"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAB23_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAB7A (UniProt:P51149) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P51149"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAB7A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAB7B (UniProt:Q96AH8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96AH8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAB7B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAG1 (UniProt:P15918) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P15918"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAG1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAG2 (UniProt:P55895) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P55895"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAG2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RAX (UniProt:O75569) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75569"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RAX_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RBP3 (UniProt:P10745) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P10745"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RBP3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RDH12 (UniProt:Q96NR8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96NR8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RDH12_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RFX5 (UniProt:P48382) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P48382"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RFX5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RFXANK (UniProt:O14593) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O14593"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RFXANK_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RFXAP (UniProt:O00287) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O00287"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RFXAP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RGR (UniProt:P47804) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P47804"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RGR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RHO (UniProt:P08100) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P08100"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RHO_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RLBP1 (UniProt:P12271) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P12271"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RLBP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ROM1 (UniProt:Q03395) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q03395"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ROM1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ROR2 (UniProt:Q01974) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q01974"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ROR2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RP1 (UniProt:Q15555) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15555"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RP2 (UniProt:O75695) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75695"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RP2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RP9 (UniProt:Q8TA86) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8TA86"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RP9_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPE65 (UniProt:Q16518) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q16518"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPE65_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPGR (UniProt:Q92834) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92834"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPGR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPGRIP1L (UniProt:Q68CZ1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q68CZ1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPGRIP1L_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPL11 (UniProt:P62913) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P62913"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPL11_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPL35A (UniProt:P18077) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P18077"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPL35A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPS10 (UniProt:P46783) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P46783"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPS10_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPS17 (UniProt:P08708) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P08708"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPS17_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPS19 (UniProt:P39019) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P39019"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPS19_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPS24 (UniProt:P62847) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P62847"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPS24_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPS26 (UniProt:P62854) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P62854"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPS26_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPS6KA3 (UniProt:P51812) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P51812"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPS6KA3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does RPS7 (UniProt:P62081) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P62081"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS RPS7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SAG (UniProt:P10523) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P10523"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SAG_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SAR1B (UniProt:Q9Y6B6) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y6B6"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SAR1B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SBF2 (UniProt:Q86WG5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q86WG5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SBF2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SCN4B (UniProt:Q8IWT1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8IWT1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SCN4B_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SCN5A (UniProt:Q14524) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q14524"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SCN5A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SEMA4A (UniProt:Q9H3S1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9H3S1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SEMA4A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SERPING1 (UniProt:P05155) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P05155"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SERPING1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SETX (UniProt:Q7Z333) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q7Z333"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SETX_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SFTPA1 (UniProt:Q8IWL2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8IWL2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SFTPA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SFTPA2 (UniProt:Q8IWL1) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8IWL1"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SFTPA2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SH3TC2 (UniProt:Q8TF17) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8TF17"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SH3TC2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SHH (UniProt:Q15465) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15465"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SHH_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SIX3 (UniProt:O95343) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95343"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SIX3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SIX6 (UniProt:O95475) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95475"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SIX6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SLC25A15 (UniProt:Q9Y619) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y619"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SLC25A15_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SLC25A4 (UniProt:P12235) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P12235"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SLC25A4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SLC26A2 (UniProt:P50443) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P50443"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SLC26A2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SLC34A3 (UniProt:Q8N130) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N130"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SLC34A3_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SLC35C1 (UniProt:Q96A29) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q96A29"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SLC35C1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SLC37A4 (UniProt:O43826) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43826"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SLC37A4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SLC45A2 (UniProt:Q9UMX9) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9UMX9"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SLC45A2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SMPD1 (UniProt:P17405) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P17405"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SMPD1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SNAI2 (UniProt:O43623) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O43623"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SNAI2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SNRNP200 (UniProt:O75643) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75643"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SNRNP200_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SPATA7 (UniProt:Q9P0W8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9P0W8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SPATA7_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SPINK5 (UniProt:Q9NQ38) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NQ38"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SPINK5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SPR (UniProt:P35270) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P35270"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SPR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SPTBN2 (UniProt:O15020) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O15020"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SPTBN2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does STAR (UniProt:P49675) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P49675"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS STAR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does STRA6 (UniProt:Q9BX79) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BX79"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS STRA6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SYNE1 (UniProt:Q8NF91) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8NF91"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SYNE1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does SYT14 (UniProt:Q8NB59) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8NB59"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS SYT14_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TACR1 (UniProt:P25103) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P25103"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TACR1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TAT (UniProt:P17735) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P17735"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TAT_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TBP (UniProt:P20226) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P20226"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TBP_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TBX19 (UniProt:O60806) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O60806"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TBX19_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TBX22 (UniProt:Q9Y458) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9Y458"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TBX22_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TBX5 (UniProt:Q99593) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q99593"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TBX5_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TCOF1 (UniProt:Q13428) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13428"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TCOF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TDGF1 (UniProt:P13385) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P13385"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TDGF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TDP1 (UniProt:Q9NUW8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NUW8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TDP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TFF1 (UniProt:P04155) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04155"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TFF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TGIF1 (UniProt:Q15583) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15583"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TGIF1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TGM1 (UniProt:P22735) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P22735"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TGM1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TGM6 (UniProt:O95932) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95932"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TGM6_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TH (UniProt:P07101) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P07101"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TH_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TINF2 (UniProt:Q9BSI4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BSI4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TINF2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TMEM216 (UniProt:Q9P0N5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9P0N5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TMEM216_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TMEM67 (UniProt:Q5HYA8) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q5HYA8"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TMEM67_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TNXB (UniProt:P22105) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P22105"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TNXB_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TOPORS (UniProt:Q9NS56) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9NS56"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TOPORS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TRIM32 (UniProt:Q13049) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q13049"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TRIM32_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TRPV4 (UniProt:Q9HBA0) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9HBA0"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TRPV4_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TTBK2 (UniProt:Q6IQ55) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q6IQ55"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TTBK2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TTC8 (UniProt:Q8TAM2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8TAM2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TTC8_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TULP1 (UniProt:O00294) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O00294"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TULP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TWIST1 (UniProt:Q15672) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q15672"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TWIST1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TYR (UniProt:P14679) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P14679"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TYR_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does TYRP1 (UniProt:P17643) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P17643"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS TYRP1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does UBL4A (UniProt:P11441) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P11441"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS UBL4A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does UMPS (UniProt:P11172) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P11172"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS UMPS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does USH2A (UniProt:O75445) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O75445"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS USH2A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does VSX2 (UniProt:P58304) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P58304"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS VSX2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does VWF (UniProt:P04275) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P04275"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS VWF_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does WHSC1 (UniProt:O96028) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O96028"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS WHSC1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does WNT10A (UniProt:Q9GZT5) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9GZT5"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS WNT10A_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does WRAP53 (UniProt:Q9BUR4) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q9BUR4"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS WRAP53_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does YARS (UniProt:P54577) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P54577"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS YARS_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZAP70 (UniProt:P43403) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P43403"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZAP70_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZIC2 (UniProt:O95409) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"O95409"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZIC2_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZNF513 (UniProt:Q8N8E2) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q8N8E2"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZNF513_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does ZNF592 (UniProt:Q92610) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"Q92610"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS ZNF592_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

//In which pathways does HBA1 (UniProt:P69905) participate?
MATCH (p:Pathway)-[:hasEvent*]->(rle:ReactionLikeEvent),
      (rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy|
              regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity),
       (pe)-[:referenceEntity]->(re:ReferenceEntity{identifier:"P69905"}),
       (re)-[:referenceDatabase]->(rd:ReferenceDatabase{displayName:"UniProt"})
RETURN DISTINCT p.stId AS HBA1_Identifier, p.displayName AS Pathway, rle.stId AS Reaction, rle.displayName AS ReactionName
ORDER BY p.stId ;

############################################################
############################################################
############################################################

# MASTERFILE 8 obtains the complete pathway hierarchies for all reactions in which 
#1186 genes participate: 
#/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/gene_pway_matrix/all_reactions_for_1186_oncokb_blairmel_genes.txt ; 
#obtains the complete pathway hierarchy for all reactions in which each of the 1186 
#genes participates:
#/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/gene_pway_matrix/ genewise_reactions_for_1186_oncokb_blairmel_genes.txt ;
#runs the matrix program:
#matrixofreactions_onwhich_oncokb_blairmel_genes_converge.pl
#to generate a matrix of 8202 reactions and 1186 genes; processes the matrix further; 

#8) MASTERFILE8 = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/mtx_create_cmd.sh

#pathway analysis for 862 oncokb + 324 blair_mel = 1186 genes;

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal

#plan to create a matrix with the first row (or col headings) being the set of 1186 
#oncokb + blair_mel genes; the first col (or row headings) will be the list of all 
#unique reactions that the set of 1186 oncokb + blair_mel genes participate in; the matrix 
#will indicate which reactions each of the 1186 genes participates in; the matrix 
#will be generated with the program written by me for my pathway paper; the .pl, 
#input and output files for the program are stored in: 
#pwd = /scratch/prasannalab/pway_luad/mtx_pway_drigenes
#program execution command and files used previously to run the program are:
##perl ding_multi_cancer_drivers.pl consensus_driver_gene_lst.txt cancerwise_drivers.txt mtx_multi_candrivers.txt
##consensus_driver_gene_lst.txt = all pathways
##cancerwise_drivers.txt = pathways for each of 15 driver genes;


#preparing input files; 
#creating a separate directory for creating the matrix; 
#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix

ls1col /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/*.txt | sed 's/^/cat /' | sed 's/$/ >> rns_in_28_superpways_hierarchy.txt/' > prep_file_containing_all_rns.sh
vi prep_file_containing_all_rns.sh
#manually removed file names not related to 28 top level pways; i.e., the files, 
#cypherq_for_hierarchy.txt, cypherq_n_nodes_superpways.txt, xtra_cypherq_for_hierarchy.txt
sh prep_file_containing_all_rns.sh
#the output file, rns_in_28_superpways_hierarchy.txt is created; 

###Note added later: In line 137 below, all " (quotation marks) have been removed
###from rns_in_28_superpways_hierarchy.txt, as the marks were causing trouble;

#counting no. of reactions 
wc -l rns_in_28_superpways_hierarchy.txt
# 15109
grep -v "p,pn" rns_in_28_superpways_hierarchy.txt | wc -l
# 14992  (i.e., there are 14992 rns in the 28 superpways, after removing
#         header lines of the type, p,pn,s1p,s1pn,r,rn; no. of header 
#         lines in the file is: 15109-14992 = 117 ) 

#the nos. of extra reaction lines were counted in the previous cmd file, 
#while getting the complete hierarchies of reactions using cypherq_for_hierarchy.txt;
#i.e., the file:
#/scratch/prasannalab/cancers_in_detail/pway_anal/cmd_pway_is_vacation_cmd_contd.sh ,
#adding the extra reactions below gives a total of 533;  
2+3+1+1+6+1+22+1+4+81+5+15+2+15+8+2+1+36+151+64+112
533
#14992-533 = 14459    subtracting 533 from 14992 reactions above, gives 14459;

#thus, by counting the no. of lines in the hierarchy files we obtain 14459 rns;
#No. of reactions REPORTED IN REACTOME = 13,890
#thus, discrepancy between no. of rns in hierarchy files and the reactome count is:
#14459 - 13890 = 569;  not a bad tally 

###Note added later: below, it will be seen that there are 278 gene id pairs,  
###from the oncokb set, which are not found in the hierarchy files 
###(oncokb_gene_rns_278_not_found_in_reactome.txt); thus, 569 - 278 = 291 reactions;
###this would improve the tally between the number of pways between reactome and hierarchy files;

#by counting the no. of records obtained in cypherq_n_nodes_superpways.txt:
grep "records" /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt | awk '{n=n+$1} END {print n}'
#total = 14155
#14155 - 13890 = 265; thus, tally between cypher_n_nodes_superpways.txt results and
#                     reactome count is even better; 
#some of the reactions probably occur in more than one subpway or superpway;

#creating a temporary copy of rns_in_28_superpways file, in order to be able to edit it;
grep -v "p,pn" rns_in_28_superpways_hierarchy.txt > temp.txt
vi temp.txt
:1,$s/,R-HSA-/ , R-HSA-/g
#foll prints only last reactome id and reaction name
awk -F" , " '{print $NF}' temp.txt > temp2.txt
vi temp2.txt
:1,$s/,/ , /
awk -F" , " '{print $1}' temp2.txt | sort | uniq | wc -l
#13527     these are the unique reactions in the set of 28 superpways;
#          they are less than 13890 reported by Reactome (which number 
#          may include ADME reactions, left out here;) 
#Foll cmd shows that 964 out of 13527 reactions occur more than once; 
awk -F" , " '{print $1}' temp2.txt | sort | uniq -c | sort -k1,1g | awk '($1 > 1 )' | wc -l
964
#some reactions occur 10, 11 or 12 times; some e.g.s,
     10 R-HSA-5609665
     11 R-HSA-5684273
     12 R-HSA-168162
grep "\bR-HSA-5609665\b" rns_in_28_superpways_hierarchy.txt
rm temp.txt temp2.txt

----------------------------------------------------------

#Next, made a copy of 1056_oncokb_outfile.txt in pwd; 
cp /scratch/prasannalab/cancers_in_detail/pway_anal/1066oncokbpways/1056_oncokb_outfile.txt outfile_oncokb_862.txt 

cp outfile_oncokb_862.txt temp.txt
vi temp.txt
#:1,$s/^"//
#:1,$s/"$//
#:1,$s/", "/, /g
#:1,$s/\\"Activator\\"/Activator/g
#:wq

#", " cannot be used as Field Separator, because sometimes the text (reaction name) may contain a ", ";
#hence, replacing ", R-HSA-..." by "\tR-HSA-...", so that if there is a ", " in the text, 
#the wrong col is not taken; also replacing "R-HSA-..., " with "R-HSA-...\t";  
#replacing 3 or more digits followed by a , with a \t;
sed 's/\(, \)\(R-HSA-\)/\t\2/g' temp.txt | sed 's/\([[:digit:]]\{3,\}\)\(, \)/\1\t/g' | \
sed 's/, Pathway, Reaction, ReactionName//g' | \
awk -F"\t" '{if ($1 ~ /_Identifier/){print $1} else {print $1 "|" $3}}' > prep_genewise_pways_oncokb_862.sh

#these were problematic in the oncokb set: 512988, 76002, 2892245, 1855183, 

#edited the file prep_genewise_pways_oncokb_862.sh
vi prep_genewise_pways_oncokb_862.sh
#:1,$s/^/echo -n -e "/
#:1,$s/$/\\t" ; grep "\\b/
#:wq

sed '1,$s/"//' outfile_oncokb_862.txt | sed '1,$s/", "/\t/g' | sed '1,$s/, Pathway, Reaction, ReactionName/\\b" rns_in_28_superpways_hierarchy.txt/' | awk -F"\t" '($1 ~ /_Identifier/){print $0} ($1 ~ /^R-HSA-/){print $1 "\\b.*\\b" $3 "\\b\" rns_in_28_superpways_hierarchy.txt"}' > col1.txt

#for some reason, 
 (ctrl+v+m) characters are introduced in col1.txt, next to genename header lines; 
#have to delete the 
 characters; 
vi col1.txt
#:1,$s/
//g
paste -d" " prep_genewise_pways_oncokb_862.sh col1.txt > junk

vi junk
#:1,$s/$/ ; echo "" ;/
#:1,$s/\\b R-HSA-/\\bR-HSA-/g
#:1,$s/"\\b /"\\b/g
#:1,$s/^M//g
#:wq

cp junk prep_genewise_pways_oncokb_862.sh

rm col1.txt junk temp.txt


#removed all " (quotation marks) from rns_in_28_superpways_hierarchy.txt; the marks were making
#their way into genewise_pways_oncokb_862.5x5
vi rns_in_28_superpways_hierarchy.txt
#:1,$s/"//g


#it took about 8 mins real time to run foll sh file; output file is of size 30M; 
sh prep_genewise_pways_oncokb_862.sh > genewise_pways_oncokb_862.txt 

#the foll command shows that there are 278 instances when a pair of reaction ids in 
#prep_genewise_pways_oncokb_862.sh is NOT FOUND in rns_in_28_superpways_hierarchy.txt; 
#thus, the cypher query for reactions in which a gene participates has pulled the pair 
#out, but the id pair is not found in the complete pway hierarchy files; not sure why the 
#pairs are not found in the hierarchy files; there are 21 unique ids for the first reaction 
#id, 21 unique ids for the second reaction id, and 174 unique id pairs; as there is 
#nothing I can do to make the pairs appear in the hierarchy files, decided to leave out these 
#278 instances (of reaction id pairs) from genewise_pways_oncokb_862.txt; 
#checking some of the pairs in reactome pathway browser showed that the first id is often 
#found in the browser; however, no information is found for the second id; maybe, the reactions
#are not catalogued in reactome; 

awk -F"\t" '(($1 ~ /\|/) && ($2 ~ /^$/)){print $1, $2}' genewise_pways_oncokb_862.txt > oncokb_gene_rns_278_not_found_in_reactome.txt
wc -l oncokb_gene_rns_278_not_found_in_reactome.txt
278   #278 pairs of reaction ids are not found in rns_in_28_superpways_hierarchy.txt
#e.g., 
# R-HSA-168179|R-HSA-450325
# R-HSA-168179|R-HSA-198731
# R-HSA-168179|R-HSA-198746
# R-HSA-168181|R-HSA-203797
# R-HSA-168181|R-HSA-199959
# R-HSA-168181|R-HSA-168053
awk -F"\t" '!(($1 ~ /\|/) && ($2 ~ /^$/)){print}' genewise_pways_oncokb_862.txt | grep -v ^$ | wc -l 
# 106421
grep -v ^$ genewise_pways_oncokb_862.txt | wc -l
# 106699
# 106699-106421 = 278

#counting number of cols in output file, genewise_pways_oncokb_862.txt; continuing above command
#but did not remove blank lines (i.e., no: grep -v ^$);
awk -F"\t" '!(($1 ~ /\|/) && ($2 ~ /^$/)){print}' genewise_pways_oncokb_862.txt | awk -F"\t" '{print NF}' > t1
#t1 shows that those lines in genewise_pways_oncokb_862.txt for which NF==1 are the ones where more than one
#hits have been pulled out for a reaction; e.g., in t1, line 204 has NF==1; line 204 in genewise_pways_oncokb_862.txt
#lists the second hit for a reaction in which AKT1 participates; line 235 in t1 has NF==1; line 235 
#in genewise_pways_oncokb_862.txt lists the second hit for a reaction in which AKT1 participates; there are several
#multiple hits for reactions in which AKT1 participates - 204, 235, 240, 263, 286, 291, 294, 311,
#318, 325, 520, 727, 834; 
#likewise, line 1880 in t1 has NF==1; line 1880 in genewise_pways_oncokb_862.txt lists a second hit for a reaction in 
#which ATM participates; 
#lines 3392, 3393, 3394 each have NF==1; they list 3 hits for a reaction in which BRAF participates; the reaction is 
#given in line 3391; likewise, lines 3397, 3398, 3399 list 3 hits for a reaction for BRAF given in line 3396; 
#likewise, lines 3418, 3419, 3420 list 3 hits for a BRAF reaction given in 3417; and lines 3423, 3424, 3425 list 3 
#hits for a BRAF reaction given in 3422;


#command below processes the file, genewise_pways_oncokb_862.txt, in one shot; first part of above 
#command included;
#1st line removes the 278 instances of reaction id pairs for which a hit was NOT found in the hierarchy files;
#2nd line takes care of instances where more than one hit is pulled out for a reaction in which a gene participates; 
#it introduces the reaction ids for each additional hit pulled out for a reaction;
#3rd line replaces "|", "\t" and "," with "   "; this makes the separator the same for all cols in input file; 
#4th line prints the cols in the desired order; i.e., i) pathway col (which lists the several reactome Ids for the 
#complete hierarchy of the rn in which the gene participates; this "col" is the main col for the matrix 
#generating program); ii) the reaction in which the gene participates, identified by a cypher query for the gene 
#(given as a pair of reactome Ids in parentheses), and, iii) again, the complete hierarchy for the reaction in which 
#the gene participates (but giving reactome Ids AS WELL AS NAMES of all subpways and the specific reaction in
#which the gene participates); the last sed command replaces 3 spaces by 2 spaces; it ensures that the 
#separator between all pairs of cols is two spaces and not 3; 

awk -F"\t" '!(($1 ~ /\|/) && ($2 ~ /^$/)){print}' genewise_pways_oncokb_862.txt | \
awk -F"\t" '{IFS=OFS="\t"}{if($1 ~ /_Identifier/){print $0} if($1 ~ /^$/){print $0} if((NF == 2)&&($1~/\|/)) {print $0; reactnname = $1} if(NF==1) {print reactnname, $0}}' | \
sed 's/|/   /' | sed 's/\t/   /' | sed 's/\([[:digit:]]\)\(,\)/\1   /g' | sed 's/,R-HSA-/   R-HSA-/g' | \
awk -F"   " '{for (i=1; i<=NF; i++) {if ($i ~ /_Identifier/){print}  if((i>=3) && ($i ~ /R-HSA-/)) {printf $i "  "}}} {for (i=1; i<=2; i++){if ((i==1)&&($i ~ /R-HSA-/)){printf "(" $i "  "} if ((i==2)&&($i ~ /R-HSA-/)){printf $i ")  "}}}  {for (i=3; i<=NF; i++) {printf $i "  "} print ""}' | sed 's/   /  /g' > ty 
#right parenthesis was missing for: R-HSA-76002  R-HSA-109582 in ty; this has been rectified;

#using the sort command to sort only the first or "pathway" col; this "col", however, includes the whole 
#hierarchy of a pathway; thus, sort on "pathway col", but let all details of the pathway remain on the line; 
#in the matrix, the whole line will appear in the first col, as the name of the pathway;

#sort -t allows sorting with a field separator; sort -uk1,1 removes duplicate lines based on the first field; 
grep -v ^$ ty | grep -v "_Identifier" | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | sort -t"|" -k1,1 > t1
grep -v ^$ ty | grep -v "_Identifier" | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | sort -t"|" -uk1,1 > t2

wc -l t1 t2
  105559 t1
    7359 t2

#thus, t1 and t2, above, seem to be ok; 

#to strip the extra first "col" (i.e., the extra complete pway hierarchy col used for sorting), 
#use foll cmd; 
#found that it is not enough to strip the first "col"; it is necessary also to strip the
#col with the pair of Ids in brackets (the id pair returned by the cypher query which identifies 
#reactions in which a gene participates), which is used to identify the complete hierarchy ids;
awk -F"\\|  " '{print $2}' t2 | sed 's/  (R-HSA-\([[:digit:]]\{3,\}\)  R-HSA-\([[:digit:]]\{3,\}\))  /  |  /'

#creating the all pways file; 
grep -v ^$ ty | grep -v "_Identifier" | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | sort -t"|" -uk1,1 | awk -F"\\|  " '{print $2}' | sed 's/  (R-HSA-\([[:digit:]]\{3,\}\)  R-HSA-\([[:digit:]]\{3,\}\))  /  |  /' | sed 's/  / /g' > all.txt

#use foll cmd if you want to only retain full hierarchy;
grep -v ^$ ty | grep -v "_Identifier" | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | sort -t"|" -uk1,1 | awk -F"\\|  " '{print $2}' | sed 's/  (R-HSA-\([[:digit:]]\{3,\}\)  R-HSA-\([[:digit:]]\{3,\}\))  /  |  /' | sed 's/  / /g' | awk -F" \\| " '{print $2}' > all2.txt

#creating the genewise file;
grep -v ^$ ty | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | awk -F"\\|  " '{print $2}' | sed 's/  (R-HSA-\([[:digit:]]\{3,\}\)  R-HSA-\([[:digit:]]\{3,\}\))  /  |  /' | sed 's/  / /g' > genepways.txt

#use foll cmd if you want to only retain full hierarchy;
grep -v ^$ ty | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | awk -F"\\|  " '{print $2}' | sed 's/  (R-HSA-\([[:digit:]]\{3,\}\)  R-HSA-\([[:digit:]]\{3,\}\))  /  |  /' | sed 's/  / /g' | awk -F" \\| " '{if ( $1 ~ /_Identifier/ ) {print} else {print $2}}' > genepways2.txt


#copying the matrix generating perl program to: 
#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix
cp /scratch/prasannalab/pway_luad/matrixofpways_onwhich_drigenes_converge.pl /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/matrixofpways_onwhich_oncokb_blairmel_genes_converge.pl

perl matrixofpways_onwhich_oncokb_blairmel_genes_converge.pl all2.txt genepways2.txt mmtx2.out

awk -F"   " '(NR>1){print $NF}' mmtx2.out | sort -g

awk -F"   " '($NF==12)' mmtx2.out

awk -F"   " '(NR==1){print} ($NF==43){print}' mmtx2.out

#checked genepways2.txt and ty;
R-HSA-162582 Signal Transduction R-HSA-9006925 Intracellular signaling by second messengers R-HSA-1257604 PIP3 activates AKT signaling R-HSA-2316434 PI3K phosphorylates PIP2 to PIP3
#in genepways2.txt, the above line occurs thrice for EGFR; the EGFR pway lines extend from 
#4281 to 5052; the above line occurs thrice, at: 4370, 4408, 4919; 
#in the file ty, the EGFR lines extend from 8383 to 9918; the above line (after adding 
#extra spaces between columns) occurs thrice, at: 8561, 8634, 9653; examining the 3 lines in the 
#ty files shows that the pway hierarchy is the same in all 3 lines, but the reaction has been 
#pulled out thrice by the cypher query, with different Ids, which are (LHS, in parentheses): 
#(R-HSA-1257604  R-HSA-2316434)    R-HSA-162582  R-HSA-9006925  R-HSA-1257604  R-HSA-2316434
#(R-HSA-162582  R-HSA-2316434)     R-HSA-162582  R-HSA-9006925  R-HSA-1257604  R-HSA-2316434
#(R-HSA-9006925  R-HSA-2316434)    R-HSA-162582  R-HSA-9006925  R-HSA-1257604  R-HSA-2316434
#all the above reaction Ids (LHS) have the same complete pathway hierarchy (RHS), given in the 
#above line; hence the above line is pulled out thrice, once for each reaction id;

--------------------------------------------------------------------

#Repeating the above exercise to obtain the matrix for the set of 324 blair_mel genes;

#Next, made a copy of 387_blair_mel_outfile.txt in pwd; 
#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix
cp /scratch/prasannalab/cancers_in_detail/pway_anal/396blairmelpways/387_blair_mel_outfile.txt outfile_blair_mel_324.txt

cp outfile_blair_mel_324.txt temp.txt
vi temp.txt
#:1,$s/^"//
#:1,$s/"$//
#:1,$s/", "/, /g
#:wq

#", " cannot be used as Field Separator, because sometimes the text (reaction name) may contain a ", ";
#hence, replacing ", R-HSA-..." by "\tR-HSA-...", so that if there is a ", " in the text, 
#the wrong col is not taken; also replacing "R-HSA-..., " with "R-HSA-...\t";  
#replacing 3 or more digits followed by a , with a \t;
sed 's/\(, \)\(R-HSA-\)/\t\2/g' temp.txt | sed 's/\([[:digit:]]\{3,\}\)\(, \)/\1\t/g' | \
sed 's/, Pathway, Reaction, ReactionName//g' | \
awk -F"\t" '{if ($1 ~ /_Identifier/){print $1} else {print $1 "|" $3}}' > prep_genewise_pways_blair_mel_324.sh

#edited the file prep_genewise_pways_blair_mel_324.sh
vi prep_genewise_pways_blair_mel_324.sh
#:1,$s/^/echo -n -e "/
#:1,$s/$/\\t" ; grep "\\b/
#:1,$s/^M//g
#:wq

sed '1,$s/"//' outfile_blair_mel_324.txt | sed '1,$s/", "/\t/g' | sed '1,$s/, Pathway, Reaction, ReactionName/\\b" rns_in_28_superpways_hierarchy.txt/' | awk -F"\t" '($1 ~ /_Identifier/){print $0} ($1 ~ /^R-HSA-/){print $1 "\\b.*\\b" $3 "\\b\" rns_in_28_superpways_hierarchy.txt"}' > col1.txt

#for some reason, 
 (ctrl+v+m) characters are introduced in col1.txt, next to genename header lines; 
#have to delete the 
 characters; 
vi col1.txt
#:1,$s/
//g
paste -d" " prep_genewise_pways_blair_mel_324.sh col1.txt > junk

vi junk
#:1,$s/$/ ; echo "" ;/
#:1,$s/\\b R-HSA-/\\bR-HSA-/g
#:1,$s/"\\b /"\\b/g
#:wq

cp junk prep_genewise_pways_blair_mel_324.sh

rm col1.txt junk temp.txt


##foll has already been done in line 137 above; no need to do anything here;
##removed all " (quotation marks) from rns_in_28_superpways_hierarchy.txt; the marks were making
##their way into genewise_pways_oncokb_862.5x5
##vi rns_in_28_superpways_hierarchy.txt
##:1,$s/"//g


#it took about 1 min real time to run foll sh file; output file is of size 3.3M; 
sh prep_genewise_pways_blair_mel_324.sh > genewise_pways_blair_mel_324.txt 

#the foll command shows that there are 32 instances when a pair of reaction ids in 
#prep_genewise_pways_blair_mel_324.sh is NOT FOUND in rns_in_28_superpways_hierarchy.txt; 
#thus, the cypher query for reactions in which a gene participates has pulled the pair 
#out, but the id pair is not found in the complete pway hierarchy files; not sure why the 
#pairs are not found in the hierarchy files; there are 16 unique ids for the first reaction 
#id; all of them are found in oncokb_gene_rns_278_not_found_in_reactome.txt; there are 4 
#unique ids for the second reaction id; 2 of them are NOT FOUND in 
#oncokb_gene_rns_278_not_found_in_reactome.txt (R-HSA-111966, R-HSA-111970); the other two
#are found in the oncokb-278 file; upon sorting, all 32 reaction id pairs in the file are 
#found to be unique; as there is nothing I can do to make the pairs appear in the hierarchy 
#files, decided to leave out these 32 instances (of reaction id pairs) from 
#genewise_pways_blair_mel_324.txt; 
#checking some of the pairs in reactome pathway browser showed that the first id is often 
#found in the browser; however, no information is found for the second id; maybe, the reactions
#are not catalogued in reactome; 

awk -F"\t" '(($1 ~ /\|/) && ($2 ~ /^$/)){print $1, $2}' genewise_pways_blair_mel_324.txt > blair_mel_gene_rns_32_not_found_in_reactome.txt
wc -l blair_mel_gene_rns_32_not_found_in_reactome.txt
32   #32 pairs of reaction ids are not found in rns_in_28_superpways_hierarchy.txt
#e.g., 
# R-HSA-418594|R-HSA-111970
# R-HSA-418594|R-HSA-111966
# R-HSA-166166|R-HSA-198746
# R-HSA-166166|R-HSA-199895
awk -F"\t" '!(($1 ~ /\|/) && ($2 ~ /^$/)){print}' genewise_pways_blair_mel_324.txt | grep -v ^$ | wc -l 
# 13129
grep -v ^$ genewise_pways_blair_mel_324.txt | wc -l
# 13161
# 13161-13129 = 32

#counting number of cols in output file, genewise_pways_blair_mel_324.txt; continuing above command
#but did not remove blank lines (i.e., no: grep -v ^$);
awk -F"\t" '!(($1 ~ /\|/) && ($2 ~ /^$/)){print}' genewise_pways_blair_mel_324.txt | awk -F"\t" '{print NF}' > t1
#t1 shows that those lines in genewise_pways_blair_mel_324.txt for which NF==1 are the ones where more than one
#hits have been pulled out for a reaction; e.g., in t1, line 245 has NF==1; line 245 in genewise_pways_blair_mel_324.txt
#lists the second hit for a reaction in which AHCY participates; line 673 in t1 has NF==1; line 673 
#in genewise_pways_blair_mel_324.txt lists the second hit for a reaction in which APOA1 participates; there are several
#multiple hits for reactions in which APOA1 participates - 850, 853, 856, 859, 862, 865, 868, 871,
#874; likewise, for APOB, there is a multiple hit at 1162; for HBA2 at 10012; for RPS6KA3 at 20907, for HBA1 at 25546; 
#lines 6924, 6925, 6926 each have NF==1; they list 3 hits for a reaction in which F8 participates; the reaction is 
#given in line 6923; likewise, lines 11278, 11279, 11280 list 3 hits for a reaction for IL2RG given in line 11277; 
#likewise, lines 11930, 11931, 11932 list 3 hits for a ITPR1 reaction given in 11929; and lines 11960, 11961, 11962 list 3 
#hits for a ITPR1 reaction given in 11959;


#command below processes the file, genewise_pways_blair_mel_324.txt, in one shot; first part of above 
#command included;
#1st line removes the 32 instances of reaction id pairs for which a hit was NOT found in the hierarchy files;
#2nd line takes care of instances where more than one hit is pulled out for a reaction in which a gene participates; 
#it introduces the reaction ids for each additional hit pulled out for a reaction;
#3rd line replaces "|", "\t" and "," with "   "; this makes the separator the same for all cols in input file; 
#4th line prints the cols in the desired order; i.e., i) pathway col (which lists the several reactome Ids for the 
#complete hierarchy of the rn in which the gene participates; this "col" is the main col for the matrix 
#generating program) [###note added later: eventually, below, the complete pway hierarchy was used in the matrix 
#generating program, not this col]; ii) the reaction in which the gene participates, identified by a cypher query 
#for the gene (given as a pair of reactome Ids in parentheses) [###note added later: eventually, below, this col 
#was not used at all], and, iii) again, the complete hierarchy for the reaction in which the gene participates 
#(but giving reactome Ids AS WELL AS NAMES of all subpways and the specific reaction in which the gene 
#participates)[###note added later: eventually, below, this col was used in the matrix generating program]; 
#the last sed command replaces 3 spaces by 2 spaces; it ensures that the separator between all 
#pairs of cols is two spaces and not 3; 

awk -F"\t" '!(($1 ~ /\|/) && ($2 ~ /^$/)){print}' genewise_pways_blair_mel_324.txt | \
awk -F"\t" '{IFS=OFS="\t"}{if($1 ~ /_Identifier/){print $0} if($1 ~ /^$/){print $0} if((NF == 2)&&($1~/\|/)) {print $0; reactnname = $1} if(NF==1) {print reactnname, $0}}' | \
sed 's/|/   /' | sed 's/\t/   /' | sed 's/\([[:digit:]]\)\(,\)/\1   /g' | sed 's/,R-HSA-/   R-HSA-/g' | \
awk -F"   " '{for (i=1; i<=NF; i++) {if ($i ~ /_Identifier/){print}  if((i>=3) && ($i ~ /R-HSA-/)) {printf $i "  "}}} {for (i=1; i<=2; i++){if ((i==1)&&($i ~ /R-HSA-/)){printf "(" $i "  "} if ((i==2)&&($i ~ /R-HSA-/)){printf $i ")  "}}}  {for (i=3; i<=NF; i++) {printf $i "  "} print ""}' | sed 's/   /  /g' > tybm 

#using the sort command to sort only the first or "pathway" col; this "col", however, includes the whole 
#hierarchy of a pathway; thus, sort on "pathway col", but let all details of the pathway remain on the line; 
#in the matrix, the whole line will appear in the first col, as the name of the pathway;

#sort -t allows sorting with a field separator; sort -uk1,1 removes duplicate lines based on the first field; 
grep -v ^$ tybm | grep -v "_Identifier" | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | sort -t"|" -k1,1 > t1
grep -v ^$ tybm | grep -v "_Identifier" | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | sort -t"|" -uk1,1 > t2

wc -l t1 t2
  12805 t1
   1937 t2

#thus, t1 and t2, above, seem to be ok; 

#to strip the extra first "col" (i.e., the extra complete pway hierarchy col used for sorting), 
#use foll cmd; 
#found that it is not enough to strip the first "col"; it is necessary also to strip the col 
#with the pair of Ids in brackets (the id pair returned by the cypher query which identifies 
#reactions in which a gene participates), which is used to identify the complete hierarchy ids;

###note added later: eventually, below, only the complete pway hierarchy, along with reaction names, 
###was used in the matrix-generation program; (an explanation may be found below (titled: 
###"checked genepways2.txt and ty;"), but wrt to genepways2.txt and ty files generated for the 
###oncokb set of genes); 

###the cypher query outfile for all 862 or 324 genes (outfile_oncokb_862.txt or outfile_blair_mel_324.txt), 
###with pairs of ids for each reaction in which a gene participates, is used to create a prep file;
###the prep file searches for the each pair of ids for a gene in the rns_in_28_superpways_hierarchy.txt 
###file; the prep file creates the genewise_pways_blair_mel_324.txt (or genewise_pways_oncokb_862.txt)  
###file; in this file, the reaction id-pair, as well as the entire hierarchy for pways containing the 
###reaction id-pair are listed; this file is gradually transformed to a form suitable for the matrix
###generation program; in the intermediate transformed form, the file contains all information: 
###i) all reactome ids for the entire hierarchy of each reaction, ii) the reaction id-pair, in parentheses, 
###used to pull out the entire pway hierarchy, and iii) the entire pway hierarchy along with reaction names; 
###the first col alone (with the help of a delimiter) is used for sorting the file, followed by uniq; 
###however, two different reaction id pairs-may have the same hierarchy; as a result, upon sort 
###and uniq wrt complete hierarchy reactome ids (i.e., col 1), some of the reaction id-pairs are 
###eliminated (because they have the same hierarchy); now, suppose that this intermediate file is 
###used as the all pways file; the genewise file will be in similar format; however, when the 
###genewise reactions are searched for in this all pways file, some of the reaction id-pairs will 
###not be found because the pairs have been removed during sort and uniq based on hierachy reactome 
###id col; hence decided to strip the all pways and gene wise files of the reaction id-pair cols; 
###next, to make the first col in matrix short, stripped the hierarchy reactome ids-only col; thus,
###left with only the complete hierarchy col, along with reaction names; thus, both the all pways
###file, and the genewise file have only the complete hierarchy with reaction names; each genewise
###rn hierarchy is searched for in the all pways file;  
 

awk -F"\\|  " '{print $2}' t2 | sed 's/  (R-HSA-\([[:digit:]]\{3,\}\)  R-HSA-\([[:digit:]]\{3,\}\))  /  |  /'

#creating the all pways file, with complete-hierarchy-as-reactome ids-col AND complete-hierarchy-
#with-ids-and-reaction-names; no reaction-in-parentheses col;
#grep -v ^$ tybm | grep -v "_Identifier" | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | sort -t"|" -uk1,1 | awk -F"\\|  " '{print $2}' | sed 's/  (R-HSA-\([[:digit:]]\{3,\}\)  R-HSA-\([[:digit:]]\{3,\}\))  /  |  /' | sed 's/  / /g' | more

#use foll cmd if you want to ONLY retain FULL HIERARCHY WITH REACTION NAMES;
grep -v ^$ tybm | grep -v "_Identifier" | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | sort -t"|" -uk1,1 | awk -F"\\|  " '{print $2}' | sed 's/  (R-HSA-\([[:digit:]]\{3,\}\)  R-HSA-\([[:digit:]]\{3,\}\))  /  |  /' | sed 's/  / /g' | awk -F" \\| " '{print $2}' > all2bm.txt

#creating the genewise file;
#grep -v ^$ tybm | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | awk -F"\\|  " '{print $2}' | sed 's/  (R-HSA-\([[:digit:]]\{3,\}\)  R-HSA-\([[:digit:]]\{3,\}\))  /  |  /' | sed 's/  / /g' | more

#use foll cmd if you want to ONLY retain FULL HIERARCHY	WITH REACTION NAMES;
grep -v ^$ tybm | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | awk -F"\\|  " '{print $2}' | sed 's/  (R-HSA-\([[:digit:]]\{3,\}\)  R-HSA-\([[:digit:]]\{3,\}\))  /  |  /' | sed 's/  / /g' | awk -F" \\| " '{if ( $1 ~ /_Identifier/ ) {print} else {print $2}}' > genepways2bm.txt


#matrix generation for blair_mel genes;
#copying the matrix generating perl program to: 
#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix
#cp /scratch/prasannalab/pway_luad/matrixofpways_onwhich_drigenes_converge.pl /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/matrixofpways_onwhich_oncokb_blairmel_genes_converge.pl

perl matrixofpways_onwhich_oncokb_blairmel_genes_converge.pl all2bm.txt genepways2bm.txt mmtx2bm.out

awk -F"   " '(NR>1){print $NF}' mmtx2bm.out | sort -g

awk -F"   " '($NF==12)' mmtx2bm.out

awk -F"   " '(NR==1){print} ($NF==43){print}' mmtx2bm.out


#checked genepways2.txt and ty;
R-HSA-162582 Signal Transduction R-HSA-9006925 Intracellular signaling by second messengers R-HSA-1257604 PIP3 activates AKT signaling R-HSA-2316434 PI3K phosphorylates PIP2 to PIP3
#in genepways2.txt, the above line occurs thrice for EGFR; the EGFR pway lines extend from 
#4281 to 5052; the above line occurs thrice, at: 4370, 4408, 4919; 
#in the file ty, the EGFR lines extend from 8383 to 9918; the above line (after adding 
#extra spaces between columns) occurs thrice, at: 8561, 8634, 9653; examining the 3 lines in the 
#ty files shows that the pway hierarchy is the same in all 3 lines, but the reaction has been 
#pulled out thrice by the cypher query, with different Ids, which are (LHS, in parentheses): 
#(R-HSA-1257604  R-HSA-2316434)    R-HSA-162582  R-HSA-9006925  R-HSA-1257604  R-HSA-2316434
#(R-HSA-162582  R-HSA-2316434)     R-HSA-162582  R-HSA-9006925  R-HSA-1257604  R-HSA-2316434
#(R-HSA-9006925  R-HSA-2316434)    R-HSA-162582  R-HSA-9006925  R-HSA-1257604  R-HSA-2316434
#all the above reaction Ids (LHS) have the same complete pathway hierarchy (RHS), given in the 
#above line; hence the above line is pulled out thrice, once for each reaction id;

--------------------------------------------------------------------

#Generating a SINGLE MATRIX consisting of 862 oncokb and 324 blair_mel genes; 
#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix

#Merging the 2 outfiles, outfile_oncokb_862.txt and outfile_blair_mel_324.txt, to get the 
#complete set of reactions in which 1186 genes participate;  
#(862 oncokb + 324 blair_mel = 1186 genes); 
cat outfile_oncokb_862.txt outfile_blair_mel_324.txt > outfile_oncokb_blair_mel_1186.txt

cp outfile_oncokb_blair_mel_1186.txt temp.txt
vi temp.txt
#:1,$s/^"//
#:1,$s/"$//
#:1,$s/", "/, /g
#:1,$s/\\"Activator\\"/Activator/g
#:wq

#", " cannot be used as Field Separator, because sometimes the text (reaction name) may contain a ", ";
#hence, replacing ", R-HSA-..." by "\tR-HSA-...", so that if there is a ", " in the text, 
#the wrong col is not taken; also replacing "R-HSA-..., " with "R-HSA-...\t";  
#replacing 3 or more digits followed by a , with a \t;
sed 's/\(, \)\(R-HSA-\)/\t\2/g' temp.txt | sed 's/\([[:digit:]]\{3,\}\)\(, \)/\1\t/g' | \
sed 's/, Pathway, Reaction, ReactionName//g' | \
awk -F"\t" '{if ($1 ~ /_Identifier/){print $1} else {print $1 "|" $3}}' > prep_genewise_pways_oncokb_blair_mel_1186.sh

#edited the file prep_genewise_pways_oncokb_blair_mel_1186.sh
vi prep_genewise_pways_oncokb_blair_mel_1186.sh
#:1,$s/^/echo -n -e "/
#:1,$s/$/\\t" ; grep "\\b/
#:1,$s/^M//g
#:wq

sed '1,$s/"//' outfile_oncokb_blair_mel_1186.txt | sed '1,$s/", "/\t/g' | sed '1,$s/, Pathway, Reaction, ReactionName/\\b" rns_in_28_superpways_hierarchy.txt/' | awk -F"\t" '($1 ~ /_Identifier/){print $0} ($1 ~ /^R-HSA-/){print $1 "\\b.*\\b" $3 "\\b\" rns_in_28_superpways_hierarchy.txt"}' > col1.txt

#for some reason, 
 (ctrl+v+m) characters are introduced in col1.txt, next to genename header lines; 
#have to delete the 
 characters; 
vi col1.txt
#:1,$s/
//g
#:wq
paste -d" " prep_genewise_pways_oncokb_blair_mel_1186.sh col1.txt > junk

vi junk
#:1,$s/$/ ; echo "" ;/
#:1,$s/\\b R-HSA-/\\bR-HSA-/g
#:1,$s/"\\b /"\\b/g
#:wq

cp junk prep_genewise_pways_oncokb_blair_mel_1186.sh

rm col1.txt junk temp.txt


##foll has already been done in line 137 above; no need to do anything here;
##removed all " (quotation marks) from rns_in_28_superpways_hierarchy.txt; the marks were making
##their way into genewise_pways_oncokb_862.5x5
##vi rns_in_28_superpways_hierarchy.txt
##:1,$s/"//g


#it took about 9 min real time to run foll sh file; output file is of size 34M; 
sh prep_genewise_pways_oncokb_blair_mel_1186.sh > genewise_pways_oncokb_blair_mel_1186.txt 

#the foll command shows that there are 310 instances when a pair of reaction ids in 
#prep_genewise_pways_oncokb_blair_mel_1186.sh is NOT FOUND in rns_in_28_superpways_hierarchy.txt; 
#thus, the cypher query for reactions in which a gene participates has pulled the pair 
#out, but the id pair is not found in the complete pway hierarchy files; not sure why the 
#pairs are not found in the hierarchy files; 
#as there is nothing I can do to make the pairs appear in the hierarchy 
#files, decided to leave out these 310 instances (of reaction id pairs) from 
#genewise_pways_oncokb_blair_mel_1186.txt; 

awk -F"\t" '(($1 ~ /\|/) && ($2 ~ /^$/)){print $1, $2}' genewise_pways_oncokb_blair_mel_1186.txt > oncokb_blair_mel_gene_rns_310_not_found_in_reactome.txt
wc -l oncokb_blair_mel_gene_rns_310_not_found_in_reactome.txt
310   #310 pairs of reaction ids are not found in rns_in_28_superpways_hierarchy.txt
# 310 is an exact sum of:
# 278 pairs from oncokb_gene_rns_278_not_found_in_reactome.txt 
# + 32 pairs from blair_mel_gene_rns_32_not_found_in_reactome.txt 
# = 310 oncokb_blair_mel_gene_rns_310_not_found_in_reactome.txt
#the foll commands confirm the above; 
diff --side-by-side oncokb_gene_rns_278_not_found_in_reactome.txt oncokb_blair_mel_gene_rns_310_not_found_in_reactome.txt
diff --side-by-side blair_mel_gene_rns_32_not_found_in_reactome.txt oncokb_blair_mel_gene_rns_310_not_found_in_reactome.txt

awk -F"\t" '!(($1 ~ /\|/) && ($2 ~ /^$/)){print}' genewise_pways_oncokb_blair_mel_1186.txt | grep -v ^$ | wc -l 
# 119550

grep -v ^$ genewise_pways_oncokb_blair_mel_1186.txt | wc -l
# 119860
# 119860 - 119550 = 310

#counting number of cols in output file, genewise_pways_oncokb_blair_mel_1186.txt; continuing above command
#but did not remove blank lines (i.e., no: grep -v ^$);
awk -F"\t" '!(($1 ~ /\|/) && ($2 ~ /^$/)){print}' genewise_pways_oncokb_blair_mel_1186.txt | awk -F"\t" '{print NF}' > t1
#t1 shows that those lines in genewise_pways_oncokb_blair_mel_1186.txt for which NF==1 are the ones where more than one
#hits have been pulled out for a reaction; 


#command below processes the file, genewise_pways_oncokb_blair_mel_324.txt, in one shot; first part of above 
#command included;
#1st line removes the 310 instances of reaction id pairs for which a hit was NOT found in the hierarchy files;
#2nd line takes care of instances where more than one hit is pulled out for a reaction in which a gene participates; 
#it introduces the reaction ids for each additional hit pulled out for a reaction;
#3rd line replaces "|", "\t" and "," with "   "; this makes the separator the same for all cols in input file; 
#4th line prints the cols in the desired order; i.e., i) pathway col (which lists the several reactome Ids for the 
#complete hierarchy of the rn in which the gene participates; this "col" is the main col for the matrix 
#generating program) [###note added later: eventually, below, the complete pway hierarchy was used in the matrix 
#generating program, not this col]; ii) the reaction in which the gene participates, identified by a cypher query 
#for the gene (given as a pair of reactome Ids in parentheses) [###note added later: eventually, below, this col 
#was not used at all], and, iii) again, the complete hierarchy for the reaction in which the gene participates 
#(but giving reactome Ids AS WELL AS NAMES of all subpways and the specific reaction in which the gene 
#participates)[###note added later: eventually, below, this col was used in the matrix generating program]; 
#the last sed command replaces 3 spaces by 2 spaces; it ensures that the separator between all 
#pairs of cols is two spaces and not 3; 

awk -F"\t" '!(($1 ~ /\|/) && ($2 ~ /^$/)){print}' genewise_pways_oncokb_blair_mel_1186.txt | \
awk -F"\t" '{IFS=OFS="\t"}{if($1 ~ /_Identifier/){print $0} if($1 ~ /^$/){print $0} if((NF == 2)&&($1~/\|/)) {print $0; reactnname = $1} if(NF==1) {print reactnname, $0}}' | \
sed 's/|/   /' | sed 's/\t/   /' | sed 's/\([[:digit:]]\)\(,\)/\1   /g' | sed 's/,R-HSA-/   R-HSA-/g' | \
awk -F"   " '{for (i=1; i<=NF; i++) {if ($i ~ /_Identifier/){print}  if((i>=3) && ($i ~ /R-HSA-/)) {printf $i "  "}}} {for (i=1; i<=2; i++){if ((i==1)&&($i ~ /R-HSA-/)){printf "(" $i "  "} if ((i==2)&&($i ~ /R-HSA-/)){printf $i ")  "}}}  {for (i=3; i<=NF; i++) {printf $i "  "} print ""}' | sed 's/   /  /g' > intermediate_file_oncokb_blair_mel_1186.txt 

#using the sort command to sort only the first or "pathway" col; this "col", however, includes the whole 
#hierarchy of a pathway; thus, sort on "pathway col", but let all details of the pathway remain on the line; 
#in the matrix, the whole line will appear in the first col, as the name of the pathway;

#sort -t allows sorting with a field separator; sort -uk1,1 removes duplicate lines based on the first field; 
grep -v ^$ intermediate_file_oncokb_blair_mel_1186.txt | grep -v "_Identifier" | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | sort -t"|" -k1,1 > t1
grep -v ^$ intermediate_file_oncokb_blair_mel_1186.txt | grep -v "_Identifier" | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | sort -t"|" -uk1,1 > t2

wc -l t1 t2
# 118364 t1   from above, 105559 + 12805 = 118364 ; thus, counts reconciled;
#   8202 t2   from above,   7359 +  1937 =   9296 ; counts not reconciled; maybe because lines are 
#             common between oncokb and blair_mel t2 files; this was checked in the foll way; 
#created 3 files, based on the 2nd grep cmd above;
grep -v ^$ ty | grep -v "_Identifier" | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | sort -t"|" -uk1,1 | awk -F"|" '{print $1}' > t2onco
grep -v ^$ tybm | grep -v "_Identifier" | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | sort -t"|" -uk1,1 | awk -F"|" '{print $1}' > t2blair_mel
grep -v ^$ intermediate_file_oncokb_blair_mel_1186.txt | grep -v "_Identifier" | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | sort -t"|" -uk1,1 | awk -F"|" '{print $1}' > t2both
wc -l t2onco t2blair_mel t2both
#  7359 t2onco
#  1937 t2blair_mel
#  8202 t2both

diff --side-by-side --width=150 t2onco t2blair_mel | wc -l
# 7688
diff --side-by-side --suppress-common-lines --width=150 t2onco t2blair_mel | wc -l
# 6594   7688 - 6594 = 1094; i.e., 1094 common lines between t2onco and t2blair_mel;
wc -l t2onco t2blair_mel
# 7359 t2onco
# 1937 t2blair_mel
# 9296 total (total number of lines in t2onco + t2blair_mel)
# 9296 - 1094 (common lines bet t2onco, t2blair_mel) = 8202 (which is the number of lines in
#             the intermediate_file_oncokb_blair_mel_1186.txt, obtained after sort -u)

diff --side-by-side --width=150 t2both t2onco | wc -l
# 8202
diff --side-by-side --suppress-common-lines --width=150 t2both t2onco | wc -l
# 843   8202 - 843 = 7359 (the number of common lines between t2both and t2onco; it is also
#                          the number of lines in t2onco)                                   

diff --side-by-side --width=150 t2both t2blair_mel | wc -l
# 8202
diff --side-by-side --suppress-common-lines --width=150 t2both t2blair_mel | wc -l
# 6265  8202 - 6265 = 1937 (the number of common lines between t2both and t2blair_mel; it is also
#                           the number of lines in t2blair_mel)

#thus, t1 and t2, above, seem to be ok; 
#the number of reactions in all pways file = 8202 ;


#to strip the extra first "col" (i.e., the extra complete pway hierarchy col used for sorting), 
#use foll cmd; 
#found that it is not enough to strip the first "col"; it is necessary also to strip the col 
#with the pair of Ids in brackets (the id pair returned by the cypher query which identifies 
#reactions in which a gene participates), which is used to identify the complete hierarchy ids;

###note added later: eventually, below, only the complete pway hierarchy, along with reaction names, 
###was used in the matrix-generation program; 

#stripping away col giving reaction id-pair in parentheses;
#awk -F"\\|  " '{print $2}' t2 | sed 's/  (R-HSA-\([[:digit:]]\{3,\}\)  R-HSA-\([[:digit:]]\{3,\}\))  /  |  /'

#creating the all pways file, with complete-hierarchy-as-reactome ids-col AND complete-hierarchy-
#with-ids-and-reaction-names; no reaction id-in-parentheses col;
#grep -v ^$ intermediate_file_oncokb_blair_mel_1186.txt | grep -v "_Identifier" | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | sort -t"|" -uk1,1 | awk -F"\\|  " '{print $2}' | sed 's/  (R-HSA-\([[:digit:]]\{3,\}\)  R-HSA-\([[:digit:]]\{3,\}\))  /  |  /' | sed 's/  / /g' | more

#use foll cmd if you want to ONLY retain FULL HIERARCHY WITH REACTION NAMES; 
#this is the cmd to obtain the all-pways input file; 
grep -v ^$ intermediate_file_oncokb_blair_mel_1186.txt | grep -v "_Identifier" | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | sort -t"|" -uk1,1 | awk -F"\\|  " '{print $2}' | sed 's/  (R-HSA-\([[:digit:]]\{3,\}\)  R-HSA-\([[:digit:]]\{3,\}\))  /  |  /' | sed 's/  / /g' | awk -F" \\| " '{print $2}' > all_reactions_for_1186_oncokb_blairmel_genes.txt
wc -l all_reactions_for_1186_oncokb_blairmel_genes.txt
# 8202  there are 8202 reactions in the all pathways file; 

#creating the genewise file;
#grep -v ^$ intermediate_file_oncokb_blair_mel_1186.txt | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | awk -F"\\|  " '{print $2}' | sed 's/  (R-HSA-\([[:digit:]]\{3,\}\)  R-HSA-\([[:digit:]]\{3,\}\))  /  |  /' | sed 's/  / /g' | more

#use foll cmd if you want to ONLY retain FULL HIERARCHY	WITH REACTION NAMES;
#this is the cmd to obtain the gene-wise-pways input file; 
grep -v ^$ intermediate_file_oncokb_blair_mel_1186.txt | awk -F"  \\(" '{print $1 "|  " $0}' | sed 's/   /  /g' | awk -F"\\|  " '{print $2}' | sed 's/  (R-HSA-\([[:digit:]]\{3,\}\)  R-HSA-\([[:digit:]]\{3,\}\))  /  |  /' | sed 's/  / /g' | awk -F" \\| " '{if ( $1 ~ /_Identifier/ ) {print} else {print $2}}' > genewise_reactions_for_1186_oncokb_blairmel_genes.txt


#matrix generation for blair_mel genes;
#copying the matrix generating perl program to: 
#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix
#cp /scratch/prasannalab/pway_luad/matrixofpways_onwhich_drigenes_converge.pl /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/matrixofreactions_onwhich_oncokb_blairmel_genes_converge.pl

#It took 7 mins real time for the program to go through; output file size = 40M
perl matrixofreactions_onwhich_oncokb_blairmel_genes_converge.pl all_reactions_for_1186_oncokb_blairmel_genes.txt genewise_reactions_for_1186_oncokb_blairmel_genes.txt reactionsonwhich_genes_converge.out

awk -F"   " '(NR>1){print $NF}' reactionsonwhich_genes_converge.out | sort -g | uniq -c
   3157 1
   1828 2
   1050 3
    575 4
    394 5
    299 6
    144 7
    123 8
     74 9
     73 10  #there are 73 instances where 10 genes converge on one reaction
     88 11
     57 12
     39 13
     43 14
     41 15
     17 16
     26 17
     11 18
     10 20
     10 21
     23 22
     22 23
     15 24
     23 25
      7 26
      7 27
     14 28  #there are 14 instances where 28 genes converge on one reaction
      5 29
      2 30
      3 31
      9 32
      6 33
      2 34
      1 36
      1 42
      1 44
      2 45


awk -F"   " '(NR==1){print} ($NF==36){print}' reactionsonwhich_genes_converge.out

vi reactionsonwhich_genes_converge.out
:1,1s/_Identifier//g
:1,1s/        /\t/
:1,1s/  /\t/g
:2,$s/    /   /
:2,$s/   /\t/g
:wq

#Did manual checking to see if the pathway hierarchy is identified in the correct genes;
#created foll temporary file and did checking; considered first pway hierarchy; used vi "w" 
#cmd to count posn of "+" in the hierarchy line, and to identify the gene at that position 
#in the first line; the matrix seems to be correct;
awk -F"   " '(NR==1){print} ($NF==36){print}' reactionsonwhich_genes_converge.out > junk

#A reaction hierarchy is picked several times for a gene; however, in the matrix
#there is only a single "+" sign for the hierarchy, for a gene;

#Taking this matrix to windows to open in excel;
# i.e., taking /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/reactionsonwhich_genes_converge.out
# to E:\actrec_prasannalab_area\cancers_in_detail\pway_anal\reactionsonwhich_genes_converge.out

--------------------------------------------------

#writing queries which:
#i) for each gene, identify pathways in which the gene participates, 
#ii) for each pway, identifies genes which converge on it;
#iii) arrange pways into toplevel pways; e.g., immune system pways, metabolism pways, etc. 

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix

#making a small test matrix to get awk scripts running;  
#manually made a few '-' to '+';
#trying a few awk cmds;
#awk -F"\t" '{IFS=OFS="\t"}(NR<=11){for (i=1; i<=11; i++){printf $i OFS} print $NF ""}' reactionsonwhich_genes_converge.out > trialmtx.txt
#awk -F"\t" '{IFS=OFS="\t"}(NR==1){for (i=1; i<=NF; i++){genenm[i][NR]=$i;}} END {for(i in genenm) {printf genenm[i][1] OFS} print ""}' trialmtx.txt
#awk -F"\t" 'BEGIN{IFS=OFS="\t"; j=0;}{j++; rowcount[j]=NR;}{for (i=1; i<=NF; i++){genenm[i][rowcount[j]]=$i; printf genenm[i][rowcount[j]] OFS} print ""}' trialmtx.txt | more
#below, j is row index; i is col index; hence, in write after END, j first, i second;
#awk -F"\t" 'BEGIN{IFS=OFS="\t"; j=0;}{j++}{for (i=1; i<=NF; i++){mtx[i][j]=$i;}} END {for(k=1; k<=j; k++) {for(i=1; i<=NF; i++){printf mtx[i][k] OFS} print ""}}' trialmtx.txt


#foll works; the genes participating in each pway are listed, and the total of no. of genes
#converging on each pway is given;
#awk -F"\t" '{IFS=OFS="\t"}(NR==1){for (i=1; i<=NF; i++){genenm[i]=$i;}} \
#(NR>1) { for (i=1; i<=NF; i++) { if(i==1) {printf $1 OFS} if((i>1)&&($i~/+/)) {printf genenm[i] OFS}} print $NF ""}' trialmtx.txt 
#foll cmd is same as above but introduces ##OMIM## after the gene in the 6th col, 
#so that it is possible to differentiate which genes occur in col 6 or below of the matrix, 
#and which occur in col 7 or above; 
#awk -F"\t" '{IFS=OFS="\t"}(NR==1){for (i=1; i<=NF; i++){genenm[i]=$i;}} \
#(NR>1) { for (i=1; i<=NF; i++) { if(i==1) {printf $1 OFS} \
#if((i>1)&&($i~/+/)) {printf genenm[i] OFS} if(i==6){printf "##OMIM##" OFS}} print $NF ""}' trialmtx.txt

#foll works; the genes participating in each pway are listed, and the total of no. of genes
#converging on each pway is given;
#awk -F"\t" '{IFS=OFS="\t"}(NR==1){for (i=1; i<=NF; i++){genenm[i]=$i;}} \
#(NR>1) { for (i=1; i<=NF; i++) { if(i==1) {printf $1 OFS} if((i>1)&&($i~/+/)) {printf genenm[i] OFS}} print $NF ""}' reactionsonwhich_genes_converge.out 

#foll cmd is same as above but introduces ##OMIM## between the oncokb and blair_mel genes,
#so that it is possible to identify which genes are oncokb genes, and which are blair_mel genes; 
#also, it will be possible to identify if oncokb and blair_mel genes converge on same pway;
#oncokb genes end on col 863 (one extra col for pway name); blair_mel genes start on col 864;  
#863 cols on oncokb side; 325 cols on blair_mel side (extra col giving number of genes acting in pway);
awk -F"\t" '{IFS=OFS="\t"}(NR==1){for (i=1; i<=NF; i++){genenm[i]=$i;}} \
(NR>1) { for (i=1; i<=NF; i++) { if(i==1) {printf $1 OFS} \
if((i>1)&&($i~/+/)) {printf genenm[i] OFS} if(i==863){printf "##OMIM##" OFS}} print $NF ""}' \
reactionsonwhich_genes_converge.out > pway_converged_genes.txt
#random observation; 
#COL2A1 is an oncokb gene; COL2A2 is a blair_mel gene;

#foll cmd enables identification of pways on which both oncokb and omim genes converge;  
awk -F"\t" '{IFS=OFS="\t"}(NR==1){for (i=1; i<=NF; i++){genenm[i]=$i;}} \
(NR>1) { for (i=1; i<=NF; i++) { if(i==1) {printf $1 OFS} \
if((i>1)&&($i~/+/)) {printf genenm[i] OFS} if(i==863){printf "##OMIM##" OFS}} print $NF ""}' reactionsonwhich_genes_converge.out | \
awk -F"\t" '(($2 !~ /##OMIM##/) && ($(NF-1) !~ /##OMIM##/)) ' > pways_oncokb_and_omim_genes_converged.txt
wc -l pways_oncokb_and_omim_genes_converged.txt
1094

#to rearrange the cols of above output; so that genes are printed first, then pway;
#awk -F"\t" '{IFS=OFS="\t"}(NR==1){for (i=1; i<=NF; i++){genenm[i]=$i;}} \
#(NR>1) { for (i=1; i<=NF; i++) { if(i==1) {printf $1 OFS} \
#if((i>1)&&($i~/+/)) {printf genenm[i] OFS} if(i==863){printf "##OMIM##" OFS}} print $NF ""}' reactionsonwhich_genes_converge.out | \
#grep "Immune System" | awk -F"\t" '{last = $1; $1=""; print $0 "\t" last}'

#same as above, but with an extra 4th line, which pulls out oncokb AND blair_mel genes 
#converging on an immune system pway; 
awk -F"\t" '{IFS=OFS="\t"}(NR==1){for (i=1; i<=NF; i++){genenm[i]=$i;}} \
(NR>1) { for (i=1; i<=NF; i++) { if(i==1) {printf $1 OFS} \
if((i>1)&&($i~/+/)) {printf genenm[i] OFS} if(i==863){printf "##OMIM##" OFS}} print $NF ""}' reactionsonwhich_genes_converge.out | \
grep "Immune System" | awk -F"\t" '(($2 !~ /##OMIM##/) && ($(NF-1) !~ /##OMIM##/))' | \
awk -F"\t" '{last = $1; $1=""; print $0 "\t" last}' | more
#random observations; 
#in immune system, foll genes belong to oncokb and omim sets, resply : 
#JAK2 omim GH1
#JAK2 PTPN11 omim GH1
#JAK3 omim IL2RG
#JAK1 JAK3 IL7R STAT5B STAT5A omim IL2RG
#H3C2 H3C1 H3C10 H3C11 H3C12 H3C3 H3C4 H3C6 H3C7 H3C8 H3C13 H3C14 H3C15 omim RAG1 RAG2
#BIRC3 MAP3K14 TRAF2 TRAF3 LTB TNFRSF11A omim CD40LG
#JAK2 SOCS1 SOCS3 SOCS2 omim GH1 
#COL1A1 omim COL1A2 COL3A1
#B2M omim CD3D
#LCK omim CD3D
#FBXW7 SOCS1 VHL KEAP1 TRAF7 CUL3 FBXO11 PRKN ELOC RNF213 SOCS3 ZBTB16 CBLB FBXO31 WWP1 omim CUL7 TRIM32
#BTK CD79A CD79B SYK LYN PLCG2 SOS1 VAV1 omim BLNK IGHM
#IDH1 MAPK1 DDX3X HSP90AA1 HSP90AB1 PAFAH1B2 CANT1 YPEL5 omim AGL HBB IMPDH1 KRT1 PNP



#Identifying the pways in which each gene participates; 
#in foll cmd, first, gene name is listed, followed by a list of pways in which the gene participates;
#The "break" statement (last line below) jumps out of the innermost for, while, or do loop that encloses it. 
#awk -F"\t" 'BEGIN{IFS=OFS="\t"}(NR==1){for (i=1; i<=NF; i++){genenm[i]=$i;}} \
#(NR>1) {j++; for (i=1; i<=NF; i++) { pway_yesno_mtx[i][j]=$i;}} \
#END {for (i=1; i<=NF; i++) {print genenm[i]; for (k=1; k<=j; k++) \
#{for (l=1; l<=NF; l++){if ((l==i)&&(pway_yesno_mtx[l][k]~/^+$/)) {print pway_yesno_mtx[1][k]; break}}}}}' trialmtx.txt 

#awk -F"\t" 'BEGIN{IFS=OFS="\t"}(NR==1){for (i=1; i<=NF; i++){genenm[i]=$i;}} \
#(NR>1) {j++; for (i=1; i<=NF; i++) { pway_yesno_mtx[i][j]=$i;}} \
#END {for (i=1; i<=NF; i++) {print genenm[i]; for (k=1; k<=j; k++) \
#{for (l=1; l<=NF; l++){if ((l==i)&&(pway_yesno_mtx[l][k]~/^+$/)) {print pway_yesno_mtx[1][k]; break}}}}}' reactionsonwhich_genes_converge.out 

#in the foll cmd, gene name is given alongside each pway it participates in; i.e., gene pway 
#awk -F"\t" 'BEGIN{IFS=OFS="\t"}(NR==1){for (i=1; i<=NF; i++){genenm[i]=$i;}} \
#(NR>1) {j++; for (i=1; i<=NF; i++) { pway_yesno_mtx[i][j]=$i;}} \
#END {for (i=1; i<=NF; i++) { for (k=1; k<=j; k++) \
#{for (l=1; l<=NF; l++){if ((l==i)&&(pway_yesno_mtx[l][k]~/^+$/)) {print genenm[i] OFS pway_yesno_mtx[1][k]; break}}}}}' trialmtx.txt 

#in the foll cmd, gene name is given alongside each pway it participates in; i.e., gene pway;
awk -F"\t" 'BEGIN{IFS=OFS="\t"}(NR==1){for (i=1; i<=NF; i++){genenm[i]=$i;}} \
(NR>1) {j++; for (i=1; i<=NF; i++) { pway_yesno_mtx[i][j]=$i;}} \
END {for (i=1; i<=NF; i++) { for (k=1; k<=j; k++) \
{for (l=1; l<=NF; l++){if ((l==i)&&(pway_yesno_mtx[l][k]~/^+$/)) \
{print genenm[i] OFS pway_yesno_mtx[1][k]; break}}}}}' reactionsonwhich_genes_converge.out 


#in the foll cmd, gene name is given alongside each pway it participates in; i.e., gene, pway; 
#in addition, a line containing "##OMIM##" separates the pathway lines for the first 4 genes 
#(remember, first entry in gene line of trialmtx.txt is a tab), from the pathway lines for the 
#remaining 6 genes; 
#awk -F"\t" 'BEGIN{IFS=OFS="\t"}(NR==1){for (i=1; i<=NF; i++){genenm[i]=$i;}} \
#(NR>1) {j++; for (i=1; i<=NF; i++) { pway_yesno_mtx[i][j]=$i;}} \
#END {for (i=1; i<=NF; i++) { for (k=1; k<=j; k++) \
#{for (l=1; l<=NF; l++){if ((l==i)&&(pway_yesno_mtx[l][k]~/^+$/)) {print genenm[i] OFS pway_yesno_mtx[1][k]; break}}} if(i==5){print "##OMIM##"}}}' trialmtx.txt 

#in the foll cmd, gene name is given alongside each pway it participates in; i.e., gene, pway; 
#in addition, a line containing "##OMIM##" separates the set of lines for the oncokb genes (which
#end at col 863 in gene line, because first col in the line is a \t), from the set of lines for 
#the blair_mel genes; i.e., a line containing "##OMIM##" occurs between ZNF750 and ABCA1;  
#this cmd takes 20 mins real time to run, and produces a file which is 7M in size; 
awk -F"\t" 'BEGIN{IFS=OFS="\t"}(NR==1){for (i=1; i<=NF; i++){genenm[i]=$i;}} \
(NR>1) {j++; for (i=1; i<=NF; i++) { pway_yesno_mtx[i][j]=$i;}} \
END {for (i=1; i<=NF; i++) { for (k=1; k<=j; k++) \
{for (l=1; l<=NF; l++){if ((l==i)&&(pway_yesno_mtx[l][k]~/^+$/)) \
{print genenm[i] OFS pway_yesno_mtx[1][k]; break}}} if(i==863){print "##OMIM##"}}}' \
reactionsonwhich_genes_converge.out > pways_for_each_gene.txt

#random observation; JAK1, JAK2, JAK3, MYD88, MAP2K4, MAPK1, STAT3, SYK, STAT5B, IKBKB 
#participate in many immune system pways; 

#to get the set of genes for each superpway; 
grep "^R-HSA-9612973 Autophagy" pway_converged_genes.txt | wc -l
#72 (the 1186 genes act in 72 out of 108 autophagy pways)
#IMPORTANT cmd below; diff parts of it give diff useful outputs;
grep "^R-HSA-9612973 Autophagy" pway_converged_genes.txt | sed -e 's/R-HSA-9612973 Autophagy //' -e 's/##OMIM##\t//' | awk -F"\t" '{IFS=OFS="\t"}{for (i=2; i<NF; i++) {printf $i OFS} print ""}' | sed 's/\t/\n/g' | grep -v ^$ | sort | uniq -c | sort -rg

#created the foll cmd file manually;  
vi getting_toplevl_genes_from_pways_converged_genes.sh
sh getting_toplevl_genes_from_pways_converged_genes.sh > toplevl_genes_from_pways_converged_genes.txt
#the output file lists genes for each of the 28 top level pathways; the genes are from the set of 
#1186 genes; the number of pways each gene participates in, in the particular top level pathway, is given; 
#e.g., PCNT gene (an OMIM gene), participates in 25 reactions of Autophagy top level pway; 


#to get the pways for a gene, use foll cmd;
grep "^PCNT" pways_for_each_gene.txt


#JAG1 is an OMIM gene; comorbid with breast cancer, kidney cancer, malignant brain neoplasm,
#prosatate cancer; 
#JAG1 OMIM phenotypes = Alagille syndrome, Charcot-Marie-Tooth disease, axonal, type 2HH, 
#tetralogy of fallot (congenital heart condition involving four abnormalities occurring together, 
#including a defective septum between the ventricles and narrowing of the pulmonary artery, 
#and accompanied by cyanosis); alagille syndrome - paucity of intrahepatic bile ducts, in association 
#with 5 main clinical abnormalities: cholestasis, cardiac disease, skeletal abnormalities, ocular 
#abnormalities, and a characteristic facial phenotype; Charcot-Marie-Tooth disease characterized 
#predominantly by onset of vocal cord weakness resulting in stridor in infancy or early childhood. 
#The vocal cord paresis remains throughout life and may be severe enough to require tracheostomy.
#Jag1 Overexpression Promotes Sprouting Angiogenesis

#ATP2A2 another OMIM gene with notch
#APH1A is (Aph-1 Homolog A, Gamma-Secretase Subunit)
# NOTCH1  NCSTN   APH1A   ##OMIM##
#The NCSTN gene provides instructions for making a protein called nicastrin. This protein is 
#one part (subunit) of a complex called gamma- (γ-) secretase. Nicastrin plays a critical 
#role in the assembly and stability of this complex.
#DTX1 - Deltex E3 ubiquitin ligase 1; DTX1
#FURIN - Furin, Paired Basic Amino Acid Cleaving Enzyme;
#This gene encodes a member of the subtilisin-like proprotein convertase family, which includes 
#proteases that process protein and peptide precursors trafficking through regulated or constitutive branches 
#of the secretory pathway. It encodes a type 1 membrane bound protease that is expressed in many tissues, 
#including neuroendocrine, liver, gut, and brain. The encoded protein undergoes an initial autocatalytic 
#processing event in the ER and then sorts to the trans-Golgi network through endosomes where a second 
#autocatalytic event takes place and the catalytic activity is acquired. Like other members of this convertase 
#family, the product of this gene specifically cleaves substrates at single or paired basic residues. Some of 
#its substrates include proparathyroid hormone, transforming growth factor beta 1 precursor, proalbumin, 
#pro-beta-secretase, membrane type-1 matrix metalloproteinase, beta subunit of pro-nerve growth factor and 
#von Willebrand factor. It is thought to be one of the proteases responsible for the activation of HIV envelope 
#glycoproteins gp160 and gp140, and may play a role in tumor progression. Unlike SARS-CoV and other 
#coronaviruses, the spike protein of SARS-CoV-2 is thought to be uniquely cleaved by this protease. Alternative 
#splicing results in multiple transcript variants. 

#GATA4, NKX2- are also oncokb and omim genes;
#AKT - no omim genes;
#PI3K (or PIK3CA) - FGF8, IL2RG, COL1A2, VWF - are the only omim genes; pi3k pway is
#intracellular


#there are 3 files you can use to extract information; 
pways_for_each_gene.txt
pways_oncokb_and_omim_genes_converged.txt
pway_converged_genes.txt

#other files generated above and below:
#all genes - omim and oncokb - in each superpway; 
toplevl_genes_from_pways_converged_genes.txt
#all oncokb genes only in each superpway;
all_oncokb_genes_in_superpways.txt
#all omim genes only in each superpway; 
all_omim_genes_in_superpways.txt
#random observation - in Sensory Perception, Extracellular matrix organization, 
#Organelle biogenesis and maintenance, Protein localization, Transport of small molecules 
#superpways, there are more omim genes than oncokb ones; 
#in Circadian Clock, Digestion and Absorption, DNA Replication superpways, there are NO omim genes;  
#there are approx equal genes in oncokb and omim for Metabolism (95 oncokb, 93 omim),
#Muscle contraction (11, 11); for remaining superpways, number of genes in oncokb > omim; 


#Of the set of Immune System pways on which oncokb AND omim genes CONVERGE 
#(i.e., pways_oncokb_omim_genes_converged.txt), the foll cmd lists the set of OMIM genes; 
#there are 41 OMIM genes;
grep "^R-HSA-168256 Immune System" pways_oncokb_and_omim_genes_converged.txt | awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++){if($i~/##OMIM##/){omimcol=i; break}}} {for (j=omimcol+1; j<NF; j++) {printf $j OFS} print ""}' | sed 's/\t/\n/g' | grep -v ^$ | sort | uniq -c | sort -k1,1gr | wc -l
41
#Of the set of Immune System pways on which oncokb AND omim genes CONVERGE 
#(i.e., pways_oncokb_omim_genes_converged.txt), the foll cmd lists the set of OncoKB genes; 
#there are 130 OncoKB genes;
#foll cmd lists the set of oncokb genes in the Immune System superpway; there are 130 genes;
grep "^R-HSA-168256 Immune System" pways_oncokb_and_omim_genes_converged.txt | awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++){if($i~/##OMIM##/){omimcol=i; break}}} {for (j=2; j<omimcol; j++) {printf $j OFS} print ""}' | sed 's/\t/\n/g' | grep -v ^$ | sort | uniq -c | sort -k1,1gr | wc -l
130

#Using above 2 cmds to create the foll sh files; 
#NOTE: these files get the oncokb and omim genes, respectively, from pways_converged_genes.txt
#i.e., ALL ONCOKB GENES in each pway of each superpway are listed, irrespective of whether or not 
#the genes co-occur with OMIM genes in the pway; 
#likewise, ALL OMIM GENES in each pway of each superpway are listed, irrespective of whether or not
#the genes co-occur with OncoKB genes in the pway;
#the file: /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/list_superpways.txt
#contains the list of 28 superpways;  

#NOTE: toplevl_genes_from_pways_converged_genes.txt lists ALL GENES IN EACH SUPERPWAY, irrespective
#of whether they are omim or oncokb; 
vi getting_toplevl_oncokbgenes_from_pways_converged_genes.sh
sh getting_toplevl_oncokbgenes_from_pways_converged_genes.sh > all_oncokb_genes_in_superpways.txt

vi getting_toplevl_omimgenes_from_pways_converged_genes.sh
sh getting_toplevl_omimgenes_from_pways_converged_genes.sh > all_omim_genes_in_superpways.txt

--------------------------------------------------

#Using the matrix;  
#to get the pways for a gene, use foll cmd;
grep "^NOTCH1" pways_for_each_gene.txt | wc -l
115
#NOTCH1 plays a role in the toplevel pways: Developmental Biology, 
#Signal Transduction, Disease, Gene expression (transcription)
grep "^NOTCH2" pways_for_each_gene.txt | wc -l
34
grep "^NOTCH3" pways_for_each_gene.txt | wc -l
49
grep "^NOTCH4" pways_for_each_gene.txt | wc -l
33

#to get pways on which oncokb and omim genes converge, use foll cmd; for NOTCH, the omim genes are JAG1 and ATP2A2
#there are 15 pways on which NOTCH1 and other genes (oncokb or omim ones) converge; 
grep "NOTCH1" pways_oncokb_and_omim_genes_converged.txt | wc -l
15
#there are 15 pways on which NOTCH1 and other genes (oncokb AND omim ones) converge; however, the
#unique sets of converging genes are the foll 3 sets; these 3 sets of genes converge in 15 pways; 
#in these 3 sets, oncokb genes AND 2 omim genes (JAG1, ATP2A2) converge; 
grep "NOTCH1" pways_oncokb_and_omim_genes_converged.txt | awk -F"\t" '{IFS=OFS="\t"}{for (i=2; i<NF; i++) {printf $i OFS} print ""}' | sort | uniq
NOTCH1  MIB1    ##OMIM##        JAG1
NOTCH1  NOTCH2  NOTCH3  NOTCH4  ##OMIM##        ATP2A2
NOTCH1  ##OMIM##        JAG1

#if you don't want to worry whether or not NOTCH1 is converging with omim genes on a pway,
#use foll cmds and file;
grep "NOTCH1" pway_converged_genes.txt | wc -l
126
#The unique sets of genes converging on 126 pways are the foll 28; 
grep "NOTCH1" pway_converged_genes.txt | awk -F"\t" '{IFS=OFS="\t"}{for (i=2; i<NF; i++) {printf $i OFS} print ""}' | sort | uniq
#for only NOTCH1 co-occurrences, pways add another grep "NOTCH1" at the end;
AGO2    AGO1    ##OMIM##
CREBBP  CCND1   ##OMIM##
CREBBP  EP300   NOTCH1  CCND1   E2F3    MAML2   ##OMIM##
CREBBP  EP300   NOTCH1  CDK8    MAML2   ##OMIM##
CREBBP  EP300   NOTCH1  HEY1    MAML2   ##OMIM##
CREBBP  EP300   NOTCH1  MAML2   ##OMIM##
CREBBP  EP300   NOTCH1  MYC     MAML2   ##OMIM##
CREBBP  EP300   NOTCH1  NOTCH2  NOTCH4  MAML2   ##OMIM##
CREBBP  EP300   NOTCH1  NOTCH3  ELF3    MAML2   ##OMIM##
CREBBP  EP300   NOTCH1  NOTCH3  MAML2   ##OMIM##
CREBBP  NOTCH1  NOTCH2  NOTCH3  NOTCH4  MAML2   ##OMIM##
DTX1    ##OMIM##
E2F3    ##OMIM##
FBXW7   NOTCH1  ##OMIM##
H3_3A   H2AC6   H2BC11  H2BC12  H2BC17  H2BC5   H3C2    H3C1    H3C10   H3C11   H3C12   H3C3    H3C4    H3C6    H3C7H3C8     H2BC4   H2BC8   H4C9    H3C13   H3C14   H3C15   ##OMIM##
NOTCH1  AGO2    AGO1    ##OMIM##
NOTCH1  DTX1    NCSTN   APH1A   ##OMIM##
NOTCH1  DTX1    ##OMIM##
NOTCH1  HIF1A   ##OMIM##
NOTCH1  MIB1    ##OMIM##        JAG1
NOTCH1  NCOR1   HDAC1   NCOR2   TBL1XR1 HDAC4   HDAC7   ##OMIM##
NOTCH1  NCSTN   APH1A   ##OMIM##
NOTCH1  NOTCH2  NOTCH3  NOTCH4  FURIN   ##OMIM##
NOTCH1  NOTCH2  NOTCH3  NOTCH4  ##OMIM##
NOTCH1  NOTCH2  NOTCH3  NOTCH4  ##OMIM##        ATP2A2
NOTCH1  ##OMIM##
NOTCH1  ##OMIM##        JAG1
TLE1    TLE2    TLE3    TLE4    ##OMIM##


#Foll cmds help to get more inform
grep "NOTCH1" pway_converged_genes.txt | grep "JAG" | wc -l
19

#cmd of foll kind can be used to knock off the superpway name, if pway name is too long;
grep "NOTCH1" pway_converged_genes.txt | grep "JAG" | sed -e 's/R-HSA-1643685 Disease //' -e 's/R-HSA-162582 Signal Transduction //'

--------------------------------------------------

#grep -i, --ignore-case ; Ignore case distinctions in patterns and input data, so that
#characters that differ only in case match each other; 
#i.e., proteasome and Proteasome matches are picked;

#below, repeating the cmds used for notch, for proteasome
#to get the pways associated with proteasome, use foll cmd;
grep -i "proteasome" pways_for_each_gene.txt | wc -l
158
grep -i "proteasome" pways_for_each_gene.txt | awk -F"\t" '{print $2}' | awk -F" " '{print $1, $2, $3, $4, $5, $6}' | sort | uniq
#proteasome plays a role in the toplevel pways: Developmental Biology, 
#Signal Transduction, Cell Cycle, Disease, Immune System, Transport of small molecules, 
#Gene expression (transcription), Cellular responses to stimuli

#there are 53 genes associated with proteasome
grep -i "proteasome" pways_for_each_gene.txt | awk -F"\t" '{print $1}' | sort | uniq -c | wc -l
53
grep -i "proteasome" pways_for_each_gene.txt | awk -F"\t" '{print $1}' | sort | uniq -c | awk -F"\n" '{printf $0}' | sed 's/      /  /g'
#the gene and number of proteasome-related pways each gene participates in is listed below;
#NFKB2 and NFKBIA (NF-kappa-B inhibitor Alpha) are listed;
1 AJUBA  1 AMER1  1 APC  1 AURKA  3 AXIN1  2 AXIN2  4 CBLB  1 CCND1  2 CCNE1  2 CDKN1A  
2 CDKN1B  2 CFTR  2 CKS1B  1 COP1  1 CTNNB1  6 CUL3  4 CUL7  6 ELOC  1 EPAS1  4 FBXO11  
4 FBXO31  5 FBXW7  6 GLI1  6 GLI2  4 GSK3B  2 GTSE1  1 HIF1A  4 KEAP1  1 MAP3K14  1 NF1  
1 NFE2L2  2 NFKB2  4 NFKBIA  1 NOTCH4  1 PPP2R1A  3 PRKACA  4 PRKN  1 PTEN  4 RNF213  4 RUNX2  
2 SHH  4 SOCS1  4 SOCS3  1 SPOP  1 SPRED1  1 STAT4     15 SUFU  2 TP53  4 TRAF7  4 TRIM32  
5 VHL  5 WWP1  4 ZBTB16

#to get pways on which oncokb and omim genes converge, use foll cmd; 
#there are 10 proteasome related pways on which oncokb AND omim genes converge;
grep -i "proteasome" pways_oncokb_and_omim_genes_converged.txt | wc -l
10
#there are 10 proteasome related pways on which oncokb and omim genes converge; 
#however, the unique sets of converging genes are listed below; i.e., these 
#sets converge in 10 pways; in these sets, oncokb genes converge on 3 omim genes,
#CUL7, TRIM32, GLI2;  
grep -i "proteasome" pways_oncokb_and_omim_genes_converged.txt | awk -F"\t" '{IFS=OFS="\t"}{for (i=2; i<NF; i++) {printf $i OFS} print ""}' | sort | uniq
FBXW7   SOCS1   VHL     KEAP1   TRAF7   CUL3    FBXO11  PRKN    ELOC    RNF213  SOCS3   ZBTB16  CBLB    FBXO31  WWP1##OMIM## CUL7    TRIM32
SPOP    CUL3    ##OMIM##        GLI2
SUFU    GSK3B   ##OMIM##        GLI2
SUFU    ##OMIM##        GLI2
SUFU    PRKACA  ##OMIM##        GLI2

#if you don't want to worry whether the genes converging on the proteasome 
#pways are oncokb or omim genes, use foll cmds and file;  
grep -i "proteasome" pway_converged_genes.txt | wc -l
54
#The unique sets of genes converging on 54 pways are the foll 34; 
grep -i "proteasome" pway_converged_genes.txt | awk -F"\t" '{IFS=OFS="\t"}{for (i=2; i<NF; i++) {printf $i OFS} print ""}' | sort | uniq
AMER1   APC     AXIN1   CTNNB1  PPP2R1A GSK3B   ##OMIM##
AURKA   ##OMIM##
AXIN1   AXIN2   ##OMIM##
CCND1   ##OMIM##
CCNE1   CDKN1B  CDKN1A  CKS1B   ##OMIM##
COP1    ##OMIM##
CUL3    ##OMIM##
ELOC    ##OMIM##
FBXW7   GSK3B   RUNX2   ##OMIM##
FBXW7   SOCS1   VHL     KEAP1   TRAF7   CUL3    FBXO11  PRKN    ELOC    RNF213  SOCS3   ZBTB16  CBLB    FBXO31  WWP1##OMIM## CUL7    TRIM32
GLI1    ##OMIM##
MAP3K14 ##OMIM##
NF1     SPRED1  ##OMIM##
NFE2L2  ##OMIM##
NFKB2   ##OMIM##
NFKBIA  ##OMIM##
NOTCH4  ##OMIM##
##OMIM##        CFTR
##OMIM##        SHH
PTEN    ##OMIM##
RUNX2   ##OMIM##
RUNX2   WWP1    ##OMIM##
SPOP    CUL3    ##OMIM##        GLI2
STAT4   ##OMIM##
SUFU    GLI1    ##OMIM##
SUFU    GLI1    PRKACA  ##OMIM##
SUFU    GSK3B   ##OMIM##
SUFU    GSK3B   ##OMIM##        GLI2
SUFU    ##OMIM##
SUFU    ##OMIM##        GLI2
SUFU    PRKACA  ##OMIM##
SUFU    PRKACA  ##OMIM##        GLI2
TP53    GTSE1   ##OMIM##
VHL     EPAS1   ELOC    HIF1A   AJUBA   ##OMIM##

--------------------------------------------------

#below, repeating above cmds used for nfkb; 
#to get the pways associated with NFKB or NFkB, use foll cmd;
grep -i "NFKB" pways_for_each_gene.txt | wc -l
201
grep -i "NFKB" pways_for_each_gene.txt | awk -F"\t" '{print $2}' | awk -F" " '{print $1, $2, $3, $4, $5, $6}' | sort | uniq
#NFKB plays a role in the toplevel pways: 
#Signal Transduction, Disease, Immune System, Metabolism of proteins, 
#Chromatin organization

#there are 11 genes associated with NFKB
grep -i "NFKB" pways_for_each_gene.txt | awk -F"\t" '{print $1}' | sort | uniq -c | wc -l
11
grep -i "NFKB" pways_for_each_gene.txt | awk -F"\t" '{print $1}' | sort | uniq -c | awk -F"\n" '{printf $0}' | sed 's/      /  /g'
#the gene and number of NFkB-related pways each gene participates in is listed below;
49 IKBKB  2 MAP2K1  6 MAP2K4  2 MAP3K1     18 MAP3K7  4 MYD88     56 NFKB2     45 NFKBIA  4 NFKBIE     14 NOD1


#to get pways on which oncokb and omim genes converge, use foll cmd; 
#there are NO NFkB-related pways on which oncokb AND omim genes converge;
grep -i "NFKB" pways_oncokb_and_omim_genes_converged.txt | wc -l
0


#if you don't want to worry whether the genes converging on the NFKB 
#pways are oncokb or omim genes, use foll cmds and file;  
grep -i "NFKB" pway_converged_genes.txt | wc -l
129
#The unique sets of genes converging on 129 pways are the foll 19; 
grep -i "NFKB" pway_converged_genes.txt | awk -F"\t" '{IFS=OFS="\t"}{for (i=2; i<NF; i++) {printf $i OFS} print ""}' | sort | uniq
IKBKB   MAP3K7  NOD1    ##OMIM##
IKBKB   ##OMIM##
MAP2K1  MAP2K4  ##OMIM##
MAP2K4  MAP3K7  NOD1    ##OMIM##
MAP2K4  ##OMIM##
MAP3K14 NFKB2   ##OMIM##
MAP3K1  ##OMIM##
MAP3K7  NOD1    ##OMIM##
MAP3K7  ##OMIM##
MYD88   NFKB2   ##OMIM##
MYD88   ##OMIM##
NFKB2   ##OMIM##
NFKB2   SETD6   ##OMIM##
NFKBIA  IKBKB   ##OMIM##
NFKBIA  NFKB2   IKBKB   ##OMIM##
NFKBIA  NFKB2   ##OMIM##
NFKBIA  ##OMIM##
NFKBIA  REL     IKBKB   NFKBIE  ##OMIM##
NFKBIA  REL     NFKBIE  ##OMIM##

-----------------------------------------------------------------------------------

#Tried to look for pways and genes with both proteasome and NFkB
grep -i "proteasome" pways_for_each_gene.txt | grep -i 'NFKB\|NF-kB' | wc -l
7
grep -i "proteasome" pways_for_each_gene.txt | grep -i "NFKB\|NF-kB" | awk -F"\t" '{print $2}' | awk -F" " '{print $1, $2, $3, $4, $5, $6}' | sort | uniq
#proteasome and NFKB play a role in the toplevel pway: Immune System (Cytokine Signaling in Immune System,
#Adaptive Immune System, Innate Immune System)

#There are 3 genes associated with proteasome and NFkB
grep -i "proteasome" pways_for_each_gene.txt | grep -i "NFKB\|NF-kB" | awk -F"\t" '{print $1}' | sort | uniq -c
      1 MAP3K14
      2 NFKB2
      4 NFKBIA
grep -i "proteasome" pways_for_each_gene.txt | grep -i "NFKB\|NF-kB" | awk -F"\t" '{print $1}' | sort | uniq -c | awk -F"\n" '{printf $0}' | sed 's/      /  /g'
1 MAP3K14  2 NFKB2  4 NFKBIA

#There are NO Proteasome and NFkB related pathways on which oncokb and omim genes converge;
grep -i "proteasome" pways_oncokb_and_omim_genes_converged.txt | grep -i "NFKB\|NF-kB" | wc -l
0
grep -i "proteasome" pways_oncokb_and_omim_genes_converged.txt | grep -i "NFKB\|NF-kB" | awk -F"\t" '{IFS=OFS="\t"}{for (i=2; i<NF; i++) {printf $i OFS} print ""}' | sort | uniq
0

#Oncokb genes alone converging on Proteasome and NFkB-related pways are the foll
grep -i "proteasome" pway_converged_genes.txt | grep -i "NFKB\|NF-kB" | wc -l
7
#The unique sets of genes converging on 7 pways are the foll 3; 
grep -i "proteasome" pway_converged_genes.txt | grep -i "NFKB\|NF-kB" | awk -F"\t" '{IFS=OFS="\t"}{for (i=2; i<NF; i++) {printf $i OFS} print ""}' | sort | uniq
MAP3K14 ##OMIM##
NFKB2   ##OMIM##
NFKBIA  ##OMIM##

--------------------------------------------------

#counting number of genes; 
#the foll cmd counts the number of genes in each superpway;
awk '(NR==1)&&($1 ~ /R-HSA-/){pway=$0; count=0}; (NR!=1)&&($1 ~ /R-HSA-/){print pway "\t" count; pway=$0; count=0} ($1 !~ /R-HSA-/){count++;}END{print pway "\t" count}' toplevl_genes_from_pways_converged_genes.txt > tall

#the foll cmd counts the number of oncokb genes in each superpway;
awk '(NR==1)&&($1 ~ /R-HSA-/){pway=$0; count=0}; (NR!=1)&&($1 ~ /R-HSA-/){print pway "\t" count; pway=$0; count=0} ($1 !~ /R-HSA-/){count++;}END{print pway "\t" count}' all_oncokb_genes_in_superpways.txt > tonco

#the foll cmd counts the number of omim genes in each superpway;
awk '(NR==1)&&($1 ~ /R-HSA-/){pway=$0; count=0}; (NR!=1)&&($1 ~ /R-HSA-/){print pway "\t" count; pway=$0; count=0} ($1 !~ /R-HSA-/){count++;}END{print pway "\t" count}' all_omim_genes_in_superpways.txt > tomim

#took the above 3 files (tall, tonco, tomim) to excel; the file containing the data is:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail\oncokb_complexdisease_md_assocns.xlsx
#sheet = superpway_ngenes ;

-----------------------------------------------------------------------------------

#Using the file pway_converged_genes.txt to get the co-occurrences for each gene; 
#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix
awk -F"\t" '{IFS=OFS="\t"}{for (i=2; i<NF; i++) {printf $i OFS} print ""}' pway_converged_genes.txt | sort | uniq -c | sort -k1,1rg | sed -e 's/^\s\+//' -e 's/\(^[0-9]\+\) /\1\t/' > num_of_times_each_convergence_occurs.txt

awk -F"\t" '{IFS=OFS="\t"}{for (i=2; i<NF; i++) {printf $i OFS} print ""}' pway_converged_genes.txt | sort | uniq -c | sort -k1,1rg | sed -e 's/^\s\+//' -e 's/\(^[0-9]\+\) /\1\t/' | sed 's/^[0-9]\+\t//' > lst_gene_convergences.txt

wc -l num_of_times_each_convergence_occurs.txt lst_gene_convergences.txt
  2556 num_of_times_each_convergence_occurs.txt
  2556 lst_gene_convergences.txt
#there are 2556 unique combinations in which the set of 1186 genes converge; 

#Two batch files have to be created: i) to extract the unique convergences observed for each gene; 
#ii) to extract all occurrences of each convergence, including the pways; 

#(i) Creating batch file to extract the unique convergences for each gene; 
#oncokb and/or blair_mel genes may be extracted from the foll 3 files, using the command below; 
#/scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/outfile_blair_mel_324.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/outfile_oncokb_862.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/outfile_oncokb_blair_mel_1186.txt
grep "_Identifier, Pathway, Reaction, ReactionName" outfile_oncokb_blair_mel_1186.txt | sed 's/_Identifier/ Identifier/' | awk -F" " '{print $1}' > lst_1186_oncokb_blair_mel_genes.txt
cp lst_1186_oncokb_blair_mel_genes.txt prep1_unique_convergences_for_each_gene.sh

#edited the prep1 file to contain awk cmds of the foll kind;
#awk -F"\t" '{IFS=OFS="\t"}($0~/\tRB1\t/){print "RB1" OFS $0}' num_of_times_each_convergence_occurs.txt
vi prep1_unique_convergences_for_each_gene.sh
#:1,$s/^/awk -F"\\t" '{IFS=OFS="\\t"}(/
#:1,$s/(/(\$0\~\/\\t/
#:1,$s/$/\\t\/){print "/
#:wq
paste -d" " prep1_unique_convergences_for_each_gene.sh lst_1186_oncokb_blair_mel_genes.txt > temp.txt
cp temp.txt prep1_unique_convergences_for_each_gene.sh
vi prep1_unique_convergences_for_each_gene.sh
#:1,$s/print " /print "/
#:1,$s/$/" OFS \$0}' num_of_times_each_convergence_occurs.txt
#:wq
sh prep1_unique_convergences_for_each_gene.sh > unique_convergences_for_each_gene.txt
#To check above output file, use foll cmds;
grep "^\bABL1\b" unique_convergences_for_each_gene.txt
#count total number of occurrences by adding the the number of times each convergence occurs;
#for ABL1 it is: 18
#Next, confirm using foll cmd;
grep "\bABL1\b" pway_converged_genes.txt | wc -l
#this also 18; 

#(ii) Creating batch file to extract all occurrences of each convergence, including the pways;

#trial cmd; the batch file is based on the foll cmd:  
#awk -F"\t" '{IFS=OFS="\t"}(($0~/ACTG1\tACTB\t##OMIM##\t[0-9]+/)&&($2~/^ACTG1/))' pway_converged_genes.txt | wc -l

cp num_of_times_each_convergence_occurs.txt prep2_all_occurrences_of_each_convergence.sh
vi prep2_all_occurrences_of_each_convergence.sh
#:1,$s/^/echo -e -n "/
#:1,$s/$/" ; awk -F"\\t" '{IFS=OFS="\\t"}((/
#:1,$s/$/\$0\~\//
#:wq
cp lst_gene_convergences.txt temp.txt
vi temp.txt
#:1,$s/\t/\\t/g
#:1,$s/$/[0-9]+/
#:wq
paste -d" " prep2_all_occurrences_of_each_convergence.sh temp.txt > temp2.txt
vi temp2.txt
#:1,$s/\/ /\//
#:1,$s/$/\/)\&\&(\$2\~\/^/
#:wq
awk -F"\t" '{print $2}' num_of_times_each_convergence_occurs.txt > temp3.txt
paste -d" " temp2.txt temp3.txt > temp4.txt
vi temp4.txt
#:1,$s/\/^ /\/^/
#:1,$s/$/\/))' pway_converged_genes.txt/
#:1,$s/\t/\\t/g
#:1,$s/\\t" ; awk/\\t\\n" ; awk/
#:wq
mv prep2_all_occurrences_of_each_convergence.sh temp5.txt

cp temp4.txt prep2_all_occurrences_of_each_convergence.sh

#foll cmd takes 3 mins real time to run; 
sh prep2_all_occurrences_of_each_convergence.sh > all_occurrences_of_each_convergence.txt 

#below cmd is a way of checking;
sh prep2_all_occurrences_of_each_convergence.sh | grep "^[0-9]\+" | wc -l
#2556   this number is the same as the number of lines in the files: 
#num_of_times_each_convergence_occurs.txt and lst_gene_convergences.txt 
#there are 2556 unique combinations in which the set of 1186 genes converge (see above); 

#Foll are useful files; they are all in the foll directory:
# /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/ 
# pway_converged_genes.txt 
# pways_oncokb_and_omim_genes_converged.txt
# pways_for_each_gene.txt
# num_of_times_each_convergence_occurs.txt (or the slightly modified lst_gene_convergences.txt)
# unique_convergences_for_each_gene.txt
# all_occurrences_of_each_convergence.txt

#at Pradnya's behest created a file called: egs_of_convergences_differing_by_one_gene.txt ;
#it has 3 examples; each example is a pair of convergences which differ by one gene; the
#pways in which each convergence is observed are also listed in the file;   

-----------------------------------------------------------------------------------

#20-8-22
#Created a new .sh file to complete cancer mutation collection: 
# /scratch/prasannalab/cancers_in_detail/cmd2_completing_cancer_mutn_collection.sh
#i.e., to compile the mutations of HNSC, GBM, LAML, LUAD, SKCM;

-----------------------------------------------------------------------------------
#unix tip:
#How do I grep tab (\t) in files from terminal; 
#just use grep "<Ctrl+V><TAB>"
#press Ctrl+V key combo, then press TAB key


#unix tip: How to include john in 3rd line;
#user password location date
#john passwd1  new_york today
#     passwd2  london   yesterday
#jeff passwd3  new_york tomorrow
#awk '{if (NF == 4) {print $0; name=$1} else {print name$0}}'


#https://stackoverflow.com/questions/4487328/match-two-strings-in-one-line-with-grep
#How to use grep to match only those lines that contain BOTH of two strings; 
#You can use
#grep 'string1' filename | grep 'string2'
#Or
#grep 'string1.*string2\|string2.*string1' filename


#unix notes; how to edit a file without opening it;
cat temp.txt 
#This is a test file created for vi example.
#In this example we are learning
#edit the file with vi without opening it.
vi -c "%s/example/trick/g|wq" temp.txt


#using octal escape sequence; octal code for single quote is 047;
#An octal escape sequence is a backslash followed by one, two, or three octal digits (0-7). 
#It matches a character in the target sequence with the value specified by those digits.
#single quote (') is coded by octal 047; hence octal escape sequence = \047


#Insert new line or text after every line in unix
#see: https://www.theunixschool.com/2012/08/insert-new-line-after-every-n-lines.html
# awk '1;(NR%2!= 0)||(NR%2 ==0) {print "LINE";}' junk.sh
#'1;' , which means true, prints every line by default. NR, the special variable containing the line number, 
#is checked; whether NR%2 is 0, or NR%2 is not 0, a line is inserted with the specific text (which, in this case, 
#is: echo "")


#using newline as FS (Field Separator); i.e. FS = "\n";
#see below for an explanation; 
https://stackoverflow.com/questions/2208059/using-awk-or-sed-to-remove-newlines-based-on-first-character-of-next-line
-----------------------------------------------------------------------------------

#Things to do
#1) finish collecting mutations for cancers;
#2) look for mutns common to cancers and MD...
#3) connect genes with diseases

---------------------------------------------------------------------

############################################################
############################################################
############################################################

# MASTERFILE9 gets abridged hierarchies for each top-level pathway; 
#gets pie charts showing cancer- and comorbidity-associated- genes participating in each top-level pathway; 
#gets the gene pathway fingerprint matrix for each cancer using the program: 
#gene_pway_fingerprint_mtx.pl (given in Supplementary_Methods_SuppFigs_1to9_12to15.docx); 
#gets scripts ready to generate pathway fingerprints;
#generates pathway fingerprint tables for mutated genes in each cancer; 

#9) MASTERFILE9 = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/cmd4_forwriteup_modified_13may2023.sh

#to get list of all sh files recursively; 
ls -R /scratch/prasannalab/cancers_in_detail | grep "sh"

#Reactome pway informn is available for 862 oncokb + 324 blair_mel = 1186 genes;
#the list of 1186 genes is in the file:
#/scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/lst_1186_oncokb_blair_mel_genes.txt ;

mkdir /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

cp /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/lst_1186_oncokb_blair_mel_genes.txt list_862_oncokb_genes.txt
cp /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/lst_1186_oncokb_blair_mel_genes.txt list_324_bm_omim_genes.txt

#edited the foll file to retain only 862 oncokb genes;
vi list_862_oncokb_genes.txt
#:863,$d
#edited the foll file to retain only 324 blair_mel genes;
vi list_324_bm_omim_genes.txt
#:1,862d

#the foll exercise should serve 2 purposes: 
#(i)  you should be able to get a list of genes (oncokb and omim) for each superpway;
#(ii) for a cancer, for each driver gene, you can get a count of the number of hierarchies
#     being affected in each superpway; from a count for all driver genes, you MIGHT be
#     able to make out which hierarchy and superpway is preferentially targeted, in the cancer; 

#awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Autophagy_R_HSA_9612973.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Autophagy_R_HSA_9612973.txt 
#awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Autophagy_R_HSA_9612973.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' 
#awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Autophagy_R_HSA_9612973.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{$(NF-1)=""; $NF=""; print $0}' | uniq -c

#getting the hierarchy tree for a top-level pway;  
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Autophagy_R_HSA_9612973.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Autophagy.txt
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Autophagy_R_HSA_9612973.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Autophagy.sh

#take tree_Autophagy.txt to windows;

sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Autophagy.sh to include cmds of the foll kind;
#awk -F"[|\t]" '{OFS="|"}{savgenenm = $1; savnf_1 = $(NF-1); savnf = $NF; $1 = ""; $(NF-1)=""; $NF=""; line = $0; {if(line == "|R-HSA-9612973|Autophagy|R-HSA-1632852|Macroautophagy||") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt 
vi srch_oncokb_Autophagy.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Autophagy.sh srch_bmomim_Autophagy.sh
vi srch_bmomim_Autophagy.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Autophagy.sh

#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Autophagy.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Autophagy.txt; the output file, fortabuln_hier_oncokb_Autophagy.txt, must be 
#taken to windows and used as a companion to tree_Autophagy.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Autophagy_R_HSA_9612973.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Autophagy.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Autophagy |" >> fortabuln_hier_oncokb_Autophagy.txt
sh srch_oncokb_Autophagy.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Autophagy.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Autophagy.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Autophagy.txt

#unix notes:
#You can replace newlines in sed by passing it the -z option.
#    sed -z 's/\n/ /g'
#    Sed man page:
#    -z, --null-data separate lines by NUL characters

#sed -e '$a\'
#How it works:
#    $ denotes the end of file
#    a\ appends the following text (which is nothing, in this case) on a new line
#In other words, if the last line contains a character that is not newline, append a newline.


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Autophagy.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Autophagy.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Autophagy.txt; the output file, fortabuln_hier_bmomim_Autophagy.txt, must be 
#taken to windows and used as a companion to tree_Autophagy.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Autophagy_R_HSA_9612973.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Autophagy.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Autophagy |" >> fortabuln_hier_bmomim_Autophagy.txt
sh srch_bmomim_Autophagy.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Autophagy.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Autophagy.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Autophagy.txt


#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Autophagy.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Autophagy.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Autophagy.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Autophagy

--------------------------------------------------

#Cell-Cycle

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

#getting the hierarchy tree for a top-level pway;  
#copying Cell_Cycle_R_HSA_1640170.txt to pwd because the file has quotation marks,
#which need to be removed (e.g., "Cell Cycle, Mitotic" (R-HSA-69278));
#there were quotation marks in Autophagy_R_HSA_9612973.txt, too, but they were only in the reaction
#part, and did not interfere with execution of commands;

cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cycle_R_HSA_1640170.txt edited_Cell_Cycle_R_HSA_1640170.txt
vi edited_Cell_Cycle_R_HSA_1640170.txt
#:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' edited_Cell_Cycle_R_HSA_1640170.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' edited_Cell_Cycle_R_HSA_1640170.txt

awk '($0 ~ /^R-HSA-/)' edited_Cell_Cycle_R_HSA_1640170.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Cell_Cycle.txt
awk '($0 ~ /^R-HSA-/)' edited_Cell_Cycle_R_HSA_1640170.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Cell_Cycle.sh

#take tree_Cell_Cycle.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Cell_Cycle.sh;
vi srch_oncokb_Cell_Cycle.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Cell_Cycle.sh srch_bmomim_Cell_Cycle.sh
vi srch_bmomim_Cell_Cycle.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Cell_Cycle.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Cell_Cycle.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Cell_Cycle.txt; the output file, fortabuln_hier_oncokb_Cell_Cycle.txt, must be 
#taken to windows and used as a companion to tree_Cell_Cycle.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Cell_Cycle_R_HSA_1640170.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Cell_Cycle.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Cell-Cycle |" >> fortabuln_hier_oncokb_Cell_Cycle.txt
sh srch_oncokb_Cell_Cycle.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Cell_Cycle.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Cell_Cycle.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Cell_Cycle.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Cell_Cycle.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Cell_Cycle.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Cell_Cycle.txt; the output file, fortabuln_hier_bmomim_Cell_Cycle.txt, must be 
#taken to windows and used as a companion to tree_Cell_Cycle.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Cell_Cycle_R_HSA_1640170.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Cell_Cycle.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Cell-Cycle |" >> fortabuln_hier_bmomim_Cell_Cycle.txt
sh srch_bmomim_Cell_Cycle.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Cell_Cycle.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Cell_Cycle.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Cell_Cycle.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Cell_Cycle.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Cell_Cycle.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Cell_Cycle.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Cell_Cycle

--------------------------------------------------

#Cell-Cell communication

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

##getting the hierarchy tree for a top-level pway; 
##the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cell_communication_R_HSA_1500931.txt 
##has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
##to pwd and remove quotation marks;
##copying Cell_Cycle_R_HSA_1640170.txt to pwd because the file has quotation marks,
##which need to be removed (e.g., "Cell Cycle, Mitotic" (R-HSA-69278));
##there were quotation marks in Autophagy_R_HSA_9612973.txt, too, but they were only in the reaction
##part, and did not interfere with execution of commands;

##cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cycle_R_HSA_1640170.txt edited_Cell_Cycle_R_HSA_1640170.txt
##vi edited_Cell_Cycle_R_HSA_1640170.txt
##:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cell_communication_R_HSA_1500931.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cell_communication_R_HSA_1500931.txt

awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cell_communication_R_HSA_1500931.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Cell_Cell_communication.txt
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cell_communication_R_HSA_1500931.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Cell_Cell_communication.sh

#take tree_Cell_Cell_communication.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Cell_Cell_communication.sh;
vi srch_oncokb_Cell_Cell_communication.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Cell_Cell_communication.sh srch_bmomim_Cell_Cell_communication.sh
vi srch_bmomim_Cell_Cell_communication.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Cell_Cell_communication.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Cell_Cell_communication.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Cell_Cell_communication.txt; the output file, fortabuln_hier_oncokb_Cell_Cell_communication.txt, must be 
#taken to windows and used as a companion to tree_Cell_Cell_communication.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cell_communication_R_HSA_1500931.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Cell_Cell_communication.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Cell-Cell-communication |" >> fortabuln_hier_oncokb_Cell_Cell_communication.txt
sh srch_oncokb_Cell_Cell_communication.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Cell_Cell_communication.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Cell_Cell_communication.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Cell_Cell_communication.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Cell_Cell_communication.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Cell_Cell_communication.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Cell_Cell_communication.txt; the output file, fortabuln_hier_bmomim_Cell_Cell_communication.txt, must be 
#taken to windows and used as a companion to tree_Cell_Cell_communication.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cell_communication_R_HSA_1500931.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Cell_Cell_communication.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Cell-Cell communication |" >> fortabuln_hier_bmomim_Cell_Cell_communication.txt
sh srch_bmomim_Cell_Cell_communication.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Cell_Cell_communication.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Cell_Cell_communication.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Cell_Cell_communication.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Cell_Cell_communication.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Cell_Cell_communication.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Cell_Cell_communication.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Cell_Cell_communication

--------------------------------------------------

#Cellular responses to external stimuli

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

##getting the hierarchy tree for a top-level pway; 
##the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cellular_responses_to_stimuli_R_HSA_8953897.txt 
##has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
##to pwd and remove quotation marks;
##copying Cell_Cycle_R_HSA_1640170.txt to pwd because the file has quotation marks,
##which need to be removed (e.g., "Cell Cycle, Mitotic" (R-HSA-69278));
##there were quotation marks in Autophagy_R_HSA_9612973.txt, too, but they were only in the reaction
##part, and did not interfere with execution of commands;

##cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cycle_R_HSA_1640170.txt edited_Cell_Cycle_R_HSA_1640170.txt
##vi edited_Cell_Cycle_R_HSA_1640170.txt
##:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cellular_responses_to_stimuli_R_HSA_8953897.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cellular_responses_to_stimuli_R_HSA_8953897.txt

awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cellular_responses_to_stimuli_R_HSA_8953897.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Cellular_responses_to_stimuli.txt
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cellular_responses_to_stimuli_R_HSA_8953897.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Cellular_responses_to_stimuli.sh

#take tree_Cellular_responses_to_stimuli.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Cellular_responses_to_stimuli.sh;
vi srch_oncokb_Cellular_responses_to_stimuli.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Cellular_responses_to_stimuli.sh srch_bmomim_Cellular_responses_to_stimuli.sh
vi srch_bmomim_Cellular_responses_to_stimuli.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Cellular_responses_to_stimuli.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Cellular_responses_to_stimuli.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Cellular_responses_to_stimuli.txt; the output file, fortabuln_hier_oncokb_Cellular_responses_to_stimuli.txt, must be 
#taken to windows and used as a companion to tree_Cellular_responses_to_stimuli.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cellular_responses_to_stimuli_R_HSA_8953897.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Cellular_responses_to_stimuli.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Cellular responses to stimuli |" >> fortabuln_hier_oncokb_Cellular_responses_to_stimuli.txt
sh srch_oncokb_Cellular_responses_to_stimuli.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Cellular_responses_to_stimuli.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Cellular_responses_to_stimuli.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Cellular_responses_to_stimuli.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Cellular_responses_to_stimuli.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Cellular_responses_to_stimuli.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Cellular_responses_to_stimuli.txt; the output file, fortabuln_hier_bmomim_Cellular_responses_to_stimuli.txt, must be 
#taken to windows and used as a companion to tree_Cellular_responses_to_stimuli.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cellular_responses_to_stimuli_R_HSA_8953897.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Cellular_responses_to_stimuli.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Cellular responses to stimuli |" >> fortabuln_hier_bmomim_Cellular_responses_to_stimuli.txt
sh srch_bmomim_Cellular_responses_to_stimuli.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Cellular_responses_to_stimuli.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Cellular_responses_to_stimuli.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Cellular_responses_to_stimuli.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Cellular_responses_to_stimuli.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Cellular_responses_to_stimuli.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Cellular_responses_to_stimuli.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Cellular_responses_to_stimuli

--------------------------------------------------

#Chromatin Organization

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

##getting the hierarchy tree for a top-level pway; 
##the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt
##has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
##to pwd and remove quotation marks;
##copying Cell_Cycle_R_HSA_1640170.txt to pwd because the file has quotation marks,
##which need to be removed (e.g., "Cell Cycle, Mitotic" (R-HSA-69278));
##there were quotation marks in Autophagy_R_HSA_9612973.txt, too, but they were only in the reaction
##part, and did not interfere with execution of commands;

##cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cycle_R_HSA_1640170.txt edited_Cell_Cycle_R_HSA_1640170.txt
##vi edited_Cell_Cycle_R_HSA_1640170.txt
##:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt 

awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Chromatin_organization.txt
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Chromatin_organization.sh

#take tree_Chromatin_organization.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Chromatin_organization.sh;
vi srch_oncokb_Chromatin_organization.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Chromatin_organization.sh srch_bmomim_Chromatin_organization.sh
vi srch_bmomim_Chromatin_organization.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Chromatin_organization.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Chromatin_organization.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Chromatin_organization.txt; the output file, fortabuln_hier_oncokb_Chromatin_organization.txt, must be 
#taken to windows and used as a companion to tree_Chromatin_organization.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Chromatin_organization.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Chromatin organization |" >> fortabuln_hier_oncokb_Chromatin_organization.txt
sh srch_oncokb_Chromatin_organization.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Chromatin_organization.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Chromatin_organization.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Chromatin_organization.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Chromatin_organization.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Chromatin_organization.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Chromatin_organization.txt; the output file, fortabuln_hier_bmomim_Chromatin_organization.txt, must be 
#taken to windows and used as a companion to tree_Chromatin_organization.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Chromatin_organization.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Chromatin organization |" >> fortabuln_hier_bmomim_Chromatin_organization.txt
sh srch_bmomim_Chromatin_organization.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Chromatin_organization.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Chromatin_organization.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Chromatin_organization.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Chromatin_organization.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Chromatin_organization.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Chromatin_organization.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Chromatin_organization

--------------------------------------------------

#Circadian Clock

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

####getting the hierarchy tree for a top-level pway; 
####the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt
####has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
####to pwd and remove quotation marks;
##copying Circadian_Clock_R_HSA_400253.txt to pwd because the file has quotation marks, in non-terminal nodes, 
##which need to be removed (e.g., R-HSA-1368108,"BMAL1:CLOCK,NPAS2 activates circadian gene expression"); 
##there were quotation marks in Autophagy_R_HSA_9612973.txt, too, but they were only in the reaction
##part, and did not interfere with execution of commands;

cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Circadian_Clock_R_HSA_400253.txt edited_Circadian_Clock_R_HSA_400253.txt
vi edited_Circadian_Clock_R_HSA_400253.txt
#:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' edited_Circadian_Clock_R_HSA_400253.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' edited_Circadian_Clock_R_HSA_400253.txt 

awk '($0 ~ /^R-HSA-/)' edited_Circadian_Clock_R_HSA_400253.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Circadian_Clock.txt
awk '($0 ~ /^R-HSA-/)' edited_Circadian_Clock_R_HSA_400253.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Circadian_Clock.sh

#take tree_Circadian_Clock.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Circadian_Clock.sh;
vi srch_oncokb_Circadian_Clock.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Circadian_Clock.sh srch_bmomim_Circadian_Clock.sh
vi srch_bmomim_Circadian_Clock.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Circadian_Clock.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Circadian_Clock.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Circadian_Clock.txt; the output file, fortabuln_hier_oncokb_Circadian_Clock.txt, must be 
#taken to windows and used as a companion to tree_Circadian_Clock.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Circadian_Clock_R_HSA_400253.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Circadian_Clock.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Circadian Clock |" >> fortabuln_hier_oncokb_Circadian_Clock.txt
sh srch_oncokb_Circadian_Clock.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Circadian_Clock.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Circadian_Clock.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Circadian_Clock.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#NO RESULTS for bmomim part; temp1.txt is empty

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Circadian_Clock.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Circadian_Clock.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Circadian_Clock.txt; the output file, fortabuln_hier_bmomim_Circadian_Clock.txt, must be 
#taken to windows and used as a companion to tree_Circadian_Clock.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Circadian_Clock_R_HSA_400253.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Circadian_Clock.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Circadian Clock |" >> fortabuln_hier_bmomim_Circadian_Clock.txt
sh srch_bmomim_Circadian_Clock.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Circadian_Clock.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Circadian_Clock.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Circadian_Clock.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Circadian_Clock.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Circadian_Clock.txt
######/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Circadian_Clock.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Circadian_Clock

--------------------------------------------------

#Developmental Biology

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

##getting the hierarchy tree for a top-level pway; 
##the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt
##has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
##to pwd and remove quotation marks;
##copying Developmental_Biology_R_HSA_1266738.txt to pwd because the file has quotation marks,
##which need to be removed (e.g., R-HSA-2892245,"POU5F1 (OCT4), SOX2, NANOG repress genes related to differentiation")
##there were quotation marks in Autophagy_R_HSA_9612973.txt, too, but they were only in the reaction
##part, and did not interfere with execution of commands;

cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Developmental_Biology_R_HSA_1266738.txt edited_Developmental_Biology_R_HSA_1266738.txt
vi edited_Developmental_Biology_R_HSA_1266738.txt
#:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' edited_Developmental_Biology_R_HSA_1266738.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' edited_Developmental_Biology_R_HSA_1266738.txt 

awk '($0 ~ /^R-HSA-/)' edited_Developmental_Biology_R_HSA_1266738.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Developmental_Biology.txt
awk '($0 ~ /^R-HSA-/)' edited_Developmental_Biology_R_HSA_1266738.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Developmental_Biology.sh

#take tree_Developmental_Biology.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Developmental_Biology.sh;
vi srch_oncokb_Developmental_Biology.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Developmental_Biology.sh srch_bmomim_Developmental_Biology.sh
vi srch_bmomim_Developmental_Biology.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Developmental_Biology.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Developmental_Biology.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Developmental_Biology.txt; the output file, fortabuln_hier_oncokb_Developmental_Biology.txt, must be 
#taken to windows and used as a companion to tree_Developmental_Biology.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Developmental_Biology_R_HSA_1266738.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Developmental_Biology.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Developmental Biology |" >> fortabuln_hier_oncokb_Developmental_Biology.txt
sh srch_oncokb_Developmental_Biology.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Developmental_Biology.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Developmental_Biology.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Developmental_Biology.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Developmental_Biology.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Developmental_Biology.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Developmental_Biology.txt; the output file, fortabuln_hier_bmomim_Developmental_Biology.txt, must be 
#taken to windows and used as a companion to tree_Developmental_Biology.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Developmental_Biology_R_HSA_1266738.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Developmental_Biology.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Developmental Biology |" >> fortabuln_hier_bmomim_Developmental_Biology.txt
sh srch_bmomim_Developmental_Biology.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Developmental_Biology.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Developmental_Biology.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Developmental_Biology.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Developmental_Biology.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Developmental_Biology.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Developmental_Biology.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Developmental_Biology

#unix notes:
#grep exits with non-zero code when nothing found.
#From man grep:
#Normally the exit status is 0 if a line is selected, 1 if no lines were selected, and 2 if an error occurred.
#So you can use:
#grep kwd3 search_file.txt || echo "string"

--------------------------------------------------

#Digestion and Absorption

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

##getting the hierarchy tree for a top-level pway; 
##the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Digestion_and_absorption_R_HSA_8963743.txt
##has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
##to pwd and remove quotation marks;
####copying Cell_Cycle_R_HSA_1640170.txt to pwd because the file has quotation marks,
####which need to be removed (e.g., "Cell Cycle, Mitotic" (R-HSA-69278));
####there were quotation marks in Autophagy_R_HSA_9612973.txt, too, but they were only in the reaction
####part, and did not interfere with execution of commands;

##cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cycle_R_HSA_1640170.txt edited_Cell_Cycle_R_HSA_1640170.txt
##vi edited_Cell_Cycle_R_HSA_1640170.txt
##:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Digestion_and_absorption_R_HSA_8963743.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Digestion_and_absorption_R_HSA_8963743.txt

awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Digestion_and_absorption_R_HSA_8963743.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Digestion_and_absorption.txt
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Digestion_and_absorption_R_HSA_8963743.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Digestion_and_absorption.sh

#take tree_Digestion_and_absorption.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Digestion_and_absorption.sh;
vi srch_oncokb_Digestion_and_absorption.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Digestion_and_absorption.sh srch_bmomim_Digestion_and_absorption.sh
vi srch_bmomim_Digestion_and_absorption.sh
#:1,$s/oncokb862/bmomim324/

#VERY LITTLE RESULTS for oncokb; 
#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Digestion_and_absorption.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Digestion_and_absorption.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Digestion_and_absorption.txt; the output file, fortabuln_hier_oncokb_Digestion_and_absorption.txt, must be 
#taken to windows and used as a companion to tree_Digestion_and_absorption.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Digestion_and_absorption_R_HSA_8963743.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Digestion_and_absorption.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Digestion and absorption |" >> fortabuln_hier_oncokb_Digestion_and_absorption.txt
sh srch_oncokb_Digestion_and_absorption.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Digestion_and_absorption.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Digestion_and_absorption.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Digestion_and_absorption.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#NO RESULTS for bmomim;
#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Digestion_and_absorption.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Digestion_and_absorption.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Digestion_and_absorption.txt; the output file, fortabuln_hier_bmomim_Digestion_and_absorption.txt, must be 
#taken to windows and used as a companion to tree_Digestion_and_absorption.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Digestion_and_absorption_R_HSA_8963743.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Digestion_and_absorption.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Digestion and absorption |" >> fortabuln_hier_bmomim_Digestion_and_absorption.txt
sh srch_bmomim_Digestion_and_absorption.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Digestion_and_absorption.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Digestion_and_absorption.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Digestion_and_absorption.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Digestion_and_absorption.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Digestion_and_absorption.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Digestion_and_absorption.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Digestion_and_absorption

--------------------------------------------------

#Disease

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

###getting the hierarchy tree for a top-level pway; 
###the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt
###has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
###to pwd and remove quotation marks;
#copying Disease_R_HSA_1643685.txt to pwd because the file has quotation marks, which need to be removed;  
#there were quotation marks in Autophagy_R_HSA_9612973.txt, too, but they were only in the reaction
#part, and did not interfere with execution of commands;

cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Disease_R_HSA_1643685.txt edited_Disease_R_HSA_1643685.txt 
vi edited_Disease_R_HSA_1643685.txt 
#:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' edited_Disease_R_HSA_1643685.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' edited_Disease_R_HSA_1643685.txt 

awk '($0 ~ /^R-HSA-/)' edited_Disease_R_HSA_1643685.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Disease.txt
awk '($0 ~ /^R-HSA-/)' edited_Disease_R_HSA_1643685.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Disease.sh

#the file above, srch_oncokb_Disease.sh, contains parentheses or '()' and single quotes ('); these cause 
#trouble while running srch_oncokb_Disease.sh; octal or hexadecimal escape sequences can be used instead
#of the single quote or parentheses characters;  
#octal escape sequence for single quote            = \047
#octal escape sequence for left parenthesis        = \050
#octal escape sequence for right parenthesis       = \051
#hexadecimal escape sequence for single quote      = \x27
#hexadecimal escape sequence for left parenthesis  = \x28
#hexadecimal escape sequence for right parenthesis = \x29
#hence, editing above file to replace single quote by octal escape sequence \047;
#replacing single quote alone seems to work; hence, no need to replace left and right
#parentheses with octal sequences;
#replacing the single quote with the hexadecimal escape sequence \x27 also works just as well;
vi srch_oncokb_Disease.sh
#/'    #shows that there are 6 instances of single quote (aren't, doesn't, Alzheimer's)
#:1,$s/'/\\047/g
#:wq


#take tree_Disease.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Disease.sh;
vi srch_oncokb_Disease.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Disease.sh srch_bmomim_Disease.sh
vi srch_bmomim_Disease.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Disease.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Disease.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Disease.txt; the output file, fortabuln_hier_oncokb_Disease.txt, must be 
#taken to windows and used as a companion to tree_Disease.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Disease_R_HSA_1643685.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Disease.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Disease |" >> fortabuln_hier_oncokb_Disease.txt
sh srch_oncokb_Disease.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Disease.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Disease.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Disease.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Disease.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Disease.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Disease.txt; the output file, fortabuln_hier_bmomim_Disease.txt, must be 
#taken to windows and used as a companion to tree_Disease.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Disease_R_HSA_1643685.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Disease.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Disease |" >> fortabuln_hier_bmomim_Disease.txt
sh srch_bmomim_Disease.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Disease.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Disease.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Disease.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Disease.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Disease.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Disease.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Disease

--------------------------------------------------

#DNA Repair 

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

####getting the hierarchy tree for a top-level pway; 
####the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/DNA_Repair_R_HSA_73894.txt
####has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
####to pwd and remove quotation marks;
##copying DNA_Repair_R_HSA_73894.txt to pwd because the file has quotation marks,
##which need to be removed 

cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/DNA_Repair_R_HSA_73894.txt edited_DNA_Repair_R_HSA_73894.txt 
vi edited_DNA_Repair_R_HSA_73894.txt
#:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' edited_DNA_Repair_R_HSA_73894.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' edited_DNA_Repair_R_HSA_73894.txt 

awk '($0 ~ /^R-HSA-/)' edited_DNA_Repair_R_HSA_73894.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_DNA_Repair.txt
awk '($0 ~ /^R-HSA-/)' edited_DNA_Repair_R_HSA_73894.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_DNA_Repair.sh

#take tree_DNA_Repair.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_DNA_Repair.sh;
vi srch_oncokb_DNA_Repair.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_DNA_Repair.sh srch_bmomim_DNA_Repair.sh
vi srch_bmomim_DNA_Repair.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking; also any errors which might occur can be seen;
sh srch_oncokb_DNA_Repair.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_DNA_Repair.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_DNA_Repair.txt; the output file, fortabuln_hier_oncokb_DNA_Repair.txt, must be 
#taken to windows and used as a companion to tree_DNA_Repair.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_DNA_Repair_R_HSA_73894.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_DNA_Repair.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: DNA_Repair |" >> fortabuln_hier_oncokb_DNA_Repair.txt
sh srch_oncokb_DNA_Repair.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_DNA_Repair.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_DNA_Repair.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_DNA_Repair.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_DNA_Repair.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_DNA_Repair.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_DNA_Repair.txt; the output file, fortabuln_hier_bmomim_DNA_Repair.txt, must be 
#taken to windows and used as a companion to tree_DNA_Repair.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_DNA_Repair_R_HSA_73894.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_DNA_Repair.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: DNA Repair |" >> fortabuln_hier_bmomim_DNA_Repair.txt
sh srch_bmomim_DNA_Repair.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_DNA_Repair.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_DNA_Repair.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_DNA_Repair.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_DNA_Repair.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_DNA_Repair.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_DNA_Repair.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = DNA_Repair 

--------------------------------------------------

#DNA Replication

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

##getting the hierarchy tree for a top-level pway; 
##the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/DNA_Replication_R_HSA_69306.txt
##has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
##to pwd and remove quotation marks;
####copying Cell_Cycle_R_HSA_1640170.txt to pwd because the file has quotation marks,
####which need to be removed (e.g., "Cell Cycle, Mitotic" (R-HSA-69278));
####there were quotation marks in Autophagy_R_HSA_9612973.txt, too, but they were only in the reaction
####part, and did not interfere with execution of commands;

##cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cycle_R_HSA_1640170.txt edited_Cell_Cycle_R_HSA_1640170.txt
##vi edited_Cell_Cycle_R_HSA_1640170.txt
##:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/DNA_Replication_R_HSA_69306.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/DNA_Replication_R_HSA_69306.txt 

awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/DNA_Replication_R_HSA_69306.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_DNA_Replication.txt
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/DNA_Replication_R_HSA_69306.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_DNA_Replication.sh

#take tree_DNA_Replication.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_DNA_Replication.sh;
vi srch_oncokb_DNA_Replication.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_DNA_Replication.sh srch_bmomim_DNA_Replication.sh
vi srch_bmomim_DNA_Replication.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_DNA_Replication.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_DNA_Replication.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_DNA_Replication.txt; the output file, fortabuln_hier_oncokb_DNA_Replication.txt, must be 
#taken to windows and used as a companion to tree_DNA_Replication.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/DNA_Replication_R_HSA_69306.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_DNA_Replication.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: DNA Replication |" >> fortabuln_hier_oncokb_DNA_Replication.txt
sh srch_oncokb_DNA_Replication.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_DNA_Replication.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_DNA_Replication.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_DNA_Replication.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#NO RESULTS for bmomim
#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_DNA_Replication.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_DNA_Replication.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_DNA_Replication.txt; the output file, fortabuln_hier_bmomim_DNA_Replication.txt, must be 
#taken to windows and used as a companion to tree_DNA_Replication.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/DNA_Replication_R_HSA_69306.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_DNA_Replication.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: DNA Replication |" >> fortabuln_hier_bmomim_DNA_Replication.txt
sh srch_bmomim_DNA_Replication.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_DNA_Replication.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_DNA_Replication.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_DNA_Replication.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_DNA_Replication.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_DNA_Replication.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_DNA_Replication.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = DNA_Replication

--------------------------------------------------

#Extracellular matrix organization

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

##getting the hierarchy tree for a top-level pway; 
##the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Extracellular_matrix_organization_R_HSA_1474244.txt
##has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
##to pwd and remove quotation marks;
####copying Cell_Cycle_R_HSA_1640170.txt to pwd because the file has quotation marks,
####which need to be removed (e.g., "Cell Cycle, Mitotic" (R-HSA-69278));
####there were quotation marks in Autophagy_R_HSA_9612973.txt, too, but they were only in the reaction
####part, and did not interfere with execution of commands;

##cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cycle_R_HSA_1640170.txt edited_Cell_Cycle_R_HSA_1640170.txt
##vi edited_Cell_Cycle_R_HSA_1640170.txt
##:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Extracellular_matrix_organization_R_HSA_1474244.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Extracellular_matrix_organization_R_HSA_1474244.txt 

awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Extracellular_matrix_organization_R_HSA_1474244.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Extracellular_matrix_organization.txt
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Extracellular_matrix_organization_R_HSA_1474244.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Extracellular_matrix_organization.sh

#take tree_Extracellular_matrix_organization.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Extracellular_matrix_organization.sh;
vi srch_oncokb_Extracellular_matrix_organization.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Extracellular_matrix_organization.sh srch_bmomim_Extracellular_matrix_organization.sh
vi srch_bmomim_Extracellular_matrix_organization.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Extracellular_matrix_organization.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Extracellular_matrix_organization.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Extracellular_matrix_organization.txt; the output file, fortabuln_hier_oncokb_Extracellular_matrix_organization.txt, must be 
#taken to windows and used as a companion to tree_Extracellular_matrix_organization.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Extracellular_matrix_organization_R_HSA_1474244.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Extracellular_matrix_organization.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Extracellular matrix organization |" >> fortabuln_hier_oncokb_Extracellular_matrix_organization.txt
sh srch_oncokb_Extracellular_matrix_organization.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Extracellular_matrix_organization.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Extracellular_matrix_organization.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Extracellular_matrix_organization.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#NO RESULTS for bmomim
#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Extracellular_matrix_organization.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Extracellular_matrix_organization.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Extracellular_matrix_organization.txt; the output file, fortabuln_hier_bmomim_Extracellular_matrix_organization.txt, must be 
#taken to windows and used as a companion to tree_Extracellular_matrix_organization.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Extracellular_matrix_organization_R_HSA_1474244.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Extracellular_matrix_organization.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Extracellular matrix organization |" >> fortabuln_hier_bmomim_Extracellular_matrix_organization.txt
sh srch_bmomim_Extracellular_matrix_organization.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Extracellular_matrix_organization.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Extracellular_matrix_organization.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Extracellular_matrix_organization.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Extracellular_matrix_organization.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Extracellular_matrix_organization.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Extracellular_matrix_organization.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Extracellular_mtx_organization

#THERE ARE MORE OMIM GENES THAN ONCOKB GENES FOR THIS SUPERPWAY
#COL1A2 and other genes, whose omim mutns appear as passenger mutations in cancers, belong to this superpway;

--------------------------------------------------

#Gene expression (Transcription)

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

###getting the hierarchy tree for a top-level pway; 
###the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt
###has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
###to pwd and remove quotation marks;
#copying Gene_expression_Transcription_R_HSA_74160.txt to pwd because the file has quotation marks, which need to be removed;  

cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Gene_expression_Transcription_R_HSA_74160.txt edited_Gene_expression_Transcription_R_HSA_74160.txt 
vi edited_Gene_expression_Transcription_R_HSA_74160.txt 
#:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' edited_Gene_expression_Transcription_R_HSA_74160.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' edited_Gene_expression_Transcription_R_HSA_74160.txt 

awk '($0 ~ /^R-HSA-/)' edited_Gene_expression_Transcription_R_HSA_74160.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Gene_expression_Transcription.txt
awk '($0 ~ /^R-HSA-/)' edited_Gene_expression_Transcription_R_HSA_74160.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Gene_expression_Transcription.sh

#take tree_Gene_expression_Transcription.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Gene_expression_Transcription.sh;
vi srch_oncokb_Gene_expression_Transcription.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Gene_expression_Transcription.sh srch_bmomim_Gene_expression_Transcription.sh
vi srch_bmomim_Gene_expression_Transcription.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Gene_expression_Transcription.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Gene_expression_Transcription.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Gene_expression_Transcription.txt; the output file, fortabuln_hier_oncokb_Gene_expression_Transcription.txt, must be 
#taken to windows and used as a companion to tree_Gene_expression_Transcription.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Gene_expression_Transcription_R_HSA_74160.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Gene_expression_Transcription.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Gene expression Transcription |" >> fortabuln_hier_oncokb_Gene_expression_Transcription.txt
sh srch_oncokb_Gene_expression_Transcription.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Gene_expression_Transcription.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Gene_expression_Transcription.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Gene_expression_Transcription.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Gene_expression_Transcription.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Gene_expression_Transcription.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Gene_expression_Transcription.txt; the output file, fortabuln_hier_bmomim_Gene_expression_Transcription.txt, must be 
#taken to windows and used as a companion to tree_Gene_expression_Transcription.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Gene_expression_Transcription_R_HSA_74160.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Gene_expression_Transcription.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Gene expression Transcription |" >> fortabuln_hier_bmomim_Gene_expression_Transcription.txt
sh srch_bmomim_Gene_expression_Transcription.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Gene_expression_Transcription.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Gene_expression_Transcription.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Gene_expression_Transcription.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Gene_expression_Transcription.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Gene_expression_Transcription.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Gene_expression_Transcription.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Gene_expression_Transcription

--------------------------------------------------

#Hemostasis

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

###getting the hierarchy tree for a top-level pway; 
###the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt
###has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
###to pwd and remove quotation marks;

#copying Hemostasis_R_HSA_109582.txt to pwd because the file has quotation marks, which need to be removed;  
cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Hemostasis_R_HSA_109582.txt edited_Hemostasis_R_HSA_109582.txt 
vi edited_Hemostasis_R_HSA_109582.txt 
#:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' edited_Hemostasis_R_HSA_109582.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' edited_Hemostasis_R_HSA_109582.txt 

awk '($0 ~ /^R-HSA-/)' edited_Hemostasis_R_HSA_109582.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Hemostasis.txt
awk '($0 ~ /^R-HSA-/)' edited_Hemostasis_R_HSA_109582.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Hemostasis.sh

#take tree_Hemostasis.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Hemostasis.sh;
vi srch_oncokb_Hemostasis.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Hemostasis.sh srch_bmomim_Hemostasis.sh
vi srch_bmomim_Hemostasis.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Hemostasis.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Hemostasis.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Hemostasis.txt; the output file, fortabuln_hier_oncokb_Hemostasis.txt, must be 
#taken to windows and used as a companion to tree_Hemostasis.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Hemostasis_R_HSA_109582.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Hemostasis.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Hemostasis |" >> fortabuln_hier_oncokb_Hemostasis.txt
sh srch_oncokb_Hemostasis.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Hemostasis.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Hemostasis.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Hemostasis.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Hemostasis.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Hemostasis.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Hemostasis.txt; the output file, fortabuln_hier_bmomim_Hemostasis.txt, must be 
#taken to windows and used as a companion to tree_Hemostasis.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Hemostasis_R_HSA_109582.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Hemostasis.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Hemostasis |" >> fortabuln_hier_bmomim_Hemostasis.txt
sh srch_bmomim_Hemostasis.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Hemostasis.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Hemostasis.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Hemostasis.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Hemostasis.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Hemostasis.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Hemostasis.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Hemostasis

--------------------------------------------------

#Immune System

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

###getting the hierarchy tree for a top-level pway; 
###the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt
###has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
###to pwd and remove quotation marks;

#copying Immune_System_R_HSA_168256.txt to pwd because the file has quotation marks, which need to be removed;  
cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Immune_System_R_HSA_168256.txt edited_Immune_System_R_HSA_168256.txt 
vi edited_Immune_System_R_HSA_168256.txt 
#:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' edited_Immune_System_R_HSA_168256.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' edited_Immune_System_R_HSA_168256.txt 

awk '($0 ~ /^R-HSA-/)' edited_Immune_System_R_HSA_168256.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Immune_System.txt
awk '($0 ~ /^R-HSA-/)' edited_Immune_System_R_HSA_168256.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Immune_System.sh

#take tree_Immune_System.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Immune_System.sh;
vi srch_oncokb_Immune_System.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Immune_System.sh srch_bmomim_Immune_System.sh
vi srch_bmomim_Immune_System.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Immune_System.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Immune_System.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Immune_System.txt; the output file, fortabuln_hier_oncokb_Immune_System.txt, must be 
#taken to windows and used as a companion to tree_Immune_System.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Immune_System_R_HSA_168256.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Immune_System.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Immune System |" >> fortabuln_hier_oncokb_Immune_System.txt
sh srch_oncokb_Immune_System.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Immune_System.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Immune_System.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Immune_System.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Immune_System.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Immune_System.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Immune_System.txt; the output file, fortabuln_hier_bmomim_Immune_System.txt, must be 
#taken to windows and used as a companion to tree_Immune_System.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Immune_System_R_HSA_168256.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Immune_System.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Immune System |" >> fortabuln_hier_bmomim_Immune_System.txt
sh srch_bmomim_Immune_System.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Immune_System.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Immune_System.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Immune_System.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Immune_System.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Immune_System.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Immune_System.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Immune_System

--------------------------------------------------

#Metabolism

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

###getting the hierarchy tree for a top-level pway; 
###the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt
###has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
###to pwd and remove quotation marks;

#copying Metabolism_R_HSA_1430728.txt to pwd because the file has quotation marks, which need to be removed;  
cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Metabolism_R_HSA_1430728.txt edited_Metabolism_R_HSA_1430728.txt 
vi edited_Metabolism_R_HSA_1430728.txt 
#:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' edited_Metabolism_R_HSA_1430728.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' edited_Metabolism_R_HSA_1430728.txt 

awk '($0 ~ /^R-HSA-/)' edited_Metabolism_R_HSA_1430728.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Metabolism.txt
awk '($0 ~ /^R-HSA-/)' edited_Metabolism_R_HSA_1430728.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Metabolism.sh

#take tree_Metabolism.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Metabolism.sh;
vi srch_oncokb_Metabolism.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Metabolism.sh srch_bmomim_Metabolism.sh
vi srch_bmomim_Metabolism.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Metabolism.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Metabolism.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Metabolism.txt; the output file, fortabuln_hier_oncokb_Metabolism.txt, must be 
#taken to windows and used as a companion to tree_Metabolism.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Metabolism_R_HSA_1430728.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Metabolism.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Metabolism |" >> fortabuln_hier_oncokb_Metabolism.txt
sh srch_oncokb_Metabolism.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Metabolism.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Metabolism.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Metabolism.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Metabolism.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Metabolism.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Metabolism.txt; the output file, fortabuln_hier_bmomim_Metabolism.txt, must be 
#taken to windows and used as a companion to tree_Metabolism.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Metabolism_R_HSA_1430728.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Metabolism.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Metabolism |" >> fortabuln_hier_bmomim_Metabolism.txt
sh srch_bmomim_Metabolism.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Metabolism.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Metabolism.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Metabolism.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Metabolism.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Metabolism.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Metabolism.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Metabolism

--------------------------------------------------

#Metabolism of proteins

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

###getting the hierarchy tree for a top-level pway; 
###the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt
###has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
###to pwd and remove quotation marks;

#copying Metabolism_of_proteins_R_HSA_392499.txt to pwd because the file has quotation marks, which need to be removed;  
cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Metabolism_of_proteins_R_HSA_392499.txt edited_Metabolism_of_proteins_R_HSA_392499.txt 
vi edited_Metabolism_of_proteins_R_HSA_392499.txt 
#:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' edited_Metabolism_of_proteins_R_HSA_392499.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' edited_Metabolism_of_proteins_R_HSA_392499.txt 

awk '($0 ~ /^R-HSA-/)' edited_Metabolism_of_proteins_R_HSA_392499.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Metabolism_of_proteins.txt
awk '($0 ~ /^R-HSA-/)' edited_Metabolism_of_proteins_R_HSA_392499.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Metabolism_of_proteins.sh

#take tree_Metabolism_of_proteins.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Metabolism_of_proteins.sh;
vi srch_oncokb_Metabolism_of_proteins.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Metabolism_of_proteins.sh srch_bmomim_Metabolism_of_proteins.sh
vi srch_bmomim_Metabolism_of_proteins.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Metabolism_of_proteins.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Metabolism_of_proteins.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Metabolism_of_proteins.txt; the output file, fortabuln_hier_oncokb_Metabolism_of_proteins.txt, must be 
#taken to windows and used as a companion to tree_Metabolism_of_proteins.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Metabolism_of_proteins_R_HSA_392499.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Metabolism_of_proteins.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Metabolism of proteins |" >> fortabuln_hier_oncokb_Metabolism_of_proteins.txt
sh srch_oncokb_Metabolism_of_proteins.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Metabolism_of_proteins.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Metabolism_of_proteins.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Metabolism_of_proteins.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Metabolism_of_proteins.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Metabolism_of_proteins.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Metabolism_of_proteins.txt; the output file, fortabuln_hier_bmomim_Metabolism_of_proteins.txt, must be 
#taken to windows and used as a companion to tree_Metabolism_of_proteins.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Metabolism_of_proteins_R_HSA_392499.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Metabolism_of_proteins.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Metabolism of proteins |" >> fortabuln_hier_bmomim_Metabolism_of_proteins.txt
sh srch_bmomim_Metabolism_of_proteins.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Metabolism_of_proteins.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Metabolism_of_proteins.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Metabolism_of_proteins.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Metabolism_of_proteins.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Metabolism_of_proteins.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Metabolism_of_proteins.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Metabolism_of_proteins

--------------------------------------------------

#Metabolism of RNA

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

###getting the hierarchy tree for a top-level pway; 
###the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt
###has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
###to pwd and remove quotation marks;

#copying Metabolism_of_RNA_R_HSA_8953854.txt to pwd because the file has quotation marks, which need to be removed;  
cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Metabolism_of_RNA_R_HSA_8953854.txt edited_Metabolism_of_RNA_R_HSA_8953854.txt 
vi edited_Metabolism_of_RNA_R_HSA_8953854.txt 
#:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' edited_Metabolism_of_RNA_R_HSA_8953854.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' edited_Metabolism_of_RNA_R_HSA_8953854.txt 

awk '($0 ~ /^R-HSA-/)' edited_Metabolism_of_RNA_R_HSA_8953854.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Metabolism_of_RNA.txt
awk '($0 ~ /^R-HSA-/)' edited_Metabolism_of_RNA_R_HSA_8953854.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Metabolism_of_RNA.sh

#the file above, srch_oncokb_Metabolism_of_RNA.sh, contains parentheses or '()' and single quotes ('); these cause 
#trouble while running srch_oncokb_Disease.sh; octal or hexadecimal escape sequences can be used instead
#of the single quote or parentheses characters;  
#octal escape sequence for single quote            = \047
#hexadecimal escape sequence for single quote      = \x27
#hence, editing above file to replace single quote by octal escape sequence \047;
#replacing single quote alone seems to work; hence, no need to replace left and right
#parentheses with octal sequences;
vi srch_oncokb_Metabolism_of_RNA.sh
#/'    
#:1,$s/'/\\047/g
#:wq


#take tree_Metabolism_of_RNA.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Metabolism_of_RNA.sh;
vi srch_oncokb_Metabolism_of_RNA.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Metabolism_of_RNA.sh srch_bmomim_Metabolism_of_RNA.sh
vi srch_bmomim_Metabolism_of_RNA.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Metabolism_of_RNA.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Metabolism_of_RNA.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Metabolism_of_RNA.txt; the output file, fortabuln_hier_oncokb_Metabolism_of_RNA.txt, must be 
#taken to windows and used as a companion to tree_Metabolism_of_RNA.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Metabolism_of_RNA_R_HSA_8953854.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Metabolism_of_RNA.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Metabolism of RNA |" >> fortabuln_hier_oncokb_Metabolism_of_RNA.txt
sh srch_oncokb_Metabolism_of_RNA.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Metabolism_of_RNA.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Metabolism_of_RNA.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Metabolism_of_RNA.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Metabolism_of_RNA.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Metabolism_of_RNA.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Metabolism_of_RNA.txt; the output file, fortabuln_hier_bmomim_Metabolism_of_RNA.txt, must be 
#taken to windows and used as a companion to tree_Metabolism_of_RNA.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Metabolism_of_RNA_R_HSA_8953854.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Metabolism_of_RNA.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Metabolism of RNA |" >> fortabuln_hier_bmomim_Metabolism_of_RNA.txt
sh srch_bmomim_Metabolism_of_RNA.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Metabolism_of_RNA.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Metabolism_of_RNA.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Metabolism_of_RNA.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Metabolism_of_RNA.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Metabolism_of_RNA.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Metabolism_of_RNA.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Metabolism_of_RNA

--------------------------------------------------

#Muscle contraction

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

##getting the hierarchy tree for a top-level pway; 
##the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Muscle_contraction_R_HSA_397014.txt
##has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
##to pwd and remove quotation marks;
##copying Cell_Cycle_R_HSA_1640170.txt to pwd because the file has quotation marks,
##which need to be removed (e.g., "Cell Cycle, Mitotic" (R-HSA-69278));
##there were quotation marks in Autophagy_R_HSA_9612973.txt, too, but they were only in the reaction
##part, and did not interfere with execution of commands;

####cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cycle_R_HSA_1640170.txt edited_Cell_Cycle_R_HSA_1640170.txt
####vi edited_Cell_Cycle_R_HSA_1640170.txt
####:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Muscle_contraction_R_HSA_397014.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Muscle_contraction_R_HSA_397014.txt 

awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Muscle_contraction_R_HSA_397014.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Muscle_contraction.txt
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Muscle_contraction_R_HSA_397014.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Muscle_contraction.sh

#take tree_Muscle_contraction.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Muscle_contraction.sh;
vi srch_oncokb_Muscle_contraction.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Muscle_contraction.sh srch_bmomim_Muscle_contraction.sh
vi srch_bmomim_Muscle_contraction.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Muscle_contraction.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Muscle_contraction.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Muscle_contraction.txt; the output file, fortabuln_hier_oncokb_Muscle_contraction.txt, must be 
#taken to windows and used as a companion to tree_Muscle_contraction.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Muscle_contraction_R_HSA_397014.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Muscle_contraction.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Muscle contraction |" >> fortabuln_hier_oncokb_Muscle_contraction.txt
sh srch_oncokb_Muscle_contraction.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Muscle_contraction.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Muscle_contraction.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Muscle_contraction.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Muscle_contraction.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Muscle_contraction.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Muscle_contraction.txt; the output file, fortabuln_hier_bmomim_Muscle_contraction.txt, must be 
#taken to windows and used as a companion to tree_Muscle_contraction.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Muscle_contraction_R_HSA_397014.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Muscle_contraction.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Muscle contraction |" >> fortabuln_hier_bmomim_Muscle_contraction.txt
sh srch_bmomim_Muscle_contraction.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Muscle_contraction.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Muscle_contraction.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Muscle_contraction.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Muscle_contraction.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Muscle_contraction.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Muscle_contraction.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Muscle_contraction

--------------------------------------------------

#Neuronal System

#Neuronal_System_R_HSA_112316.txt

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

###getting the hierarchy tree for a top-level pway; 
###the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt
###has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
###to pwd and remove quotation marks;

#copying Neuronal_System_R_HSA_112316.txt to pwd because the file has quotation marks, which need to be removed;  
cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Neuronal_System_R_HSA_112316.txt edited_Neuronal_System_R_HSA_112316.txt 
vi edited_Neuronal_System_R_HSA_112316.txt 
#:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' edited_Neuronal_System_R_HSA_112316.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' edited_Neuronal_System_R_HSA_112316.txt 

awk '($0 ~ /^R-HSA-/)' edited_Neuronal_System_R_HSA_112316.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Neuronal_System.txt
awk '($0 ~ /^R-HSA-/)' edited_Neuronal_System_R_HSA_112316.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Neuronal_System.sh

#take tree_Neuronal_System.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Neuronal_System.sh;
vi srch_oncokb_Neuronal_System.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Neuronal_System.sh srch_bmomim_Neuronal_System.sh
vi srch_bmomim_Neuronal_System.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Neuronal_System.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Neuronal_System.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Neuronal_System.txt; the output file, fortabuln_hier_oncokb_Neuronal_System.txt, must be 
#taken to windows and used as a companion to tree_Neuronal_System.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Neuronal_System_R_HSA_112316.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Neuronal_System.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Neuronal System |" >> fortabuln_hier_oncokb_Neuronal_System.txt
sh srch_oncokb_Neuronal_System.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Neuronal_System.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Neuronal_System.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Neuronal_System.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Neuronal_System.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Neuronal_System.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Neuronal_System.txt; the output file, fortabuln_hier_bmomim_Neuronal_System.txt, must be 
#taken to windows and used as a companion to tree_Neuronal_System.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Neuronal_System_R_HSA_112316.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Neuronal_System.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Neuronal System |" >> fortabuln_hier_bmomim_Neuronal_System.txt
sh srch_bmomim_Neuronal_System.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Neuronal_System.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Neuronal_System.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Neuronal_System.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Neuronal_System.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Neuronal_System.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Neuronal_System.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Neuronal_System

--------------------------------------------------

#Organelle biogenesis and maintenance 

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

##getting the hierarchy tree for a top-level pway; 
##the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Organelle_biogenesis_and_maintenance_R_HSA_1852241.txt
##has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
##to pwd and remove quotation marks;
##copying Cell_Cycle_R_HSA_1640170.txt to pwd because the file has quotation marks,
##which need to be removed (e.g., "Cell Cycle, Mitotic" (R-HSA-69278));
##there were quotation marks in Autophagy_R_HSA_9612973.txt, too, but they were only in the reaction
##part, and did not interfere with execution of commands;

####cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cycle_R_HSA_1640170.txt edited_Cell_Cycle_R_HSA_1640170.txt
####vi edited_Cell_Cycle_R_HSA_1640170.txt
####:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Organelle_biogenesis_and_maintenance_R_HSA_1852241.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Organelle_biogenesis_and_maintenance_R_HSA_1852241.txt 

awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Organelle_biogenesis_and_maintenance_R_HSA_1852241.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Organelle_biogenesis_and_maintenance.txt
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Organelle_biogenesis_and_maintenance_R_HSA_1852241.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Organelle_biogenesis_and_maintenance.sh

#take tree_Organelle_biogenesis_and_maintenance.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Organelle_biogenesis_and_maintenance.sh;
vi srch_oncokb_Organelle_biogenesis_and_maintenance.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Organelle_biogenesis_and_maintenance.sh srch_bmomim_Organelle_biogenesis_and_maintenance.sh
vi srch_bmomim_Organelle_biogenesis_and_maintenance.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Organelle_biogenesis_and_maintenance.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Organelle_biogenesis_and_maintenance.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Organelle_biogenesis_and_maintenance.txt; the output file, fortabuln_hier_oncokb_Organelle_biogenesis_and_maintenance.txt, must be 
#taken to windows and used as a companion to tree_Organelle_biogenesis_and_maintenance.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Organelle_biogenesis_and_maintenance_R_HSA_1852241.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Organelle_biogenesis_and_maintenance.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Organelle biogenesis and maintenance |" >> fortabuln_hier_oncokb_Organelle_biogenesis_and_maintenance.txt
sh srch_oncokb_Organelle_biogenesis_and_maintenance.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Organelle_biogenesis_and_maintenance.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Organelle_biogenesis_and_maintenance.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Organelle_biogenesis_and_maintenance.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Organelle_biogenesis_and_maintenance.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Organelle_biogenesis_and_maintenance.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Organelle_biogenesis_and_maintenance.txt; the output file, fortabuln_hier_bmomim_Organelle_biogenesis_and_maintenance.txt, must be 
#taken to windows and used as a companion to tree_Organelle_biogenesis_and_maintenance.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Organelle_biogenesis_and_maintenance_R_HSA_1852241.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Organelle_biogenesis_and_maintenance.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Organelle biogenesis and maintenance |" >> fortabuln_hier_bmomim_Organelle_biogenesis_and_maintenance.txt
sh srch_bmomim_Organelle_biogenesis_and_maintenance.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Organelle_biogenesis_and_maintenance.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Organelle_biogenesis_and_maintenance.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Organelle_biogenesis_and_maintenance.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Organelle_biogenesis_and_maintenance.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Organelle_biogenesis_and_maintenance.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Organelle_biogenesis_and_maintenance.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Organelle_biogensis_maintenance

--------------------------------------------------

#Programmed Cell Death 

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

###getting the hierarchy tree for a top-level pway; 
###the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt
###has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
###to pwd and remove quotation marks;

#copying Programmed_Cell_Death_R_HSA_5357801.txt to pwd because the file has quotation marks, which need to be removed;  
cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Programmed_Cell_Death_R_HSA_5357801.txt edited_Programmed_Cell_Death_R_HSA_5357801.txt 
vi edited_Programmed_Cell_Death_R_HSA_5357801.txt 
#:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' edited_Programmed_Cell_Death_R_HSA_5357801.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' edited_Programmed_Cell_Death_R_HSA_5357801.txt 

awk '($0 ~ /^R-HSA-/)' edited_Programmed_Cell_Death_R_HSA_5357801.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Programmed_Cell_Death.txt
awk '($0 ~ /^R-HSA-/)' edited_Programmed_Cell_Death_R_HSA_5357801.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Programmed_Cell_Death.sh

#take tree_Programmed_Cell_Death.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Programmed_Cell_Death.sh;
vi srch_oncokb_Programmed_Cell_Death.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Programmed_Cell_Death.sh srch_bmomim_Programmed_Cell_Death.sh
vi srch_bmomim_Programmed_Cell_Death.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Programmed_Cell_Death.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Programmed_Cell_Death.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Programmed_Cell_Death.txt; the output file, fortabuln_hier_oncokb_Programmed_Cell_Death.txt, must be 
#taken to windows and used as a companion to tree_Programmed_Cell_Death.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Programmed_Cell_Death_R_HSA_5357801.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Programmed_Cell_Death.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Programmed Cell Death |" >> fortabuln_hier_oncokb_Programmed_Cell_Death.txt
sh srch_oncokb_Programmed_Cell_Death.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Programmed_Cell_Death.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Programmed_Cell_Death.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Programmed_Cell_Death.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Programmed_Cell_Death.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Programmed_Cell_Death.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Programmed_Cell_Death.txt; the output file, fortabuln_hier_bmomim_Programmed_Cell_Death.txt, must be 
#taken to windows and used as a companion to tree_Programmed_Cell_Death.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Programmed_Cell_Death_R_HSA_5357801.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Programmed_Cell_Death.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Programmed Cell Death |" >> fortabuln_hier_bmomim_Programmed_Cell_Death.txt
sh srch_bmomim_Programmed_Cell_Death.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Programmed_Cell_Death.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Programmed_Cell_Death.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Programmed_Cell_Death.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Programmed_Cell_Death.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Programmed_Cell_Death.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Programmed_Cell_Death.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Programmed_Cell_Death

--------------------------------------------------

#Protein localization

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

##getting the hierarchy tree for a top-level pway; 
##the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Protein_localization_R_HSA_9609507.txt
##has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
##to pwd and remove quotation marks;
##copying Cell_Cycle_R_HSA_1640170.txt to pwd because the file has quotation marks,
##which need to be removed (e.g., "Cell Cycle, Mitotic" (R-HSA-69278));
##there were quotation marks in Autophagy_R_HSA_9612973.txt, too, but they were only in the reaction
##part, and did not interfere with execution of commands;

####cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cycle_R_HSA_1640170.txt edited_Cell_Cycle_R_HSA_1640170.txt
####vi edited_Cell_Cycle_R_HSA_1640170.txt
####:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Protein_localization_R_HSA_9609507.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Protein_localization_R_HSA_9609507.txt 

awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Protein_localization_R_HSA_9609507.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Protein_localization.txt
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Protein_localization_R_HSA_9609507.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Protein_localization.sh

#take tree_Protein_localization.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Protein_localization.sh;
vi srch_oncokb_Protein_localization.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Protein_localization.sh srch_bmomim_Protein_localization.sh
vi srch_bmomim_Protein_localization.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Protein_localization.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Protein_localization.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Protein_localization.txt; the output file, fortabuln_hier_oncokb_Protein_localization.txt, must be 
#taken to windows and used as a companion to tree_Protein_localization.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Protein_localization_R_HSA_9609507.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Protein_localization.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Protein localization |" >> fortabuln_hier_oncokb_Protein_localization.txt
sh srch_oncokb_Protein_localization.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Protein_localization.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Protein_localization.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Protein_localization.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Protein_localization.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Protein_localization.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Protein_localization.txt; the output file, fortabuln_hier_bmomim_Protein_localization.txt, must be 
#taken to windows and used as a companion to tree_Protein_localization.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Protein_localization_R_HSA_9609507.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Protein_localization.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Protein localization |" >> fortabuln_hier_bmomim_Protein_localization.txt
sh srch_bmomim_Protein_localization.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Protein_localization.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Protein_localization.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Protein_localization.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Protein_localization.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Protein_localization.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Protein_localization.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Protein_localization

--------------------------------------------------

#Reproduction

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

##getting the hierarchy tree for a top-level pway; 
##the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Reproduction_R_HSA_1474165.txt
##has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
##to pwd and remove quotation marks;
##copying Cell_Cycle_R_HSA_1640170.txt to pwd because the file has quotation marks,
##which need to be removed (e.g., "Cell Cycle, Mitotic" (R-HSA-69278));
##there were quotation marks in Autophagy_R_HSA_9612973.txt, too, but they were only in the reaction
##part, and did not interfere with execution of commands;

####cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cycle_R_HSA_1640170.txt edited_Cell_Cycle_R_HSA_1640170.txt
####vi edited_Cell_Cycle_R_HSA_1640170.txt
####:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Reproduction_R_HSA_1474165.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Reproduction_R_HSA_1474165.txt 

awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Reproduction_R_HSA_1474165.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Reproduction.txt
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Reproduction_R_HSA_1474165.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Reproduction.sh

#take tree_Reproduction.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Reproduction.sh;
vi srch_oncokb_Reproduction.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Reproduction.sh srch_bmomim_Reproduction.sh
vi srch_bmomim_Reproduction.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Reproduction.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Reproduction.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Reproduction.txt; the output file, fortabuln_hier_oncokb_Reproduction.txt, must be 
#taken to windows and used as a companion to tree_Reproduction.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Reproduction_R_HSA_1474165.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Reproduction.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Reproduction |" >> fortabuln_hier_oncokb_Reproduction.txt
sh srch_oncokb_Reproduction.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Reproduction.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Reproduction.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Reproduction.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Reproduction.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Reproduction.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Reproduction.txt; the output file, fortabuln_hier_bmomim_Reproduction.txt, must be 
#taken to windows and used as a companion to tree_Reproduction.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Reproduction_R_HSA_1474165.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Reproduction.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Reproduction |" >> fortabuln_hier_bmomim_Reproduction.txt
sh srch_bmomim_Reproduction.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Reproduction.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Reproduction.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Reproduction.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Reproduction.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Reproduction.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Reproduction.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Reproduction

--------------------------------------------------

#Sensory Perception

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

###getting the hierarchy tree for a top-level pway; 
###the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt
###has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
###to pwd and remove quotation marks;

#copying Sensory_Perception_R_HSA_9709957.txt to pwd because the file has quotation marks, which need to be removed;  
cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Sensory_Perception_R_HSA_9709957.txt edited_Sensory_Perception_R_HSA_9709957.txt 
vi edited_Sensory_Perception_R_HSA_9709957.txt 
#:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' edited_Sensory_Perception_R_HSA_9709957.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' edited_Sensory_Perception_R_HSA_9709957.txt 

awk '($0 ~ /^R-HSA-/)' edited_Sensory_Perception_R_HSA_9709957.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Sensory_Perception.txt
awk '($0 ~ /^R-HSA-/)' edited_Sensory_Perception_R_HSA_9709957.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Sensory_Perception.sh

#take tree_Sensory_Perception.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Sensory_Perception.sh;
vi srch_oncokb_Sensory_Perception.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Sensory_Perception.sh srch_bmomim_Sensory_Perception.sh
vi srch_bmomim_Sensory_Perception.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Sensory_Perception.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Sensory_Perception.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Sensory_Perception.txt; the output file, fortabuln_hier_oncokb_Sensory_Perception.txt, must be 
#taken to windows and used as a companion to tree_Sensory_Perception.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Sensory_Perception_R_HSA_9709957.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Sensory_Perception.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Sensory Perception |" >> fortabuln_hier_oncokb_Sensory_Perception.txt
sh srch_oncokb_Sensory_Perception.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Sensory_Perception.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Sensory_Perception.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Sensory_Perception.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Sensory_Perception.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Sensory_Perception.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Sensory_Perception.txt; the output file, fortabuln_hier_bmomim_Sensory_Perception.txt, must be 
#taken to windows and used as a companion to tree_Sensory_Perception.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Sensory_Perception_R_HSA_9709957.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Sensory_Perception.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Sensory Perception |" >> fortabuln_hier_bmomim_Sensory_Perception.txt
sh srch_bmomim_Sensory_Perception.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Sensory_Perception.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Sensory_Perception.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Sensory_Perception.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Sensory_Perception.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Sensory_Perception.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Sensory_Perception.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Sensory_Perception

--------------------------------------------------

#Signal Transduction

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

###getting the hierarchy tree for a top-level pway; 
###the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt
###has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
###to pwd and remove quotation marks;
#copying Signal_Transduction_R_HSA_162582.txt to pwd because the file has quotation marks, which need to be removed;  
#there were quotation marks in Autophagy_R_HSA_9612973.txt, too, but they were only in the reaction
#part, and did not interfere with execution of commands;

cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Signal_Transduction_R_HSA_162582.txt edited_Signal_Transduction_R_HSA_162582.txt 
vi edited_Signal_Transduction_R_HSA_162582.txt 
#:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' edited_Signal_Transduction_R_HSA_162582.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' edited_Signal_Transduction_R_HSA_162582.txt 

awk '($0 ~ /^R-HSA-/)' edited_Signal_Transduction_R_HSA_162582.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Signal_Transduction.txt
awk '($0 ~ /^R-HSA-/)' edited_Signal_Transduction_R_HSA_162582.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Signal_Transduction.sh

#the file above, srch_oncokb_Signal_Transduction.sh, contains parentheses or '()' and single quotes ('); these cause 
#trouble while running srch_oncokb_Signal_Transduction.sh; octal or hexadecimal escape sequences can be used instead
#of the single quote or parentheses characters;  
#octal escape sequence for single quote            = \047
#octal escape sequence for left parenthesis        = \050
#octal escape sequence for right parenthesis       = \051
#hexadecimal escape sequence for single quote      = \x27
#hexadecimal escape sequence for left parenthesis  = \x28
#hexadecimal escape sequence for right parenthesis = \x29
#hence, editing above file to replace single quote by octal escape sequence \047;
#replacing single quote alone seems to work; hence, no need to replace left and right
#parentheses with octal sequences;
#replacing the single quote with the hexadecimal escape sequence \x27 also works just as well;
vi srch_oncokb_Signal_Transduction.sh
#/'    #shows that there are 6 instances of single quote (aren't, doesn't, Alzheimer's)
#:1,$s/'/\\047/g
#:wq


#take tree_Signal_Transduction.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Signal_Transduction.sh;
vi srch_oncokb_Signal_Transduction.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Signal_Transduction.sh srch_bmomim_Signal_Transduction.sh
vi srch_bmomim_Signal_Transduction.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Signal_Transduction.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Signal_Transduction.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Signal_Transduction.txt; the output file, fortabuln_hier_oncokb_Signal_Transduction.txt, must be 
#taken to windows and used as a companion to tree_Signal_Transduction.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Signal_Transduction_R_HSA_162582.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Signal_Transduction.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Signal Transduction |" >> fortabuln_hier_oncokb_Signal_Transduction.txt
sh srch_oncokb_Signal_Transduction.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Signal_Transduction.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Signal_Transduction.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Signal_Transduction.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Signal_Transduction.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Signal_Transduction.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Signal_Transduction.txt; the output file, fortabuln_hier_bmomim_Signal_Transduction.txt, must be 
#taken to windows and used as a companion to tree_Signal_Transduction.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Signal_Transduction_R_HSA_162582.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Signal_Transduction.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Signal Transduction |" >> fortabuln_hier_bmomim_Signal_Transduction.txt
sh srch_bmomim_Signal_Transduction.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Signal_Transduction.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Signal_Transduction.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Signal_Transduction.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Signal_Transduction.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Signal_Transduction.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Signal_Transduction.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Signal_Transduction

--------------------------------------------------

#Transport of small molecules

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

###getting the hierarchy tree for a top-level pway; 
###the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Chromatin_organization_R_HSA_4839726.txt
###has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
###to pwd and remove quotation marks;

#copying Transport_of_small_molecules_R_HSA_382551.txt to pwd because the file has quotation marks, which need to be removed;  
cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Transport_of_small_molecules_R_HSA_382551.txt edited_Transport_of_small_molecules_R_HSA_382551.txt 
vi edited_Transport_of_small_molecules_R_HSA_382551.txt 
#:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' edited_Transport_of_small_molecules_R_HSA_382551.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' edited_Transport_of_small_molecules_R_HSA_382551.txt 

awk '($0 ~ /^R-HSA-/)' edited_Transport_of_small_molecules_R_HSA_382551.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Transport_of_small_molecules.txt
awk '($0 ~ /^R-HSA-/)' edited_Transport_of_small_molecules_R_HSA_382551.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Transport_of_small_molecules.sh

#take tree_Transport_of_small_molecules.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Transport_of_small_molecules.sh;
vi srch_oncokb_Transport_of_small_molecules.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Transport_of_small_molecules.sh srch_bmomim_Transport_of_small_molecules.sh
vi srch_bmomim_Transport_of_small_molecules.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Transport_of_small_molecules.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Transport_of_small_molecules.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Transport_of_small_molecules.txt; the output file, fortabuln_hier_oncokb_Transport_of_small_molecules.txt, must be 
#taken to windows and used as a companion to tree_Transport_of_small_molecules.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Transport_of_small_molecules_R_HSA_382551.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Transport_of_small_molecules.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Transport of small_molecules |" >> fortabuln_hier_oncokb_Transport_of_small_molecules.txt
sh srch_oncokb_Transport_of_small_molecules.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Transport_of_small_molecules.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Transport_of_small_molecules.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Transport_of_small_molecules.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Transport_of_small_molecules.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Transport_of_small_molecules.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Transport_of_small_molecules.txt; the output file, fortabuln_hier_bmomim_Transport_of_small_molecules.txt, must be 
#taken to windows and used as a companion to tree_Transport_of_small_molecules.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' edited_Transport_of_small_molecules_R_HSA_382551.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Transport_of_small_molecules.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Transport of small molecules |" >> fortabuln_hier_bmomim_Transport_of_small_molecules.txt
sh srch_bmomim_Transport_of_small_molecules.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Transport_of_small_molecules.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Transport_of_small_molecules.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Transport_of_small_molecules.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Transport_of_small_molecules.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Transport_of_small_molecules.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Transport_of_small_molecules.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Transport_of_small_molecules

--------------------------------------------------

#Vesicle mediated transport

Vesicle_mediated_transport_R_HSA_5653656.txt

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

##getting the hierarchy tree for a top-level pway; 
##the file /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Vesicle_mediated_transport_R_HSA_5653656.txt
##has quotation marks only in the last or reaction col; these should not cause trouble; hence, no need to copy file 
##to pwd and remove quotation marks;
##copying Cell_Cycle_R_HSA_1640170.txt to pwd because the file has quotation marks,
##which need to be removed (e.g., "Cell Cycle, Mitotic" (R-HSA-69278));
##there were quotation marks in Autophagy_R_HSA_9612973.txt, too, but they were only in the reaction
##part, and did not interfere with execution of commands;

####cp /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Cell_Cycle_R_HSA_1640170.txt edited_Cell_Cycle_R_HSA_1640170.txt
####vi edited_Cell_Cycle_R_HSA_1640170.txt
####:1,$s/"//g

#awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Vesicle_mediated_transport_R_HSA_5653656.txt | sort | more
#awk '($0 !~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Vesicle_mediated_transport_R_HSA_5653656.txt 

awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Vesicle_mediated_transport_R_HSA_5653656.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq -c | sed -e 's/^[ ]\{2,8\}//' -e 's/ /|/' | sed -e 's/||//' | awk -F"|" '{IFS=OFS="|"}{printf $1 OFS; {for (i=3; i<=NF; i+=2) printf $i " (" $(i-1) ")" OFS} print ""}' > tree_Vesicle_mediated_transport.txt
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Vesicle_mediated_transport_R_HSA_5653656.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq  > srch_oncokb_Vesicle_mediated_transport.sh

#take tree_Vesicle_mediated_transport.txt to windows;

#foll cmds need to be executed only once; they have already been executed above, for Autophagy;
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '1,24538p' > pways_for_each_oncokb862_gene.txt
#sed -e 's/\(R-HSA-[0-9]\{5,8\}\) /\1|/g' -e 's/ \(R-HSA-[0-9]\{5,8\}\)/|\1/g' /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt | sed -n '24540,$p' > pways_for_each_bmomim324_gene.txt


#edited srch_oncokb_Vesicle_mediated_transport.sh;
vi srch_oncokb_Vesicle_mediated_transport.sh
#:1,$s/^/|/
#:1,$s/^/awk -F"[|\\t]" '{OFS="|"}{savgenenm = \$1; savnf_1 = \$(NF-1); savnf = \$NF; \$1 = ""; \$(NF-1)=""; \$NF=""; line = \$0; {if(line == "/
#:1,$s/$/") print savgenenm line savnf_1 OFS savnf}}' pways_for_each_oncokb862_gene.txt/

cp srch_oncokb_Vesicle_mediated_transport.sh srch_bmomim_Vesicle_mediated_transport.sh
vi srch_bmomim_Vesicle_mediated_transport.sh
#:1,$s/oncokb862/bmomim324/

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_oncokb_Vesicle_mediated_transport.sh
#foll cmd gives hierarchies, the number of oncokb genes participating in each hierarchy, it lists out the 
#oncokb genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_oncokb_Vesicle_mediated_transport.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt

#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Vesicle_mediated_transport.txt; the output file, fortabuln_hier_oncokb_Vesicle_mediated_transport.txt, must be 
#taken to windows and used as a companion to tree_Vesicle_mediated_transport.txt, to complete the table for oncokb genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and adjust gene 
#rows to account for hierarchies in which no oncokb genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Vesicle_mediated_transport_R_HSA_5653656.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_oncokb_Vesicle_mediated_transport.txt

#the foll cmds append the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Vesicle mediated transport |" >> fortabuln_hier_oncokb_Vesicle_mediated_transport.txt
sh srch_oncokb_Vesicle_mediated_transport.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_oncokb_Vesicle_mediated_transport.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_oncokb_Vesicle_mediated_transport.txt > temp3.txt
cp temp3.txt fortabuln_hier_oncokb_Vesicle_mediated_transport.txt


#generating files for bmomim part; 

#Notes: There is one tree file, but 2 fortabuln files; one fortabuln file each for oncokb and 
#bmomim genes; one has to keep in mind that there are genes which are common to oncokb and omim; 
#the genes which are NOT COMMON to both are being considered below;

#foll cmd gives hierarchy + reactions; maybe useful for checking
sh srch_bmomim_Vesicle_mediated_transport.sh

#foll cmd gives hierarchies, the number of bmomim genes participating in each hierarchy, it lists out the 
#bmomim genes participating in each hierarchy, and the number of reactions each gene participates in; 
sh srch_bmomim_Vesicle_mediated_transport.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > temp1.txt
#the foll cmds rearrange the hierarchies in the above output (temp1.txt) into the order in which 
#they appear in tree_Vesicle_mediated_transport.txt; the output file, fortabuln_hier_bmomim_Vesicle_mediated_transport.txt, must be 
#taken to windows and used as a companion to tree_Vesicle_mediated_transport.txt, to complete the table for bmomim genes; 
#Note: while including the genes for each hierarchy in xl, you have to manually check and the adjust gene 
#rows to account for hierarchies in which no bmomim genes occur; 
awk '($0 ~ /^R-HSA-/)' /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/Vesicle_mediated_transport_R_HSA_5653656.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' > temp2.sh
vi temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq
sh temp2.sh > fortabuln_hier_bmomim_Vesicle_mediated_transport.txt

#the foll cmd appends the genes in the top-level pway, the number of reactions each gene
#participates in, and the number of genes in the top-level pway;
echo -n "\nAll oncokb or bmomim genes in top-level pathway: Vesicle mediated transport |" >> fortabuln_hier_bmomim_Vesicle_mediated_transport.txt
sh srch_bmomim_Vesicle_mediated_transport.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> fortabuln_hier_bmomim_Vesicle_mediated_transport.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' fortabuln_hier_bmomim_Vesicle_mediated_transport.txt > temp3.txt
cp temp3.txt fortabuln_hier_bmomim_Vesicle_mediated_transport.txt

#for help with counting number of nodes and relationships in superpway hierarchy, refer to 
#foll file;
more /scratch/prasannalab/cancers_in_detail/pway_anal/toplevelpways/cypherq_n_nodes_superpways.txt

#taking foll files to windows;
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Vesicle_mediated_transport.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_oncokb_Vesicle_mediated_transport.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Vesicle_mediated_transport.txt
#downloading to windows area: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways
#the files are tabulated in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = Vesicle_mediated_transport

--------------------------------------------------

ls -1 edited*
#edited_Cell_Cycle_R_HSA_1640170.txt
#edited_Circadian_Clock_R_HSA_400253.txt
#edited_Developmental_Biology_R_HSA_1266738.txt
#edited_Disease_R_HSA_1643685.txt
#edited_DNA_Repair_R_HSA_73894.txt
#edited_Gene_expression_Transcription_R_HSA_74160.txt
#edited_Hemostasis_R_HSA_109582.txt
#edited_Immune_System_R_HSA_168256.txt
#edited_Metabolism_of_proteins_R_HSA_392499.txt
#edited_Metabolism_of_RNA_R_HSA_8953854.txt
#edited_Metabolism_R_HSA_1430728.txt
#edited_Neuronal_System_R_HSA_112316.txt
#edited_Programmed_Cell_Death_R_HSA_5357801.txt
#edited_Sensory_Perception_R_HSA_9709957.txt
#edited_Signal_Transduction_R_HSA_162582.txt
#edited_Transport_of_small_molecules_R_HSA_382551.txt

#deleted edited*.txt because the files can always be regenerated;
rm edited*.txt

--------------------------------------------------

#TRYING to get pie chart of oncokb genes in each superpway;   

ls -1 fortabuln_hier_oncokb_*.txt > oncokb_fortabuln_suprpwaylst.sh
ls -1 fortabuln_hier_oncokb_*.txt > oncokb_forsorting_suprpwaylst.sh

#cp foll cmd into file: cmd_fortabuln_suprpwaygenes.sh ; 
#to run cmd at terminal include input file name, e.g., fortabuln_hier_oncokb_Autophagy.txt 
vi cmd_fortabuln_suprpwaygenes.sh
awk 'END {print}' | sed -e 's/), /\n/g' | sed -e 's/(/\t/g' | sort -k2,2rn | awk -F"\t" '($1 ~ /\|All oncokb or bmomim/){savpway = $0}($1 ~ /num_of_genes/){savstr = $1; savcount = $2} (($1 !~ /^\|All oncokb/)&&($1 !~ /num_of_genes/)){i++; a[i]=$1; b[i]=$2 } END {print savpway, savstr, savcount; for (j=1; j<=i; j++) print a[j], b[j]}' | sed -e 's/|All oncokb or bmomim genes in top-level pathway: //' -e 's/| num_of_genes //' | sed -z 's/\n/, /g' | sed -e '$a\'

#cp foll cmd into file: cmd_forsorting_suprpwaygenes.sh ;
#to run cmd at terminal include input file name, e.g., fortabuln_hier_oncokb_Autophagy.txt 
vi cmd_forsorting_suprpwaygenes.sh
awk 'END {print}' | sed -e 's/), /\n/g' | sed -e 's/(/\t/g' | sort -k2,2rn | awk -F"\t" '($1 ~ /\|All oncokb or bmomim/){savpway = $0}($1 ~ /num_of_genes/){savstr = $1; savcount = $2} (($1 !~ /^\|All oncokb/)&&($1 !~ /num_of_genes/)){i++; a[i]=$1; b[i]=$2 } END {print savpway, savstr, savcount; for (j=1; j<=i; j++) print a[j], "\t", b[j]}' | sed -e 's/|All oncokb or bmomim genes in top-level pathway: //' -e 's/| num_of_genes/\t=\t/' | awk -F"\t" '(NR == 1){pwaynm = $1; print $0} (NR>1) {print pwaynm, "\t", $2, "\t", $1}'

vi oncokb_fortabuln_suprpwaylst.sh
#:1,$s/^/sh cmd_fortabuln_suprpwaygenes.sh < /

vi oncokb_forsorting_suprpwaylst.sh
#:1,$s/^/sh cmd_forsorting_suprpwaygenes.sh < /

#in the foll cmd, the first sed part changes "Vesicle mediated transport" to "Vesicle_mediated_transport"
#the sed cmd is IMPORTANT, because, if spaces exist, as in "Vesicle mediated transport", it UPSETS the
#uniq cmd, which considers a field to be a set of chars separated by a space; the uniq cmd would consider "Vesicle", 
#"mediated" and "transport" each as a separate field, which would mess up the uniq counts; the sed cmd ensures that 
#"Vesicle_mediated_transport" is one field;   
sh oncokb_fortabuln_suprpwaylst.sh | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' -e 's/ /\t/' -e 's/, /\t/' | sort -k2,2nr > suprpway_oncokb_genes.txt


#outputs of 2 cmds below should be same; useful for checking; 
#sh oncokb_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | grep "CHEK1"
#sh oncokb_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | uniq -f 2 -D | grep "CHEK1"

#all cmds below give identical outputs;
sh oncokb_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | uniq -f 2 -D | uniq -f 2 | wc -l
563
sh oncokb_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | uniq -f 2 -d | wc -l
563
sh oncokb_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | uniq -f 2 -c | sort -k1,1rn | awk -F" " '($1 > 1)' | wc -l
563
#foll cmd is simple and familiar; i.e., it does not use uniq -f 2, -D, -d, etc.
#sh oncokb_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | cut -f3,3 | sort | uniq -c | sort -k1,1nr | awk -F" " '($1 > 1)' | wc -l
563

sh oncokb_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | uniq -f 2 -D | uniq -f 2 > multisuprpway_oncokb_genes.txt
sh oncokb_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | uniq -f 2 -D | uniq -f 2 | cut -f3,3 | sed 's/ //' > repeating_in_multisuprpway_oncokb_genes.txt
sh oncokb_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | uniq -f 2 -u | cut -f3,3 | sed 's/ //' > not_repeating_in_multisuprpway_oncokb_genes.txt
wc -l repeating_in_multisuprpway_oncokb_genes.txt not_repeating_in_multisuprpway_oncokb_genes.txt
# 563 repeating_in_multisuprpway_oncokb_genes.txt       (oncokb genes which repeat in >1 superpway)
# 291 not_repeating_in_multisuprpway_oncokb_genes.txt   (oncokb genes which do not repeat in >1 superpway;
#                                                        i.e., which occur in only one superpway)
 
# 854 total


#foll cmd was written for a version of oncokb_forsorting_suprpwaylst.sh which has been deleted; the former cmd would output 
#first col as gene, second col as n(reactions gene participates in), and third col as superpway; 
#if you wanted to do uniq on first (gene) col, but wanted to leave out cols 2 and 3 from consideration, the foll cmd would be
#useful; in the foll cmd, you use rev to reverse the order of characters in every line; 
#sh oncokb_forsorting_suprpwaylst.sh | grep -v "=" | sort -k1,1 | rev | uniq -f 2 -D | rev 

#Taking files, suprpway_oncokb_genes.txt, repeating_in_multisuprpway_oncokb_genes.txt, and 
#notrepeating_in_multisuprpway_oncokb_genes.txt to windows; 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = suprpway_oncokb_genes

#-------------------------------------------------

#how to highlight text in excel - using VBA, using kutools; installed kutools; 
#https://www.extendoffice.com/documents/excel/4826-excel-color-certain-words.html
#https://www.extendoffice.com/documents/excel/3775-excel-highlight-part-of-text-in-cell.html
#https://www.extendoffice.com/documents/excel/3775-excel-highlight-part-of-text-in-cell.html#a3

#unix notes: 
#https://stackoverflow.com/questions/2258169/uniq-skipping-last-n-characters-fields-when-comparing-lines
#uniq - skipping last N fields when comparing lines
#sort file | rev | uniq -f 2 | rev
#man rev 
#The rev utility copies the specified files to standard output, reversing the order of characters in every line.  
#       If no files are specified, standard input is read.

#https://www.geeksforgeeks.org/uniq-command-in-linux-with-examples/
#uniq
#-c – -count : It tells how many times a line was repeated by displaying a number as a prefix with the line.
#-d – -repeated : It only prints the repeated lines and not the lines which aren’t repeated.
#-D – -all-repeated[=METHOD] : It prints all duplicate lines and METHOD can be any of the following: 
#none : Do not delimit duplicate lines at all. This is the default.
#prepend : Insert a blank line before each set of duplicated lines.
#separate : Insert a blank line between each set of duplicated lines.
#e.g.,  uniq -f 2 --all-repeated=prepend ; uniq -f 2 --all-repeated=separate ;
#-f N – -skip-fields(N) : It allows you to skip N fields(a field is a group of characters, delimited by whitespace) of a line before determining the uniqueness of a line.
#-i – -ignore case : By default, comparisons done are case sensitive but with this option case insensitive comparisons can be made.
#-s N – -skip-chars(N) : It doesn’t compare the first N characters of each line while determining uniqueness. This is like the -f option, but it skips individual characters rather than fields.
#-u – -unique : It allows you to print only unique lines.

#man uniq
# -f, --skip-fields=N
#       avoid comparing the first N fields
# -D, --all-repeated[=METHOD]
#       print all duplicate lines 

#-------------------------------------------------

#TRYING to get pie chart of bmomim genes in each superpway;   

ls -1 fortabuln_hier_bmomim_*.txt > bmomim_fortabuln_suprpwaylst.sh
ls -1 fortabuln_hier_bmomim_*.txt > bmomim_forsorting_suprpwaylst.sh

#cp foll cmd into file: cmd_fortabuln_suprpwaygenes.sh ; 
#to run cmd at terminal include input file name, e.g., fortabuln_hier_bmomim_Autophagy.txt 
##vi cmd_fortabuln_suprpwaygenes.sh
##awk 'END {print}' | sed -e 's/), /\n/g' | sed -e 's/(/\t/g' | sort -k2,2rn | awk -F"\t" '($1 ~ /\|All oncokb or bmomim/){savpway = $0}($1 ~ /num_of_genes/){savstr = $1; savcount = $2} (($1 !~ /^\|All oncokb/)&&($1 !~ /num_of_genes/)){i++; a[i]=$1; b[i]=$2 } END {print savpway, savstr, savcount; for (j=1; j<=i; j++) print a[j], b[j]}' | sed -e 's/|All oncokb or bmomim genes in top-level pathway: //' -e 's/| num_of_genes //' | sed -z 's/\n/, /g' | sed -e '$a\'

#cp foll cmd into file: cmd_forsorting_suprpwaygenes.sh ;
#to run cmd at terminal include input file name, e.g., fortabuln_hier_oncokb_Autophagy.txt 
##vi cmd_forsorting_suprpwaygenes.sh
##awk 'END {print}' | sed -e 's/), /\n/g' | sed -e 's/(/\t/g' | sort -k2,2rn | awk -F"\t" '($1 ~ /\|All oncokb or bmomim/){savpway = $0}($1 ~ /num_of_genes/){savstr = $1; savcount = $2} (($1 !~ /^\|All oncokb/)&&($1 !~ /num_of_genes/)){i++; a[i]=$1; b[i]=$2 } END {print savpway, savstr, savcount; for (j=1; j<=i; j++) print a[j], "\t", b[j]}' | sed -e 's/|All oncokb or bmomim genes in top-level pathway: //' -e 's/| num_of_genes/\t=\t/' | awk -F"\t" '(NR == 1){pwaynm = $1; print $0} (NR>1) {print pwaynm, "\t", $2, "\t", $1}'

vi bmomim_fortabuln_suprpwaylst.sh
#:1,$s/^/sh cmd_fortabuln_suprpwaygenes.sh < /

vi bmomim_forsorting_suprpwaylst.sh
#:1,$s/^/sh cmd_forsorting_suprpwaygenes.sh < /

#in the foll cmd, the first sed part changes "Vesicle mediated transport" to "Vesicle_mediated_transport"
#the sed cmd is IMPORTANT, because, if spaces exist, as in "Vesicle mediated transport", it UPSETS the
#uniq cmd, which considers a field to be a set of chars separated by a space; the uniq cmd would consider "Vesicle", 
#"mediated" and "transport" each as a separate field, which would mess up the uniq counts; the sed cmd ensures that 
#"Vesicle_mediated_transport" is one field;   
sh bmomim_fortabuln_suprpwaylst.sh | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' -e 's/ /\t/' -e 's/, /\t/' | sort -k2,2nr > suprpway_bmomim_genes.txt


#outputs of 2 cmds below should be same; useful for checking; 
#sh bmomim_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | grep "PLEC"
#sh bmomim_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | uniq -f 2 -D | grep "PLEC"

#all cmds below give identical outputs;
sh bmomim_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | grep -v "|" | uniq -f 2 -D | uniq -f 2 | wc -l
162
sh bmomim_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | grep -v "|" | uniq -f 2 -d | wc -l
162
sh bmomim_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | grep -v "|" | uniq -f 2 -c | sort -k1,1rn | awk -F" " '($1 > 1)' | wc -l
162
#foll cmd is simple and familiar; i.e., it does not use uniq -f 2, -D, -d, etc.
sh bmomim_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | awk -F"\t" '{print $3}' | sed -e 's/ //g' | grep -v ^$ | sort | uniq -c | sort -k1,1nr | awk '($1 > 1)' | wc -l
162


sh bmomim_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | grep -v "|" | uniq -f 2 -D | uniq -f 2 > multisuprpway_bmomim_genes.txt
sh bmomim_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | grep -v "|" | uniq -f 2 -D | uniq -f 2 | cut -f3,3 | sed 's/ //' > repeating_in_multisuprpway_bmomim_genes.txt
sh bmomim_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | grep -v "|" | uniq -f 2 -u | cut -f3,3 | sed 's/ //' > not_repeating_in_multisuprpway_bmomim_genes.txt
wc -l repeating_in_multisuprpway_bmomim_genes.txt not_repeating_in_multisuprpway_bmomim_genes.txt
# 162 repeating_in_multisuprpway_bmomim_genes.txt          (bmomim genes which repeat in >1 superpway)
# 161 not_repeating_in_multisuprpway_bmomim_genes.txt      (bmomim genes which do not repeat in >1 superpway; 
#                                                           i.e., which occur in only one superpway)
# 323 total


#Taking files, suprpway_bmomim_genes.txt, repeating_in_multisuprpway_bmomim_genes.txt, and 
#not_repeating_in_multisuprpway_bmomim_genes.txt to windows; 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = suprpway_bmomim_genes

#using the above excel table, generated pie-charts showing: (i) oncokb genes in each superpway, and 
#(ii) co-morbidity-related omim genes in each superpway; they are in the ppt file:
#D:\actrec_work\joined_actrec_nov21\work_progress2.pptx ;  

#DID NOT USE repeating_ and not_repeating_in_multisuprpway_ bmomim and omim _genes.txt; 

#No need for foll; total number of reactions in each hierarchy in Reactome has already been included
#in the xl table, to the right of each hierarchy;
####after compiling above excel table, found that the total number of reactions in Reactome in each 
####hierarchy in each suprpway tree, had not been included in the table; hence, used cmds of the foll kind to 
####extract total no of reactions in reactome for each hierarchy in each suprpway; then manually copied 
####and pasted output of each cmd into appropriate sheet in the excel table;
####awk -F"|" '{print $1}' tree_Autophagy.txt
####awk -F"|" '{print $1}' tree_Cell_Cycle.txt
####awk -F"|" '{print $1}' tree_Signal_Transduction.txt
####awk -F"|" '{print $1}' tree_Neuronal_System.txt
--------------------------------------------------

#pathway fingerprint of each oncokb and bmomim gene

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup

#trial cmds;
#grep "APC (" fortabuln_hier_oncokb_*.txt | awk -F", " '{print $1, $NF}' | grep -v "All oncokb" | wc -l
#grep "TP53 (" fortabuln_hier_oncokb_*.txt | awk -F", " '{print $1, $NF}' | grep -v "All oncokb" | wc -l

paste -d" " tree_Autophagy.txt fortabuln_hier_oncokb_Autophagy.txt > all_suprpway_trees_oncokb_genes.txt 
paste -d" " tree_Cell_Cell_communication.txt fortabuln_hier_oncokb_Cell_Cell_communication.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Cell_Cycle.txt fortabuln_hier_oncokb_Cell_Cycle.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Cellular_responses_to_stimuli.txt fortabuln_hier_oncokb_Cellular_responses_to_stimuli.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Chromatin_organization.txt fortabuln_hier_oncokb_Chromatin_organization.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Circadian_Clock.txt fortabuln_hier_oncokb_Circadian_Clock.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Developmental_Biology.txt fortabuln_hier_oncokb_Developmental_Biology.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Digestion_and_absorption.txt fortabuln_hier_oncokb_Digestion_and_absorption.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Disease.txt fortabuln_hier_oncokb_Disease.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_DNA_Repair.txt fortabuln_hier_oncokb_DNA_Repair.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_DNA_Replication.txt fortabuln_hier_oncokb_DNA_Replication.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Extracellular_matrix_organization.txt fortabuln_hier_oncokb_Extracellular_matrix_organization.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Gene_expression_Transcription.txt fortabuln_hier_oncokb_Gene_expression_Transcription.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Hemostasis.txt fortabuln_hier_oncokb_Hemostasis.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Immune_System.txt fortabuln_hier_oncokb_Immune_System.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Metabolism_of_proteins.txt fortabuln_hier_oncokb_Metabolism_of_proteins.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Metabolism_of_RNA.txt fortabuln_hier_oncokb_Metabolism_of_RNA.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Metabolism.txt fortabuln_hier_oncokb_Metabolism.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Muscle_contraction.txt fortabuln_hier_oncokb_Muscle_contraction.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Neuronal_System.txt fortabuln_hier_oncokb_Neuronal_System.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Organelle_biogenesis_and_maintenance.txt fortabuln_hier_oncokb_Organelle_biogenesis_and_maintenance.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Programmed_Cell_Death.txt fortabuln_hier_oncokb_Programmed_Cell_Death.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Protein_localization.txt fortabuln_hier_oncokb_Protein_localization.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Reproduction.txt fortabuln_hier_oncokb_Reproduction.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Sensory_Perception.txt fortabuln_hier_oncokb_Sensory_Perception.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Signal_Transduction.txt fortabuln_hier_oncokb_Signal_Transduction.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Transport_of_small_molecules.txt fortabuln_hier_oncokb_Transport_of_small_molecules.txt >> all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Vesicle_mediated_transport.txt fortabuln_hier_oncokb_Vesicle_mediated_transport.txt >> all_suprpway_trees_oncokb_genes.txt

wc -l all_suprpway_trees_oncokb_genes.txt

#awk '!($0 ~ /^ $/)' all_suprpway_trees_oncokb_genes.txt | grep -v "All oncokb" | awk -F", " '{IFS=OFS=", "}{$NF = ""; print $0}' | more

mkdir /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint
#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint

#thoughts: which are growth promoting pways, which are tumour suppressing pways?
#You need three outputs; one which gives hierarchy for only MTOR; one which tells you which are the other genes 
#along with MTOR which occur in the hierarchy; and you need a third output which tells you which are the omim genes
#which occur in the hierarchy; 

mv /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/all_suprpway_trees_oncokb_genes.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/.


awk '!($0 ~ /^ $/)' all_suprpway_trees_oncokb_genes.txt | grep -v "All oncokb" | awk -F"\\), " '{IFS=OFS="), "}{{for (i=1; i<NF; i++) printf $i OFS} printf "\n"}' | grep -v ^$ > cols1_2_all_suprpway_trees_oncokb_genes.txt
vi cols1_2_all_suprpway_trees_oncokb_genes.txt

#from xl file, D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\cancer_results_new1186.xlsx ,
#sheet = can_wise_driver_counts copied the gene name col for kirc into the foll file: 
vi /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/kirc_tcga_drigenes.txt
#/-
#:1,$s/-/_/       #this was done to make HLA-A to HLA_A, etc..
paste -d"\t" kirc_tcga_drigenes.txt kirc_tcga_drigenes.txt > temp.txt
paste -d"\t" temp.txt kirc_tcga_drigenes.txt > temp1.txt

#created a file containing the Reactome top-level pathways and reactome ids; 
head -1 /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree*.txt > toplevel_pwaynames_ids.txt
#manually edited the file to retain only the toplevel pway names and ids; 
vi toplevel_pwaynames_ids.txt

#foll is the model cmd which has to be included into the prep_kirc_fingerprint_onlyhier.sh file;
#echo -e -n "VHL\t";awk -F"\\\\| \\\\(" '{IFS=OFS="| ("}(($1 ~ /\|Autophagy (R-HSA-9612973)|/) && ($2 ~ /VHL (/)){print "VHL\t" $1}' cols1_2_all_suprpway_trees_oncokb_genes.txt; echo "";
vi prep_kirc_fingerprint_onlyhier.sh
#i esc !! cat temp1.txt
#:1,$s/^/echo -e -n "/
#:1,$s/\t/\\t"; /
#:1,$s/; /; awk -F"\\\\\\\\| \\\\\\\\(" '{IFS=OFS="| ("}((\$1 \~ \/\/) \&\& (\$2 \~ \//     #no need for {IFS=OFS...}, but retained it;
#:1,$s/$/ \\(\/)){print \$1}'/
#:1,$s/\t/ \\(\/)){print "/
#:1,$s/$/\\t" \$1}' cols1_2_all_suprpway_trees_oncokb_genes.txt; echo "";/
#:1,$s/\/\//\/\\|Autophagy \\(R-HSA-9612973\\)\\|\//
#:$
#o 
#echo -e "#--------------------------------------------------"
#:1
#103yy
#:$
#p
#:104,205s/Autophagy/Cell-Cell communication/
#:104,205s/R-HSA-9612973/R-HSA-1500931/
#:$
#o 
#echo -e "#--------------------------------------------------"
#:104
#103yy
#:$
#p
#:207,308s/Cell-Cell communication/Cell Cycle/
#:207,308s/R-HSA-1500931/R-HSA-1640170/
#......keep going the same way to complete for all 28 superpways;
#:310,411s/Cell Cycle/Cellular responses to stimuli/
#:310,411s/R-HSA-1640170/R-HSA-8953897/
#:413,514s/Cellular responses to stimuli/Chromatin organization/
#:413,514s/R-HSA-8953897/R-HSA-4839726/
#:516,617s/Chromatin organization/Circadian Clock/
#:516,617s/R-HSA-4839726/R-HSA-400253/
#:619,720s/Circadian Clock/Developmental Biology/
#:619,720s/R-HSA-400253/R-HSA-1266738/
#:722,823s/Developmental Biology/Digestion and absorption/
#:722,823s/R-HSA-1266738/R-HSA-8963743/
#:825,926s/Digestion and absorption/Disease/
#:825,926s/R-HSA-8963743/R-HSA-1643685/
#:928,1029s/Disease/DNA Repair/
#:928,1029s/R-HSA-1643685/R-HSA-73894/
#:1031,1132s/DNA Repair/DNA Replication/
#:1031,1132s/R-HSA-73894/R-HSA-69306/
#:1134,1235s/DNA Replication/Extracellular matrix organization/
#:1134,1235s/R-HSA-69306/R-HSA-1474244/
#:1237,1338s/Extracellular matrix organization/Gene expression (Transcription)/
#:1237,1338s/R-HSA-1474244/R-HSA-74160/
#:1340,1441s/Gene expression (Transcription)/Hemostasis/
#:1340,1441s/R-HSA-74160/R-HSA-109582/
#:1443,1544s/Hemostasis/Immune System/
#:1443,1544s/R-HSA-109582/R-HSA-168256/
#:1546,1647s/Immune System/Metabolism of proteins/
#:1546,1647s/R-HSA-168256/R-HSA-392499/
#:1649,1750s/Metabolism of proteins/Metabolism of RNA/
#:1649,1750s/R-HSA-392499/R-HSA-8953854/
#:1752,1853s/Metabolism of RNA/Metabolism/
#:1752,1853s/R-HSA-8953854/R-HSA-1430728/
#:1855,1956s/Metabolism/Muscle contraction/
#:1855,1956s/R-HSA-1430728/R-HSA-397014/
#:1958,2059s/Muscle contraction/Neuronal System/
#:1958,2059s/R-HSA-397014/R-HSA-112316/
#:2061,2162s/Neuronal System/Organelle biogenesis and maintenance/
#:2061,2162s/R-HSA-112316/R-HSA-1852241/
#:2164,2265s/Organelle biogenesis and maintenance/Programmed Cell Death/
#:2164,2265s/R-HSA-1852241/R-HSA-5357801/
#:2267,2368s/Programmed Cell Death/Protein localization/
#:2267,2368s/R-HSA-5357801/R-HSA-9609507/
#:2370,2471s/Protein localization/Reproduction/
#:2370,2471s/R-HSA-9609507/R-HSA-1474165/
#:2473,2574s/Reproduction/Sensory Perception/
#:2473,2574s/R-HSA-1474165/R-HSA-9709957/
#:2576,2677s/Sensory Perception/Signal Transduction/
#:2576,2677s/R-HSA-9709957/R-HSA-162582/
#:2679,2780s/Signal Transduction/Transport of small molecules/
#:2679,2780s/R-HSA-162582/R-HSA-382551/
#:2782,2883s/Transport of small molecules/Vesicle-mediated transport/
#:2782,2883s/R-HSA-382551/R-HSA-5653656/

#note: Gene expression (Transcription) - needs extra escape sequences for the parentheses
#around "Transcription"; used foll edit in vi:
#:1237,1338s/(Transcription)/\\(Transcription\\)/

#######modified prep_kirc_fingerprint_onlyhier.sh begins here
#below is the orig cmd in prep file; foll cmd can be used at terminal;
echo -n "MTOR\t"; awk -F"\\| \\(" '{IFS=OFS="| ("}(($1 ~ /\|Autophagy \(R-HSA-9612973\)\|/) && ($2 ~ /MTOR \(/)){print "MTOR\t" $1}' cols1_2_all_suprpway_trees_oncokb_genes.txt; echo "";
MTOR    MTOR    39|Autophagy (R-HSA-9612973)|Macroautophagy (R-HSA-1632852)

#cmd modified; foll cmd can be used at terminal;
echo -n "MTOR\t"; awk -F"\\| \\(" '{IFS=OFS="| ("}(($1 ~ /\|Autophagy \(R-HSA-9612973\)\|/) && ($2 ~ /MTOR \(/)){print "MTOR\t" "(" $2}' cols1_2_all_suprpway_trees_oncokb_genes.txt | awk -F"\t|, " '{for (i=1; i<=NF; i++){if ($i ~ /MTOR \(/) print $i}}' ; echo "";
MTOR    MTOR (5)

#foll cmd is the one to be incorporated in the prep_addnl file (below); 
echo -e -n "MTOR\t"; awk -F"\\\\| \\\\(" '{IFS=OFS="| ("}(($1 ~ /\|Autophagy \(R-HSA-9612973\)\|/) && ($2 ~ /MTOR \(/)){print "MTOR\t" "(" $2}' cols1_2_all_suprpway_trees_oncokb_genes.txt | awk -F"\t|, " '{for (i=1; i<=NF; i++){if ($i ~ /MTOR \(/) print $i}}' ; echo "";

cp prep_kirc_fingerprint_onlyhier.sh prep_addnl_kirc_fingerprint_onlyhier.sh
vi prep_addnl_kirc_fingerprint_onlyhier.sh
#:1,$s/\$1}' /"(" \$2}' /
#:1,$s/txt; echo "";/txt | awk -F"\\t|, " '{for \(i=1; i<=NF; i++){if \(\$i \~ \//
#:wq

cp kirc_tcga_drigenes.txt tmp_duplicate.txt
vi tmp_duplicate.txt
#:$        #go to last line
#o         #insert blank line
#esc
#:1        #go to first line
#103yy
#:$
#p
#repeat to get a total of 28 times, for 28 suprpways;

paste -d"\t" prep_addnl_kirc_fingerprint_onlyhier.sh tmp_duplicate.txt > tmpp.txt
vi tmpp.txt
#:1,$s/\/\t/\//
#:1,$s/$/ \\(\/) print \$i}}'/
#:1,$s/\t \\(\/) print \$i}}'//
#:1,$s/}}'/}}' ; echo "" ;/
#:wq

cp tmpp.txt prep_addnl_kirc_fingerprint_onlyhier.sh

sh prep_kirc_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh prep_addnl_kirc_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

mv junk4.txt rncount_hier_kirc_genes.txt
#######modified prep_kirc_fingerprint_onlyhier.sh ends here


##########presently, below not needed 
#Presently, no need to create prep_kirc_fingerprint_hier_genes.sh, below 
#cp prep_kirc_fingerprint_onlyhier.sh prep_kirc_fingerprint_hier_genes.sh

###given below, is the present (or above) model cmd; 
###echo -e -n "VHL\t"; awk -F"\\\\| \\\\(" '{IFS=OFS="| ("}(($1 ~ /\|Autophagy \(R-HSA-9612973\)\|/) && ($2 ~ /VHL \(/)){print "VHL\t" $1}' cols1_2_all_suprpway_trees_oncokb_genes.txt; echo "";
###given below, is the upcoming (or below) model cmd; 
###echo -e -n "VHL\t"; awk -F"\\\\| \\\\(" '{IFS=OFS="| ("}(($1 ~ /\|Autophagy \(R-HSA-9612973\)\|/) && ($2 ~ /VHL \(/)){print "VHL\t" $1 OFS $2}' cols1_2_all_suprpway_trees_oncokb_genes.txt; echo "";

#vi prep_kirc_fingerprint_hier_genes.sh
#:1,$s/}' cols1_2/ OFS \$2}' cols1_2/

#sh prep_kirc_fingerprint_hier_genes.sh | grep -v ^$
##########end, presently, below not needed 


#creating the above two prep files for brca;
cp prep_kirc_fingerprint_onlyhier.sh temp_prep_brca_fingerprint_onlyhier.sh

#awk -F"; " '{print $2}' temp_prep_brca_fingerprint_onlyhier.sh
#awk -F"; " '{print $2 "; " $3}' temp_prep_brca_fingerprint_onlyhier.sh | awk -F"&& " '{print $2}'

#from xl file, D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\cancer_results_new1186.xlsx ,
#sheet = can_wise_driver_counts copied the gene name col for brca into the foll file: 
vi /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/brca_tcga_drigenes.txt
#/-
#:1,$s/-/_/       #this was done to change HLA-A to HLA_A, etc..
paste -d"\t" brca_tcga_drigenes.txt brca_tcga_drigenes.txt > temppairlst.txt

awk -F"; " '{print $2}' temp_prep_brca_fingerprint_onlyhier.sh | awk -F"&& " '{print $1}' > temp_suprpway_part.txt
#kirc had 102 genes; brca has 266; 266 - 102 = 164 genes; thus, edit temp_suprpway_part.txt, and do 82yy followed 
#by  p, p for each suprpway (i.e., add 164 lines for each suprpway);
vi temp_suprpway_part.txt
#go to 1st line of Autophagy; 82yy, p, p;
#go to 1st line of Cell-Cell communication; 82yy, p, p; 
#keep going;

vi templeftecho.txt 
#i esc !! cat brca_tcga_drigenes.txt
#:1,$s/^/echo -e -n "/
#:1,$s/$/\\t"; /
#:$
#o        #paste foll line;
#echo -e "#--------------------------------------------------"
#267yy p  
#:$ 
#p 
#paste 28 times;

paste -d" " templeftecho.txt temp_suprpway_part.txt > temp_echoleft_suprpwaypart.txt
vi temp_echoleft_suprpwaypart.txt
#:1,$s/;  awk/; awk/

vi temp_third_part.txt
#i esc !! cat temppairlst.txt 
#:1,$s/^/ \&\& (\$2 \~ \//
#:1,$s/\t/ \\(\/)){print "/
#:1,$s/$/\\t" \$1}' cols1_2_all_suprpway_trees_oncokb_genes.txt; echo "";/
#:$
#o        #adding blank line
#:1
#267yy
#esc
#:$
#p
#:$
#p        #repeat 28 times

paste -d" " temp_echoleft_suprpwaypart.txt temp_third_part.txt > prep_brca_fingerprint_onlyhier.sh
vi prep_brca_fingerprint_onlyhier.sh
#:1,$s/)   /) /

#######modified prep_brca_fingerprint_onlyhier.sh begins here

##Below, prep_brca_fingerprint_onlyhier.sh has to be modified in the same way 
##that prep_kirc_fingerprint_onlyhier.sh was modified above;  

cp prep_brca_fingerprint_onlyhier.sh prep_addnl_brca_fingerprint_onlyhier.sh
vi prep_addnl_brca_fingerprint_onlyhier.sh
#:1,$s/\$1}' /"(" \$2}' /
#:1,$s/txt; echo "";/txt | awk -F"\\t|, " '{for \(i=1; i<=NF; i++){if \(\$i \~ \//
#:wq

cp brca_tcga_drigenes.txt tmp_duplicate.txt
vi tmp_duplicate.txt
#:$        #go to last line
#o         #insert blank line
#esc
#:1        #go to first line
#103yy
#:$
#p
#repeat to get a total of 28 times, for 28 suprpways;

paste -d"\t" prep_addnl_brca_fingerprint_onlyhier.sh tmp_duplicate.txt > tmpp.txt
vi tmpp.txt
#:1,$s/\/\t/\//
#:1,$s/$/ \\(\/) print \$i}}'/
#:1,$s/\t \\(\/) print \$i}}'//
#:1,$s/}}'/}}' ; echo "" ;/
#:wq

cp tmpp.txt prep_addnl_brca_fingerprint_onlyhier.sh

sh prep_brca_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh prep_addnl_brca_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

mv junk4.txt rncount_hier_brca_genes.txt

#######modified prep_brca_fingerprint_onlyhier.sh ends here


##########presently, below not needed 
#cp prep_brca_fingerprint_onlyhier.sh prep_brca_fingerprint_hier_genes.sh

###given below, is the present (above) model cmd; 
###echo -e -n "VHL\t"; awk -F"\\\\| \\\\(" '{IFS=OFS="| ("}(($1 ~ /\|Autophagy \(R-HSA-9612973\)\|/) && ($2 ~ /VHL \(/)){print "VHL\t" $1}' cols1_2_all_suprpway_trees_oncokb_genes.txt; echo "";
###given below, is the upcoming (below) model cmd; 
###echo -e -n "VHL\t"; awk -F"\\\\| \\\\(" '{IFS=OFS="| ("}(($1 ~ /\|Autophagy \(R-HSA-9612973\)\|/) && ($2 ~ /VHL \(/)){print "VHL\t" $1 OFS $2}' cols1_2_all_suprpway_trees_oncokb_genes.txt; echo "";

#vi prep_brca_fingerprint_genes.sh
#:1,$s/}' cols1_2/ OFS \$2}' cols1_2/

#sh prep_brca_fingerprint_hier_genes.sh | grep -v ^$

#foll cmds not presently needed;
#sh prep_kirc_fingerprint_hier_genes.sh | grep -v ^$ | awk -F"\t" '{IFS=OFS="\t"}($1 == $2){print $1 OFS $3}($1 != $2){print $1 OFS $2}' > hier_genes_kirc_oncokb.txt
#sh prep_brca_fingerprint_hier_genes.sh | grep -v ^$ | awk -F"\t" '{IFS=OFS="\t"}($1 == $2){print $1 OFS $3}($1 != $2){print $1 OFS $2}' > hier_genes_brca_oncokb.txt
##########end, presently, below not needed 


#Trying to generate a GENE PATHWAY FINGERPRINT TABLE, using a modified version of the matrix program; 

#created foll file and pasted the driver genes and nmutns for kirc from excel file cancer_results_new1186.xlsx;
vi kirc_tcga_genes_nmutns.txt

#Locating the good old matrix program; 
cd /scratch/prasannalab ; ls -R | grep "\.pl" ; cd -

#the foll copy may be used; 
cd /scratch/prasannalab ; find . -name matrixofreactions_onwhich_oncokb_blairmel_genes_converge.pl -print ; cd -
/scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/matrixofreactions_onwhich_oncokb_blairmel_genes_converge.pl

#/scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/matrixofreactions_onwhich_oncokb_blairmel_genes_converge.pl
#/scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/all_reactions_for_1186_oncokb_blairmel_genes.txt
#/scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/genewise_reactions_for_1186_oncokb_blairmel_genes.txt 
#/scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/reactionsonwhich_genes_converge.out

#the foll input files have to be created;
#the all pway file for the matrix program would be a concatenation of tree files; 
#the gene_wise file for the matrix program would be the output of above prep files; 

#foll is the all pway input file; 
cat /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_*.txt > all_reactome_hierarchies.txt

#trial cmds to get gene_wise_hierarchies file;
#grep and awk cmds below are equivalent; plan to use awk cmd; 
#grep "^\bTP53\b" rncount_hier_kirc_genes.txt | awk -F"\t" '($2 ~ /[0-9]/)' | wc -l
#awk -F"\t" '($1 ~ /^TP53$/)' rncount_hier_kirc_genes.txt

paste -d"\t" kirc_tcga_genes_nmutns.txt kirc_tcga_drigenes.txt > prep_kirc_infile_gene_pway_fingerprint.sh
#model cmds to be included in prep file; 
#echo "TP53_(11)" ; awk -F"\t" '($1 ~ /^TP53$/) && ($2 ~ /[0-9]/)' rncount_hier_kirc_genes.txt
#echo "VHL_(149)" ; awk -F"\t" '($1 ~ /^VHL$/) && ($2 ~ /[0-9]/)' rncount_hier_kirc_genes.txt
vi prep_kirc_infile_gene_pway_fingerprint.sh 
#:1,$s/^/echo "/
#:1,$s/\t/_(/
#:1,$s/\t/)" ; \t/
#:1,$s/\t/awk -F"\\t" '(\$1 \~ \/^/
#:1,$s/$/\$\/) \&\& ((\$2 \~ \/[0-9]\/))' rncount_hier_kirc_genes.txt/

sh prep_kirc_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > corct_gene_wise_hierarchies_kirc.txt


#copying the matrix program to pwd and modifying it;
cp /scratch/prasannalab/cancers_in_detail/pway_anal/gene_pway_matrix/matrixofreactions_onwhich_oncokb_blairmel_genes_converge.pl /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/gene_pway_fingerprint_mtx.pl

perl gene_pway_fingerprint_mtx.pl all_reactome_hierarchies.txt gene_wise_hierarchies_kirc.txt kirc_genes_pway_fingerprint_mtx.out

#some helpful sites for altering above perl program; 
https://stackoverflow.com/questions/47085697/moving-and-altering-first-last-elements-of-array-in-perl
https://www.geeksforgeeks.org/perl-split-function/

#foll cmds help in checking output file;  
awk -F"   " '($(NF-1)>0)' kirc_genes_pway_fingerprint_mtx.out
awk -F"   " '((NR==1)||($NF>1))' kirc_genes_pway_fingerprint_mtx.out | more
#The following command line uses awk to prepend the last field of each line of file.txt, does a reverse 
#numerical sort, then uses cut to remove the added field:
awk '{print $NF,$0}' kirc_genes_pway_fingerprint_mtx.out | sort -nr | cut -f2- -d' ' | more
awk -F"   " '((NR==1)||($NF!=0))' kirc_genes_pway_fingerprint_mtx.out | more

#have to make format of output file suitable for xl; 
vi kirc_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#Took this file to xl file: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = kirc_pway_fingerprint_mtx ; in the sheet, replaced all "-" with "" ;  

--------------------------------------------------

#Generating a GENE PATHWAY FINGERPRINT TABLE for brca, using a modified version of the matrix program; 

#created foll file and pasted the driver genes and nmutns for brca from excel file cancer_results_new1186.xlsx;
vi brca_tcga_genes_nmutns.txt

#foll is the all pway input file; 
all_reactome_hierarchies.txt

paste -d"\t" brca_tcga_genes_nmutns.txt brca_tcga_drigenes.txt > prep_brca_infile_gene_pway_fingerprint.sh

vi prep_brca_infile_gene_pway_fingerprint.sh 
#:1,$s/^/echo "/
#:1,$s/\t/_(/
#:1,$s/\t/)" ; \t/
#:1,$s/\t/awk -F"\\t" '(\$1 \~ \/^/
#:1,$s/$/\$\/) \&\& ((\$2 \~ \/[0-9]\/))' rncount_hier_brca_genes.txt/

sh prep_brca_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > gene_wise_hierarchies_brca.txt

perl gene_pway_fingerprint_mtx.pl all_reactome_hierarchies.txt gene_wise_hierarchies_brca.txt brca_genes_pway_fingerprint_mtx.out

#foll cmds help in checking output file;  
awk -F"   " '((NR==1)||($NF>1))' brca_genes_pway_fingerprint_mtx.out | more
#The following command line uses awk to prepend the last field of each line of file.txt, does a reverse 
#numerical sort, then uses cut to remove the added field:
awk '{print $NF,$0}' brca_genes_pway_fingerprint_mtx.out | sort -nr | cut -f2- -d' ' | more
awk -F"   " '((NR==1)||($NF!=0))' brca_genes_pway_fingerprint_mtx.out | more

#have to make format of output file suitable for xl; 
vi brca_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#Took this file to xl file: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet = brca_pway_fingerprint_mtx ; in the sheet, replaced all "-" with "" ;  

--------------------------------------------------

#Getting pway fingerprint matrix for COADREAD;

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint

#from xl file, D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\cancer_results_new1186.xlsx ,
#sheet = can_wise_driver_counts copied the gene name col for coadread into the foll file: 
vi /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/coadread_tcga_drigenes.txt
#/-
#:1,$s/-/_/       #this was done to make HLA-A to HLA_A, etc..

paste -d"\t" coadread_tcga_drigenes.txt coadread_tcga_drigenes.txt > temppairlst.txt

#creating prep file for coadread;
cp prep_kirc_fingerprint_onlyhier.sh temp_prep_coadread_fingerprint_onlyhier.sh

awk -F"; " '{print $2}' temp_prep_coadread_fingerprint_onlyhier.sh | awk -F"&& " '{print $1}' > temp_suprpway_part.txt
#kirc had 102 genes; coadread has 281; 281 - 102 = 179 genes; thus, edit temp_suprpway_part.txt, and do 100yy followed 
#by  p for each suprpway (i.e., add 100 lines for each suprpway); then, go back to beginning of file, and do 79 yy 
#followed by p for each suprpway (i.e., add 79 more lines for each suprpway; i.e., add a total of 179 lines for each 
#suprpway); 
vi temp_suprpway_part.txt
#go to 1st line of Autophagy; 100yy, p
#/^
#go to 1st line of Cell-Cell communication; 100yy, p 
#n
#keep going;
#then, go back to 1st line Autophagy; 79 yy, p
#n
#go to 1st line of Cell-Cell communication; 79yy, p
#n
#keep going; 

vi templeftecho.txt 
#i esc !! cat coadread_tcga_drigenes.txt
#:1,$s/^/echo -e -n "/
#:1,$s/$/\\t"; /
#:$
#o        #paste foll line;
#echo -e "#--------------------------------------------------"
#:1
#282yy 
#:$ 
#p 
#:$
#p
#paste 28 times;

paste -d" " templeftecho.txt temp_suprpway_part.txt > temp_echoleft_suprpwaypart.txt
vi temp_echoleft_suprpwaypart.txt
#:1,$s/;  awk/; awk/

vi temp_third_part.txt
#i esc !! cat temppairlst.txt 
#:1,$s/^/ \&\& (\$2 \~ \//
#:1,$s/\t/ \\(\/)){print "/
#:1,$s/$/\\t" \$1}' cols1_2_all_suprpway_trees_oncokb_genes.txt; echo "";/
#:$
#o        #adding blank line
#:1
#282yy
#:$
#p
#:$
#p        #repeat 28 times

paste -d" " temp_echoleft_suprpwaypart.txt temp_third_part.txt > prep_coadread_fingerprint_onlyhier.sh
vi prep_coadread_fingerprint_onlyhier.sh
#:1,$s/)   /) /

#######modified prep_coadread_fingerprint_onlyhier.sh begins here

cp prep_coadread_fingerprint_onlyhier.sh prep_addnl_coadread_fingerprint_onlyhier.sh
vi prep_addnl_coadread_fingerprint_onlyhier.sh
#:1,$s/\$1}' /"(" \$2}' /
#:1,$s/txt; echo "";/txt | awk -F"\\t|, " '{for \(i=1; i<=NF; i++){if \(\$i \~ \//
#:wq

cp coadread_tcga_drigenes.txt tmp_duplicate.txt
vi tmp_duplicate.txt
#:$        #go to last line
#o         #insert blank line
#esc
#:1        #go to first line
#282yy
#:$
#p
#repeat to get a total of 28 times, for 28 suprpways;

paste -d"\t" prep_addnl_coadread_fingerprint_onlyhier.sh tmp_duplicate.txt > tmpp.txt
vi tmpp.txt
#:1,$s/\/\t/\//
#:1,$s/$/ \\(\/) print \$i}}'/
#:1,$s/\t \\(\/) print \$i}}'//
#:1,$s/}}'/}}' ; echo "" ;/
#:wq

cp tmpp.txt prep_addnl_coadread_fingerprint_onlyhier.sh

sh prep_coadread_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh prep_addnl_coadread_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

mv junk4.txt rncount_hier_coadread_genes.txt

#######modified prep_coadread_fingerprint_onlyhier.sh ends here

#Generating a GENE PATHWAY FINGERPRINT TABLE for coadread, using a modified version of the matrix program; 

#created foll file and pasted the driver genes and nmutns for coadread from excel file cancer_results_new1186.xlsx;
vi coadread_tcga_genes_nmutns.txt

#foll is the all pway input file; 
all_reactome_hierarchies.txt

paste -d"\t" coadread_tcga_genes_nmutns.txt coadread_tcga_drigenes.txt > prep_coadread_infile_gene_pway_fingerprint.sh

vi prep_coadread_infile_gene_pway_fingerprint.sh 
#:1,$s/^/echo "/
#:1,$s/\t/_(/
#:1,$s/\t/)" ; \t/
#:1,$s/\t/awk -F"\\t" '(\$1 \~ \/^/
#:1,$s/$/\$\/) \&\& ((\$2 \~ \/[0-9]\/))' rncount_hier_coadread_genes.txt/

sh prep_coadread_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > gene_wise_hierarchies_coadread.txt

perl gene_pway_fingerprint_mtx.pl all_reactome_hierarchies.txt gene_wise_hierarchies_coadread.txt coadread_genes_pway_fingerprint_mtx.out

#foll cmds help in checking output file;  
awk -F"   " '((NR==1)||($NF>1))' coadread_genes_pway_fingerprint_mtx.out | more
#The following command line uses awk to prepend the last field of each line of file.txt, does a reverse 
#numerical sort, then uses cut to remove the added field:
awk '{print $NF,$0}' coadread_genes_pway_fingerprint_mtx.out | sort -nr | cut -f2- -d' ' | more
awk -F"   " '((NR==1)||($NF!=0))' coadread_genes_pway_fingerprint_mtx.out | more

#have to make format of output file suitable for xl; 
vi coadread_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#Took this file to xl file: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx

--------------------------------------------------

#Getting pway fingerprint matrix for HNSC;

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint

#from xl file, D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\cancer_results_new1186.xlsx ,
#sheet = can_wise_driver_counts copied the gene name col for HNSC into the foll file: 
vi /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/hnsc_tcga_drigenes.txt
#/-
#:1,$s/-/_/       #this was done to make HLA-A to HLA_A, etc..

paste -d"\t" hnsc_tcga_drigenes.txt hnsc_tcga_drigenes.txt > temppairlst.txt

#creating prep file for hnsc;
cp prep_kirc_fingerprint_onlyhier.sh temp_prep_hnsc_fingerprint_onlyhier.sh

awk -F"; " '{print $2}' temp_prep_hnsc_fingerprint_onlyhier.sh | awk -F"&& " '{print $1}' > temp_suprpway_part.txt
#kirc had 102 genes; hnsc has 214; 214 - 102 = 112 genes; thus, edit temp_suprpway_part.txt, and do 100yy followed 
#by  p for each suprpway (i.e., add 100 lines for each suprpway); then, go back to beginning of file, and do 12 yy 
#followed by p for each suprpway (i.e., add 12 more lines for each suprpway; i.e., add a total of 112 lines for each 
#suprpway); 
vi temp_suprpway_part.txt
#go to 1st line of Autophagy; 100yy, p
#/^
#go to 1st line of Cell-Cell communication; 100yy, p 
#n
#keep going;
#then, go back to 1st line Autophagy; 79 yy, p
#n
#go to 1st line of Cell-Cell communication; 79yy, p
#n
#keep going; 

vi templeftecho.txt 
#do %d to clear file;
#i esc !! cat hnsc_tcga_drigenes.txt
#:1,$s/^/echo -e -n "/
#:1,$s/$/\\t"; /
#:$
#o        #paste foll line;
#echo -e "#--------------------------------------------------"
#:1
#215yy 
#:$ 
#p 
#:$
#p
#paste 28 times;

paste -d" " templeftecho.txt temp_suprpway_part.txt > temp_echoleft_suprpwaypart.txt
vi temp_echoleft_suprpwaypart.txt
#:1,$s/;  awk/; awk/

vi temp_third_part.txt
#do %d to clear file; 
#i esc !! cat temppairlst.txt 
#:1,$s/^/ \&\& (\$2 \~ \//
#:1,$s/\t/ \\(\/)){print "/
#:1,$s/$/\\t" \$1}' cols1_2_all_suprpway_trees_oncokb_genes.txt; echo "";/
#:$
#o        #adding blank line
#:1
#215yy
#:$
#p
#:$
#p        #repeat 28 times

paste -d" " temp_echoleft_suprpwaypart.txt temp_third_part.txt > prep_hnsc_fingerprint_onlyhier.sh
vi prep_hnsc_fingerprint_onlyhier.sh
#:1,$s/)   /) /

#######modified prep_hnsc_fingerprint_onlyhier.sh begins here

cp prep_hnsc_fingerprint_onlyhier.sh prep_addnl_hnsc_fingerprint_onlyhier.sh
vi prep_addnl_hnsc_fingerprint_onlyhier.sh
#:1,$s/\$1}' /"(" \$2}' /
#:1,$s/txt; echo "";/txt | awk -F"\\t|, " '{for \(i=1; i<=NF; i++){if \(\$i \~ \//
#:wq

cp hnsc_tcga_drigenes.txt tmp_duplicate.txt
vi tmp_duplicate.txt
#:$        #go to last line
#o         #insert blank line
#esc
#:1        #go to first line
#215yy
#:$
#p
#repeat to get a total of 28 times, for 28 suprpways;

paste -d"\t" prep_addnl_hnsc_fingerprint_onlyhier.sh tmp_duplicate.txt > tmpp.txt
vi tmpp.txt
#:1,$s/\/\t/\//
#:1,$s/$/ \\(\/) print \$i}}'/
#:1,$s/\t \\(\/) print \$i}}'//
#:1,$s/}}'/}}' ; echo "" ;/
#:wq

cp tmpp.txt prep_addnl_hnsc_fingerprint_onlyhier.sh

sh prep_hnsc_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh prep_addnl_hnsc_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

mv junk4.txt rncount_hier_hnsc_genes.txt

#######modified prep_hnsc_fingerprint_onlyhier.sh ends here

#Generating a GENE PATHWAY FINGERPRINT TABLE for hnsc, using a modified version of the matrix program; 

#created foll file and pasted the driver genes and nmutns for hnsc from excel file cancer_results_new1186.xlsx;
vi hnsc_tcga_genes_nmutns.txt

#foll is the all pway input file; 
all_reactome_hierarchies.txt

paste -d"\t" hnsc_tcga_genes_nmutns.txt hnsc_tcga_drigenes.txt > prep_hnsc_infile_gene_pway_fingerprint.sh

vi prep_hnsc_infile_gene_pway_fingerprint.sh 
#:1,$s/^/echo "/
#:1,$s/\t/_(/
#:1,$s/\t/)" ; \t/
#:1,$s/\t/awk -F"\\t" '(\$1 \~ \/^/
#:1,$s/$/\$\/) \&\& ((\$2 \~ \/[0-9]\/))' rncount_hier_hnsc_genes.txt/

sh prep_hnsc_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > gene_wise_hierarchies_hnsc.txt

perl gene_pway_fingerprint_mtx.pl all_reactome_hierarchies.txt gene_wise_hierarchies_hnsc.txt hnsc_genes_pway_fingerprint_mtx.out

#foll cmds help in checking output file;  
awk -F"   " '((NR==1)||($NF>1))' hnsc_genes_pway_fingerprint_mtx.out | more
#The following command line uses awk to prepend the last field of each line of file.txt, does a reverse 
#numerical sort, then uses cut to remove the added field:
awk '{print $NF,$0}' hnsc_genes_pway_fingerprint_mtx.out | sort -nr | cut -f2- -d' ' | more
awk -F"   " '((NR==1)||($NF!=0))' hnsc_genes_pway_fingerprint_mtx.out | more

#have to make format of output file suitable for xl; 
vi hnsc_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#Took this file to xl file: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx

#Note: FAT1, for e.g., has no hierarchy associated with it; 
#why - maybe because it is not in Reactome? check *******
--------------------------------------------------

#Getting pway fingerprint matrix for GBM;

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint

#from xl file, D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\cancer_results_new1186.xlsx ,
#sheet = can_wise_driver_counts copied the gene name col for HNSC into the foll file: 
vi /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/gbm_tcga_drigenes.txt
#/-
#:1,$s/-/_/       #this was done to make HLA-A to HLA_A, etc..

paste -d"\t" gbm_tcga_drigenes.txt gbm_tcga_drigenes.txt > temppairlst.txt

#creating prep file for gbm;
cp prep_kirc_fingerprint_onlyhier.sh temp_prep_gbm_fingerprint_onlyhier.sh

awk -F"; " '{print $2}' temp_prep_gbm_fingerprint_onlyhier.sh | awk -F"&& " '{print $1}' > temp_suprpway_part.txt
#kirc had 102 genes; gbm has 149; 149 - 102 = 47 genes; thus, edit temp_suprpway_part.txt, and do 47yy followed 
#by  p for each suprpway (i.e., add 47 lines for each suprpway); i.e., add a total of 47 lines for each suprpway); 
vi temp_suprpway_part.txt
#go to 1st line of Autophagy; 47yy, p
#/^
#go to 1st line of Cell-Cell communication; 47yy, p 
#n
#keep going;

vi templeftecho.txt 
#do %d to clear file;
#i esc !! cat gbm_tcga_drigenes.txt
#:1,$s/^/echo -e -n "/
#:1,$s/$/\\t"; /
#:$
#o        #paste foll line;
#echo -e "#--------------------------------------------------"
#:1
#150yy 
#:$ 
#p 
#:$
#p
#paste 28 times;

paste -d" " templeftecho.txt temp_suprpway_part.txt > temp_echoleft_suprpwaypart.txt
vi temp_echoleft_suprpwaypart.txt
#:1,$s/;  awk/; awk/

vi temp_third_part.txt
#do %d to clear file; 
#i esc !! cat temppairlst.txt 
#:1,$s/^/ \&\& (\$2 \~ \//
#:1,$s/\t/ \\(\/)){print "/
#:1,$s/$/\\t" \$1}' cols1_2_all_suprpway_trees_oncokb_genes.txt; echo "";/
#:$
#o        #adding blank line
#:1
#150yy
#:$
#p
#:$
#p        #repeat 28 times

paste -d" " temp_echoleft_suprpwaypart.txt temp_third_part.txt > prep_gbm_fingerprint_onlyhier.sh
vi prep_gbm_fingerprint_onlyhier.sh
#:1,$s/)   /) /

#######modified prep_gbm_fingerprint_onlyhier.sh begins here

cp prep_gbm_fingerprint_onlyhier.sh prep_addnl_gbm_fingerprint_onlyhier.sh
vi prep_addnl_gbm_fingerprint_onlyhier.sh
#:1,$s/\$1}' /"(" \$2}' /
#:1,$s/txt; echo "";/txt | awk -F"\\t|, " '{for \(i=1; i<=NF; i++){if \(\$i \~ \//
#:wq

cp gbm_tcga_drigenes.txt tmp_duplicate.txt
vi tmp_duplicate.txt
#:$        #go to last line
#o         #insert blank line
#esc
#:1        #go to first line
#150yy
#:$
#p
#repeat to get a total of 28 times, for 28 suprpways;

paste -d"\t" prep_addnl_gbm_fingerprint_onlyhier.sh tmp_duplicate.txt > tmpp.txt
vi tmpp.txt
#:1,$s/\/\t/\//
#:1,$s/$/ \\(\/) print \$i}}'/
#:1,$s/\t \\(\/) print \$i}}'//
#:1,$s/}}'/}}' ; echo "" ;/
#:wq

cp tmpp.txt prep_addnl_gbm_fingerprint_onlyhier.sh

sh prep_gbm_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh prep_addnl_gbm_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

mv junk4.txt rncount_hier_gbm_genes.txt

#######modified prep_gbm_fingerprint_onlyhier.sh ends here

#Generating a GENE PATHWAY FINGERPRINT TABLE for gbm, using a modified version of the matrix program; 

#created foll file and pasted the driver genes and nmutns for gbm from excel file cancer_results_new1186.xlsx;
vi gbm_tcga_genes_nmutns.txt

#foll is the all pway input file; 
all_reactome_hierarchies.txt

paste -d"\t" gbm_tcga_genes_nmutns.txt gbm_tcga_drigenes.txt > prep_gbm_infile_gene_pway_fingerprint.sh

vi prep_gbm_infile_gene_pway_fingerprint.sh 
#:1,$s/^/echo "/
#:1,$s/\t/_(/
#:1,$s/\t/)" ; \t/
#:1,$s/\t/awk -F"\\t" '(\$1 \~ \/^/
#:1,$s/$/\$\/) \&\& ((\$2 \~ \/[0-9]\/))' rncount_hier_gbm_genes.txt/

sh prep_gbm_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > gene_wise_hierarchies_gbm.txt

perl gene_pway_fingerprint_mtx.pl all_reactome_hierarchies.txt gene_wise_hierarchies_gbm.txt gbm_genes_pway_fingerprint_mtx.out

#foll cmds help in checking output file;  
awk -F"   " '((NR==1)||($NF>1))' gbm_genes_pway_fingerprint_mtx.out | more
#The following command line uses awk to prepend the last field of each line of file.txt, does a reverse 
#numerical sort, then uses cut to remove the added field:
awk '{print $NF,$0}' gbm_genes_pway_fingerprint_mtx.out | sort -nr | cut -f2- -d' ' | more
awk -F"   " '((NR==1)||($NF!=0))' gbm_genes_pway_fingerprint_mtx.out | more

#have to make format of output file suitable for xl; 
vi gbm_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#Took this file to xl file: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx

--------------------------------------------------

#Getting pway fingerprint matrix for LUAD;

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint

#from xl file, D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\cancer_results_new1186.xlsx ,
#sheet = can_wise_driver_counts copied the gene name col for luad into the foll file: 
vi /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/luad_tcga_drigenes.txt
#/-
#:1,$s/-/_/       #this was done to make HLA-A to HLA_A, etc..

paste -d"\t" luad_tcga_drigenes.txt luad_tcga_drigenes.txt > temppairlst.txt

#creating prep file for luad;
cp prep_kirc_fingerprint_onlyhier.sh temp_prep_luad_fingerprint_onlyhier.sh

awk -F"; " '{print $2}' temp_prep_luad_fingerprint_onlyhier.sh | awk -F"&& " '{print $1}' > temp_suprpway_part.txt
#kirc had 102 genes; luad has 262; 262 - 102 = 160 genes; thus, edit temp_suprpway_part.txt, and do 80yy followed 
#by  p for each suprpway (i.e., add 80 lines for each suprpway); then, go back to beginning of file, and do 80 yy 
#followed by p for each suprpway (i.e., add 80 more lines for each suprpway; i.e., add a total of 160 lines for each 
#suprpway); 
vi temp_suprpway_part.txt
#go to 1st line of Autophagy; 80yy, p
#/^
#go to 1st line of Cell-Cell communication; 80yy, p 
#n
#keep going;
#then, go back to 1st line Autophagy; 80 yy, p
#n
#go to 1st line of Cell-Cell communication; 80yy, p
#n
#keep going; 

vi templeftecho.txt 
#do %d to clear file;
#i esc !! cat luad_tcga_drigenes.txt
#:1,$s/^/echo -e -n "/
#:1,$s/$/\\t"; /
#:$
#o        #paste foll line;
#echo -e "#--------------------------------------------------"
#:1
#263yy 
#:$ 
#p 
#:$
#p
#paste 28 times;

paste -d" " templeftecho.txt temp_suprpway_part.txt > temp_echoleft_suprpwaypart.txt
vi temp_echoleft_suprpwaypart.txt
#:1,$s/;  awk/; awk/

vi temp_third_part.txt
#do %d to clear file;
#i esc !! cat temppairlst.txt 
#:1,$s/^/ \&\& (\$2 \~ \//
#:1,$s/\t/ \\(\/)){print "/
#:1,$s/$/\\t" \$1}' cols1_2_all_suprpway_trees_oncokb_genes.txt; echo "";/
#:$
#o        #adding blank line
#:1
#263yy
#:$
#p
#:$
#p        #repeat 28 times

paste -d" " temp_echoleft_suprpwaypart.txt temp_third_part.txt > prep_luad_fingerprint_onlyhier.sh
vi prep_luad_fingerprint_onlyhier.sh
#:1,$s/)   /) /

#######modified prep_luad_fingerprint_onlyhier.sh begins here

cp prep_luad_fingerprint_onlyhier.sh prep_addnl_luad_fingerprint_onlyhier.sh
vi prep_addnl_luad_fingerprint_onlyhier.sh
#:1,$s/\$1}' /"(" \$2}' /
#:1,$s/txt; echo "";/txt | awk -F"\\t|, " '{for \(i=1; i<=NF; i++){if \(\$i \~ \//
#:wq

cp luad_tcga_drigenes.txt tmp_duplicate.txt
vi tmp_duplicate.txt
#:$        #go to last line
#o         #insert blank line
#esc
#:1        #go to first line
#263yy
#:$
#p
#repeat to get a total of 28 times, for 28 suprpways;

paste -d"\t" prep_addnl_luad_fingerprint_onlyhier.sh tmp_duplicate.txt > tmpp.txt
vi tmpp.txt
#:1,$s/\/\t/\//
#:1,$s/$/ \\(\/) print \$i}}'/
#:1,$s/\t \\(\/) print \$i}}'//
#:1,$s/}}'/}}' ; echo "" ;/
#:wq

cp tmpp.txt prep_addnl_luad_fingerprint_onlyhier.sh

sh prep_luad_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh prep_addnl_luad_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

mv junk4.txt rncount_hier_luad_genes.txt

#######modified prep_luad_fingerprint_onlyhier.sh ends here

#Generating a GENE PATHWAY FINGERPRINT TABLE for luad, using a modified version of the matrix program; 

#created foll file and pasted the driver genes and nmutns for luad from excel file cancer_results_new1186.xlsx;
vi luad_tcga_genes_nmutns.txt

#foll is the all pway input file; 
all_reactome_hierarchies.txt

paste -d"\t" luad_tcga_genes_nmutns.txt luad_tcga_drigenes.txt > prep_luad_infile_gene_pway_fingerprint.sh

vi prep_luad_infile_gene_pway_fingerprint.sh 
#:1,$s/^/echo "/
#:1,$s/\t/_(/
#:1,$s/\t/)" ; \t/
#:1,$s/\t/awk -F"\\t" '(\$1 \~ \/^/
#:1,$s/$/\$\/) \&\& ((\$2 \~ \/[0-9]\/))' rncount_hier_luad_genes.txt/

sh prep_luad_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > gene_wise_hierarchies_luad.txt

perl gene_pway_fingerprint_mtx.pl all_reactome_hierarchies.txt gene_wise_hierarchies_luad.txt luad_genes_pway_fingerprint_mtx.out

#foll cmds help in checking output file;  
awk -F"   " '((NR==1)||($NF>1))' luad_genes_pway_fingerprint_mtx.out | more
#The following command line uses awk to prepend the last field of each line of file.txt, does a reverse 
#numerical sort, then uses cut to remove the added field:
awk '{print $NF,$0}' luad_genes_pway_fingerprint_mtx.out | sort -nr | cut -f2- -d' ' | more
awk -F"   " '((NR==1)||($NF!=0))' luad_genes_pway_fingerprint_mtx.out | more

#have to make format of output file suitable for xl; 
vi luad_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#Took this file to xl file: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx

--------------------------------------------------

#Getting pway fingerprint matrix for SKCM;

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint

#from xl file, D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\cancer_results_new1186.xlsx ,
#sheet = can_wise_driver_counts copied the gene name col for skcm into the foll file: 
vi /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/skcm_tcga_drigenes.txt
#/-
#:1,$s/-/_/       #this was done to make HLA-A to HLA_A, etc..

paste -d"\t" skcm_tcga_drigenes.txt skcm_tcga_drigenes.txt > temppairlst.txt

#creating prep file for skcm;
cp prep_kirc_fingerprint_onlyhier.sh temp_prep_skcm_fingerprint_onlyhier.sh

awk -F"; " '{print $2}' temp_prep_skcm_fingerprint_onlyhier.sh | awk -F"&& " '{print $1}' > temp_suprpway_part.txt
#kirc had 102 genes; skcm has 273; 273 - 102 = 171 genes; thus, edit temp_suprpway_part.txt, and do 100yy followed 
#by p for each suprpway (i.e., add 100 lines for each suprpway); then, go back to beginning of file, and do 71 yy 
#followed by p for each suprpway (i.e., add 71 more lines for each suprpway; i.e., add a total of 171 lines for each 
#suprpway); 
vi temp_suprpway_part.txt
#go to 1st line of Autophagy; 100yy, p
#/^
#go to 1st line of Cell-Cell communication; 100yy, p 
#n
#keep going;
#then, go back to 1st line Autophagy; 71 yy, p
#n
#go to 1st line of Cell-Cell communication; 71yy, p
#n
#keep going; 

vi templeftecho.txt 
#do %d to clear file;
#i esc !! cat skcm_tcga_drigenes.txt
#:1,$s/^/echo -e -n "/
#:1,$s/$/\\t"; /
#:$
#o        #paste foll line;
#echo -e "#--------------------------------------------------"
#:1
#274yy 
#:$ 
#p 
#:$
#p
#paste 28 times;

paste -d" " templeftecho.txt temp_suprpway_part.txt > temp_echoleft_suprpwaypart.txt
vi temp_echoleft_suprpwaypart.txt
#:1,$s/;  awk/; awk/

vi temp_third_part.txt
#do %d to clear file;
#i esc !! cat temppairlst.txt 
#:1,$s/^/ \&\& (\$2 \~ \//
#:1,$s/\t/ \\(\/)){print "/
#:1,$s/$/\\t" \$1}' cols1_2_all_suprpway_trees_oncokb_genes.txt; echo "";/
#:$
#o        #adding blank line
#:1
#274yy
#:$
#p
#:$
#p        #repeat 28 times

paste -d" " temp_echoleft_suprpwaypart.txt temp_third_part.txt > prep_skcm_fingerprint_onlyhier.sh
vi prep_skcm_fingerprint_onlyhier.sh
#:1,$s/)   /) /

#######modified prep_skcm_fingerprint_onlyhier.sh begins here

cp prep_skcm_fingerprint_onlyhier.sh prep_addnl_skcm_fingerprint_onlyhier.sh
vi prep_addnl_skcm_fingerprint_onlyhier.sh
#:1,$s/\$1}' /"(" \$2}' /
#:1,$s/txt; echo "";/txt | awk -F"\\t|, " '{for \(i=1; i<=NF; i++){if \(\$i \~ \//
#:wq

cp skcm_tcga_drigenes.txt tmp_duplicate.txt
vi tmp_duplicate.txt
#:$        #go to last line
#o         #insert blank line
#esc
#:1        #go to first line
#274yy
#:$
#p
#repeat to get a total of 28 times, for 28 suprpways;

paste -d"\t" prep_addnl_skcm_fingerprint_onlyhier.sh tmp_duplicate.txt > tmpp.txt
vi tmpp.txt
#:1,$s/\/\t/\//
#:1,$s/$/ \\(\/) print \$i}}'/
#:1,$s/\t \\(\/) print \$i}}'//
#:1,$s/}}'/}}' ; echo "" ;/
#:wq

cp tmpp.txt prep_addnl_skcm_fingerprint_onlyhier.sh

sh prep_skcm_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh prep_addnl_skcm_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

mv junk4.txt rncount_hier_skcm_genes.txt

#######modified prep_skcm_fingerprint_onlyhier.sh ends here

#Generating a GENE PATHWAY FINGERPRINT TABLE for skcm, using a modified version of the matrix program; 

#created foll file and pasted the driver genes and nmutns for skcm from excel file cancer_results_new1186.xlsx;
vi skcm_tcga_genes_nmutns.txt

#foll is the all pway input file; 
all_reactome_hierarchies.txt

paste -d"\t" skcm_tcga_genes_nmutns.txt skcm_tcga_drigenes.txt > prep_skcm_infile_gene_pway_fingerprint.sh

vi prep_skcm_infile_gene_pway_fingerprint.sh 
#:1,$s/^/echo "/
#:1,$s/\t/_(/
#:1,$s/\t/)" ; \t/
#:1,$s/\t/awk -F"\\t" '(\$1 \~ \/^/
#:1,$s/$/\$\/) \&\& ((\$2 \~ \/[0-9]\/))' rncount_hier_skcm_genes.txt/

sh prep_skcm_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > gene_wise_hierarchies_skcm.txt

perl gene_pway_fingerprint_mtx.pl all_reactome_hierarchies.txt gene_wise_hierarchies_skcm.txt skcm_genes_pway_fingerprint_mtx.out

#foll cmds help in checking output file;  
awk -F"   " '((NR==1)||($NF>1))' skcm_genes_pway_fingerprint_mtx.out | more
#The following command line uses awk to prepend the last field of each line of file.txt, does a reverse 
#numerical sort, then uses cut to remove the added field:
awk '{print $NF,$0}' skcm_genes_pway_fingerprint_mtx.out | sort -nr | cut -f2- -d' ' | more
awk -F"   " '((NR==1)||($NF!=0))' skcm_genes_pway_fingerprint_mtx.out | more

#have to make format of output file suitable for xl; 
vi skcm_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#Took this file to xl file: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx

--------------------------------------------------

#Getting pway fingerprint matrix for LAML;

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint

#from xl file, D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\cancer_results_new1186.xlsx ,
#sheet = can_wise_driver_counts copied the gene name col for LAML into the foll file: 
vi /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/laml_tcga_drigenes.txt
#/-
#:1,$s/-/_/       #this was done to make HLA-A to HLA_A, etc..

paste -d"\t" laml_tcga_drigenes.txt laml_tcga_drigenes.txt > temppairlst.txt

#creating prep file for laml;
cp prep_kirc_fingerprint_onlyhier.sh temp_prep_laml_fingerprint_onlyhier.sh

awk -F"; " '{print $2}' temp_prep_laml_fingerprint_onlyhier.sh | awk -F"&& " '{print $1}' > temp_suprpway_part.txt
#kirc had 102 genes; laml has 92; 92 - 102 = -10 genes; thus, kirc has MORE lines than needed for laml; edit 
#temp_suprpway_part.txt, and REMOVE 10 lines; do 10dd for each suprpway; i.e., remove 10 lines for each suprpway; 
vi temp_suprpway_part.txt
#go to 1st line of Autophagy; 10dd 
#/^$
#go to 1st line of Cell-Cell communication; 10dd 
#n
#keep going;

vi templeftecho.txt 
#do %d to clear file;
#i esc !! cat laml_tcga_drigenes.txt
#:1,$s/^/echo -e -n "/
#:1,$s/$/\\t"; /
#:$
#o        #paste foll line;
#echo -e "#--------------------------------------------------"
#:1
#93yy 
#:$ 
#p 
#:$
#p
#paste 28 times;

paste -d" " templeftecho.txt temp_suprpway_part.txt > temp_echoleft_suprpwaypart.txt
vi temp_echoleft_suprpwaypart.txt
#:1,$s/;  awk/; awk/

vi temp_third_part.txt
#do %d to clear file; 
#i esc !! cat temppairlst.txt 
#:1,$s/^/ \&\& (\$2 \~ \//
#:1,$s/\t/ \\(\/)){print "/
#:1,$s/$/\\t" \$1}' cols1_2_all_suprpway_trees_oncokb_genes.txt; echo "";/
#:$
#o        #adding blank line
#:1
#93yy
#:$
#p
#:$
#p        #repeat 28 times

paste -d" " temp_echoleft_suprpwaypart.txt temp_third_part.txt > prep_laml_fingerprint_onlyhier.sh
vi prep_laml_fingerprint_onlyhier.sh
#:1,$s/)   /) /

#######modified prep_laml_fingerprint_onlyhier.sh begins here

cp prep_laml_fingerprint_onlyhier.sh prep_addnl_laml_fingerprint_onlyhier.sh
vi prep_addnl_laml_fingerprint_onlyhier.sh
#:1,$s/\$1}' /"(" \$2}' /
#:1,$s/txt; echo "";/txt | awk -F"\\t|, " '{for \(i=1; i<=NF; i++){if \(\$i \~ \//
#:wq

cp laml_tcga_drigenes.txt tmp_duplicate.txt
vi tmp_duplicate.txt
#:$        #go to last line
#o         #insert blank line
#esc
#:1        #go to first line
#93yy
#:$
#p
#repeat to get a total of 28 times, for 28 suprpways;

paste -d"\t" prep_addnl_laml_fingerprint_onlyhier.sh tmp_duplicate.txt > tmpp.txt
vi tmpp.txt
#:1,$s/\/\t/\//
#:1,$s/$/ \\(\/) print \$i}}'/
#:1,$s/\t \\(\/) print \$i}}'//
#:1,$s/}}'/}}' ; echo "" ;/
#:wq

cp tmpp.txt prep_addnl_laml_fingerprint_onlyhier.sh

sh prep_laml_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh prep_addnl_laml_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

mv junk4.txt rncount_hier_laml_genes.txt

#######modified prep_laml_fingerprint_onlyhier.sh ends here

#Generating a GENE PATHWAY FINGERPRINT TABLE for laml, using a modified version of the matrix program; 

#created foll file and pasted the driver genes and nmutns for laml from excel file cancer_results_new1186.xlsx;
vi laml_tcga_genes_nmutns.txt

#foll is the all pway input file; 
all_reactome_hierarchies.txt

paste -d"\t" laml_tcga_genes_nmutns.txt laml_tcga_drigenes.txt > prep_laml_infile_gene_pway_fingerprint.sh

vi prep_laml_infile_gene_pway_fingerprint.sh 
#:1,$s/^/echo "/
#:1,$s/\t/_(/
#:1,$s/\t/)" ; \t/
#:1,$s/\t/awk -F"\\t" '(\$1 \~ \/^/
#:1,$s/$/\$\/) \&\& ((\$2 \~ \/[0-9]\/))' rncount_hier_laml_genes.txt/

sh prep_laml_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > gene_wise_hierarchies_laml.txt

perl gene_pway_fingerprint_mtx.pl all_reactome_hierarchies.txt gene_wise_hierarchies_laml.txt laml_genes_pway_fingerprint_mtx.out

#foll cmds help in checking output file;  
awk -F"   " '((NR==1)||($NF>1))' laml_genes_pway_fingerprint_mtx.out | more
#The following command line uses awk to prepend the last field of each line of file.txt, does a reverse 
#numerical sort, then uses cut to remove the added field:
awk '{print $NF,$0}' laml_genes_pway_fingerprint_mtx.out | sort -nr | cut -f2- -d' ' | more
awk -F"   " '((NR==1)||($NF!=0))' laml_genes_pway_fingerprint_mtx.out | more

#have to make format of output file suitable for xl; 
vi laml_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#Took this file to xl file: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx

--------------------------------------------------

#cmds to get gene_pway_fingerprint for each gene in each cancer;

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt

#for each gene in a cancer, only hierarchies in which the gene participates in are listed; also, cancer genes 
#which co-occur in each hierarchy are listed;   
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
kirc_genes_pway_fingerprint_mtx.out > kirc_interim1.txt

#to the above file, the foll cmd adds a col indicating the minimum superpway name; 
awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' kirc_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > kirc_interim2.txt 

#foll cmd (not used, but illustrative of associative arrays) uses an associative array and prints 
#each unique combination of: (gene name-superpway name-number of hierarchies in superpway the gene 
#participates in), and prints the number of times this combination occurs; in addition to the above 
#associative array, it also prints the original line in input file;
#awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_desc"} { k=$1 OFS $2 OFS $4; a[k]++; b[k]=$0; } \
#END { for(i in a) print i,a[i],b[i] }' kirc_interim2.txt

#copy kirc_interim2.txt created above;
cp kirc_interim2.txt kirc_interim2at.txt

#replaced tabs with @; tab as field-separator DOES NOT WORK with unix sort;
vi kirc_interim2at.txt
#:1,$s/\t/@/g

#sort in ASCENDING order; k1=gene; k2=minimal suprpway name; k4=n reactions in hierarchy gene participates in; 
sort --field-separator='@' -k1,1 -k2,2 -k4,4g kirc_interim2at.txt | sed -s 's/@/\t/g' > kirc_interim3.txt 

#"Seems to work!"; Useful cmd for checking; 
#awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; fullarrsiz=i; key1=$1 OFS $2; \
#a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
#{print b[j],"xxx", k1, a[k1]}}}}' kirc_interim3.txt | more

#using associative array to add a col with the largest no of REACTIONS a gene participates in; 
#that would be the LAST ELEMENT in the assoc array for a particular key consisting of (gene-suprpway name); 
#the above sort cmd has arranged: (gene-minimal suprpway name-n reactions in hierarchy gene participates in) 
#in ASCENDING order; the cmd below writes the LAST ELEMENT (LARGEST number of reactions obsvd for a gene-suprpway) 
#pair, next to ALL occurrences of the gene-suprpway pair; 
awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' kirc_interim3.txt > kirc_interim4.txt

#replacing tab in above file to @; sorting: k1=gene, k7gr=DUMMY value of largest number of rns gene participates 
#in in hierarchy; k2=minimal suprpway name; k12gr=TRUE number of rns gene participates in in hierarchy; 
sed -e 's/\t/@/g' kirc_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > kirc_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' kirc_interim5.txt > kirc_fprint1.txt

--------------------------------------------------
#kirc_fprint1.txt lists out the genes, and the hierarchies each gene participates in, in a column;
#i.e., genes-and-their-hierarchies are listed one after another; 
#what is needed is that each gene, and the hierarchies it particpates in, should be listed as a column; 
#next to this column, the next gene and the hierarchies it participates in should be listed; and so on;
#i.e., the kirc_fprint1.txt file should be written as a kind of matrix; 

#things to do after the matrix writing script is ready, but before running for different cancers:
#1) arrange genes as in the cancer tcga tables; maybe by using grep;  
#Answer: the problem with doing this in a simple way (e.g., grep) BEFORE running the script below 
#is that the scanning order being used for associative array traversal (PROCINFO) determines the order
#in which genes are output; thus, arranging the genes in the input file in a particular order WILL NOT WORK; 
#if necessary, the order of genes will have to be taken care of AFTER running the script;
#2) take care of genes with no pways; e.g., TET2, PTPRT, ANKRD11, BCOR, EWSR1, FAT1, TET1 in kirc;
#Answer: genes not participating in any hierarchy GET LEFT OUT of the matrix; above, while generating 
#kirc_fprint1.txt, only hierarchies in which a gene participates are reported; if a gene does not participate 
#in any hierarchy (probably because the gene is not in Reactome), it does not appear in the kirc_fprint1.txt 
#output file; thus, after running script below, one will have to MANUALLY ADD the genes into the matrix; 
#3) edit kirc_fprint1.txt file to retain 3 cols; i.e., remove tabs in the cols after the col next to the 
#hierarchy col; no need for gene name in each line; one col for hierarchy, one col for co-occurrences;
#Answer: this will be taken care of!

#trying to write pway fingerprint file in the form of a matrix; 

cp kirc_fprint1.txt tmp_fprint1.txt
#cut --fields=1,2,3 tmp_fprint1.txt

#created t
#foll cmd replaces \t after all except the first two cols in the file, with ',' ;
#i.e., the file now has exactly 3 cols;
sed -e 's/\t/@/g' tmp_small.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g'


#cmd used to count number of lines for each gene;
# awk -F"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"}\
# {k=$1 OFS; a[k]++;} END {for (var in a) print var, a[var]}' tmp_small.txt | more
#AJUBA_(1)               3
#AKT1_(1)                36
#APC_(2)                 15
#TET2_(4)                1
#VHL_(149)               7
#ZFHX3_(2)               1


#Problem observed upon using the following OLD SCRIPT, which gives WRONG RESULTS: 
#input file has tp53 before tp53bp1; but output file has tp53bp1 before tp53;
#first 5 lines of tp53 are not being printed; first five lines of tp53bp1 are being
#printed, and alongside them, the second 5 lines of tp53 are being printed;
#in the end, 5 lines of tp53bp1 are again being printed to make up count of 40 for tp53; why??
#procinfo trouble?? No, it is not PROCINFO; removing PROCINFO does not rectify problem;
#separating TP53BP1 and TP53 by SUZ12 does solve the problem; 

#Below is the OLD SCRIPT, NOT TO BE USED; GIVES WRONG RESULTS; script not deleted because it was part of learning 
#process; the associative array is sorted INDEPENDENTLY of the hierarchy-lines array; thus correspondence between 
#gene-name-associative-array and the hierarchy-lines-normal-array is lost; it gives wrong results when 
#ATRX hierarchy lines occur before ATR hierarchy lines;  or when TP53 hierarchy lines occur before TP53BP1 
#hierarchy lines; wrong results are obtained because in the gene-name-associative-array, ATR occurs before ATRX, and TP53BP1
#occurs before TP53; but, in the hierarchy-lines-array, the hierarchy-lines for ATRX occur before those of ATR, 
#and hierarchy-lines of TP53 occur before TP53BP1; thus, for the ATR gene, ATRX hierarchy lines are taken, and 
#for the TP53BP1 gene, TP53 hierarchy lines are taken;  

# awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
# {key1_gene=$1; key2_hier_nrns_cogenes=$2 OFS $3; numgenelines[key1_gene]++; \
# ngenes=length(numgenelines); i++; b_key2_arr[i]=key2_hier_nrns_cogenes; \
# nhierlines=length(b_key2_arr);} \
# END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
# {for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
# ilines=0; irow=0; \
# while (ilines <= nhierlines) { \
# m=irow+1; \
# for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
# lineno+=ngenelines[cols_in_aline]; \
# {if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
# else {printf b_key2_arr[m] OFS; ilines++;  \
# m=m+ngenelines[cols_in_aline]; }} \
# } \
# print ""; \
# irow++; \
# lineno=0; \
# #print "***" ilines, nhierlines; \
# if(ilines == nhierlines){break} \
# }}' trial_3old_tmp_small.txt | more

#cmd below prepares input file;
sed -e 's/\t/@/g' tmp_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > trial_tmp_fprint1.txt


#foll was tried and works, but was not helpful;
#https://stackoverflow.com/questions/21616460/awk-outputting-elements-out-of-order
#awk -FS"\t" 'BEGIN {FS=OFS="\t"; j=0; i=0;} \
#{numgenelines[i++]=$1; ngenes=length(numgenelines); print ngenes;} \
#END { print "i=", i; for(l=0;l<i;l++) print numgenelines[l];}' tmp_tp53_tp53bp1.txt | more


#DO NOT DELETE below; it has USEFUL WRITE STATEMENTS written for checking;
#  awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
#  {key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \ 
#  p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
#  END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
#  for (h=1; h<=ngenes; h++) { \
#  #print genenm[h], ngenelines[h]; \
#  for (o=1; o<=total_lines_in_file; o++) { \
#  split (lines_in_file_arr[o], tmparr, "\t"); \
#  if (tmparr[1] == genenm[h]) { \
#  #print tmparr[1], genenm[h]; \
#  i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
#  #q++; ordered_lines_in_file[q]=lines_in_file_arr[o];}}} \
#  #{for(r=1; r<=q; r++) print ordered_lines_in_file[r];}} \
#  #{for(s=1; s<=i; s++) print b_key2_arr[s]; } \
#  nhierlines=length(b_key2_arr); \
#  below not changed; \
#  {for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
#  ilines=0; irow=0; \
#  while (ilines <= nhierlines) { \
#  m=irow+1; \
#  for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
#  lineno+=ngenelines[cols_in_aline]; \
#  {if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
#  else {printf b_key2_arr[m] OFS; ilines++;  \
#  m=m+ngenelines[cols_in_aline]; }} \
#  } \
#  print ""; \
#  irow++; \
#  lineno=0; \
#  #print "***" ilines, nhierlines; \
#  if(ilines == nhierlines){break} \
#  }}' tmp_tp53_tp53bp1.txt | more


#THIS IS THE NEW, FINAL AND CORRECT SCRIPT; it seems to be working;
#Final Script:
awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \ 
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' tmp_tp53_tp53bp1.txt | more

--------------------------------------------------
#Running above script for different cancers; the output file obtained for each cancer has to be opened 
#in xl;  

#KIRC; for kirc, the file kirc_fprint1.txt has been generated above; 
sed -e 's/\t/@/g' kirc_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > kirc_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' kirc_fprint2.txt > kirc_genewise_pway_fprint.txt 

--------------------------------------------------

#COADREAD; for coadread, the coadread fprint1 file has to be generated as described below;

#cmds to get gene_pway_fingerprint for each gene in each cancer;

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt

#for each gene in a cancer, only hierarchies in which the gene participates in are listed; also, cancer genes 
#which co-occur in each hierarchy are listed;   
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/coadread_genes_pway_fingerprint_mtx.out > coadread_interim1.txt

awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' coadread_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > coadread_interim2.txt 

cp coadread_interim2.txt coadread_interim2at.txt

vi coadread_interim2at.txt
#:1,$s/\t/@/g

sort --field-separator='@' -k1,1 -k2,2 -k4,4g coadread_interim2at.txt | sed -s 's/@/\t/g' > coadread_interim3.txt 

awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' coadread_interim3.txt > coadread_interim4.txt

sed -e 's/\t/@/g' coadread_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > coadread_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' coadread_interim5.txt > coadread_fprint1.txt

sed -e 's/\t/@/g' coadread_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > coadread_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' coadread_fprint2.txt > coadread_genewise_pway_fprint.txt 

--------------------------------------------------

#BRCA; generating fprint1 file; 

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt

#for each gene in a cancer, only hierarchies in which the gene participates in are listed; also, cancer genes 
#which co-occur in each hierarchy are listed;   
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/brca_genes_pway_fingerprint_mtx.out > brca_interim1.txt

awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' brca_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > brca_interim2.txt 

cp brca_interim2.txt brca_interim2at.txt

vi brca_interim2at.txt
#:1,$s/\t/@/g

sort --field-separator='@' -k1,1 -k2,2 -k4,4g brca_interim2at.txt | sed -s 's/@/\t/g' > brca_interim3.txt 

awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' brca_interim3.txt > brca_interim4.txt

sed -e 's/\t/@/g' brca_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > brca_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' brca_interim5.txt > brca_fprint1.txt

sed -e 's/\t/@/g' brca_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > brca_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' brca_fprint2.txt > brca_genewise_pway_fprint.txt 

--------------------------------------------------

#HNSC; generating fprint1 file; 

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt

#for each gene in a cancer, only hierarchies in which the gene participates in are listed; also, cancer genes 
#which co-occur in each hierarchy are listed;   
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/hnsc_genes_pway_fingerprint_mtx.out > hnsc_interim1.txt

awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' hnsc_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > hnsc_interim2.txt 

cp hnsc_interim2.txt hnsc_interim2at.txt

vi hnsc_interim2at.txt
#:1,$s/\t/@/g

sort --field-separator='@' -k1,1 -k2,2 -k4,4g hnsc_interim2at.txt | sed -s 's/@/\t/g' > hnsc_interim3.txt 

awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' hnsc_interim3.txt > hnsc_interim4.txt

sed -e 's/\t/@/g' hnsc_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > hnsc_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' hnsc_interim5.txt > hnsc_fprint1.txt

sed -e 's/\t/@/g' hnsc_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > hnsc_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' hnsc_fprint2.txt > hnsc_genewise_pway_fprint.txt 

--------------------------------------------------

#GBM; generating fprint1 file; 

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt

#for each gene in a cancer, only hierarchies in which the gene participates in are listed; also, cancer genes 
#which co-occur in each hierarchy are listed;   
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/gbm_genes_pway_fingerprint_mtx.out > gbm_interim1.txt

awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' gbm_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > gbm_interim2.txt 

cp gbm_interim2.txt gbm_interim2at.txt

vi gbm_interim2at.txt
#:1,$s/\t/@/g

sort --field-separator='@' -k1,1 -k2,2 -k4,4g gbm_interim2at.txt | sed -s 's/@/\t/g' > gbm_interim3.txt 

awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' gbm_interim3.txt > gbm_interim4.txt

sed -e 's/\t/@/g' gbm_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > gbm_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' gbm_interim5.txt > gbm_fprint1.txt

sed -e 's/\t/@/g' gbm_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > gbm_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' gbm_fprint2.txt > gbm_genewise_pway_fprint.txt 

--------------------------------------------------

#LUAD; generating fprint1 file; 

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt

#for each gene in a cancer, only hierarchies in which the gene participates in are listed; also, cancer genes 
#which co-occur in each hierarchy are listed;   
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/luad_genes_pway_fingerprint_mtx.out > luad_interim1.txt

awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' luad_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > luad_interim2.txt 

cp luad_interim2.txt luad_interim2at.txt

vi luad_interim2at.txt
#:1,$s/\t/@/g

sort --field-separator='@' -k1,1 -k2,2 -k4,4g luad_interim2at.txt | sed -s 's/@/\t/g' > luad_interim3.txt 

awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' luad_interim3.txt > luad_interim4.txt

sed -e 's/\t/@/g' luad_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > luad_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' luad_interim5.txt > luad_fprint1.txt

sed -e 's/\t/@/g' luad_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > luad_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' luad_fprint2.txt > luad_genewise_pway_fprint.txt 

--------------------------------------------------

#SKCM; generating fprint1 file; 

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt

#for each gene in a cancer, only hierarchies in which the gene participates in are listed; also, cancer genes 
#which co-occur in each hierarchy are listed;   
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/skcm_genes_pway_fingerprint_mtx.out > skcm_interim1.txt

awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' skcm_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > skcm_interim2.txt 

cp skcm_interim2.txt skcm_interim2at.txt

vi skcm_interim2at.txt
#:1,$s/\t/@/g

sort --field-separator='@' -k1,1 -k2,2 -k4,4g skcm_interim2at.txt | sed -s 's/@/\t/g' > skcm_interim3.txt 

awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' skcm_interim3.txt > skcm_interim4.txt

sed -e 's/\t/@/g' skcm_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > skcm_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' skcm_interim5.txt > skcm_fprint1.txt

sed -e 's/\t/@/g' skcm_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > skcm_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' skcm_fprint2.txt > skcm_genewise_pway_fprint.txt 

--------------------------------------------------

#LAML; generating fprint1 file; 

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt

#for each gene in a cancer, only hierarchies in which the gene participates in are listed; also, cancer genes 
#which co-occur in each hierarchy are listed;   
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/laml_genes_pway_fingerprint_mtx.out > laml_interim1.txt

awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' laml_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > laml_interim2.txt 

cp laml_interim2.txt laml_interim2at.txt

vi laml_interim2at.txt
#:1,$s/\t/@/g

sort --field-separator='@' -k1,1 -k2,2 -k4,4g laml_interim2at.txt | sed -s 's/@/\t/g' > laml_interim3.txt 

awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' laml_interim3.txt > laml_interim4.txt

sed -e 's/\t/@/g' laml_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > laml_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' laml_interim5.txt > laml_fprint1.txt

sed -e 's/\t/@/g' laml_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > laml_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' laml_fprint2.txt > laml_genewise_pway_fprint.txt 

#the above *_genewise_pway_fprint.txt files (8 in number) were taken to windows and displayed in
#the xl file: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet (example) = kirc_genewise_pway_fprint

--------------------------------------------------

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt

#files containing genes-in-descending-order-of-number-of-cbio-mutations are in the foll area;  
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/brca_tcga_genes_nmutns.txt
cp /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/brca_tcga_genes_nmutns.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/brca_orig_genlst.txt
vi brca_orig_genlst.txt
#:1,$s/\t/_(/
#:1,$s/$/)/

#awk -F"\t" '{IFS=OFS="\t"} {for (j=1; j<=4; j++) {mtx[j,NR] = $j; printf mtx[j,NR] OFS;} printf "\n"}' test.txt
#awk -F"\t" '{IFS=OFS="\t"} (NR<=4){for (j=1; j<=6; j++) {mtx[j,NR] = $j; printf mtx[j,NR] OFS;} printf "\n"}' brca_genewise_pway_fprint.txt

#awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} END {for (k=1; k<=ngenes; k++) {print orig_gene_order[k];}}' brca_orig_genlst.txt brca_genewise_pway_fprint.txt

#awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} ((NR != FNR) && (FNR <= 4)){for (j=1; j<=6; j++) {mtx[j,FNR] = $j; printf "@@@" OFS mtx[j,FNR] OFS;} printf "\n"} END { {for (k=1; k<=ngenes; k++) {print orig_gene_order[k];}} {for (l=1; l<=4; l++) { for (m=1; m<=6; m++) { printf "***" OFS mtx[m,l] OFS; } printf "\n"}} }' brca_orig_genlst.txt brca_genewise_pway_fprint.txt | more

#awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
#((NR != FNR) && (FNR <= 4)){for (j=1; j<=6; j++) {mtx[j,FNR] = $j; } } \
#END { {for (k=1; k<=ngenes; k++) {print orig_gene_order[k];}} \
#{for (l=1; l<=4; l++) { for (m=1; m<=6; m++) { printf mtx[m,l] OFS; } printf "\n"}} }' \
#brca_orig_genlst.txt trial.txt | more

#awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
#((NR != FNR) && (FNR <= 4)){for (j=1; j<=6; j++) {mtx[j,FNR] = $j; } } \
#END { {for (k=1; k<=ngenes; k++) {print orig_gene_order[k];}} \
#{for (m=1; m<=6; m++) { for (l=1; l<=4; l++) { print mtx[m,l] OFS; } } print ""; } }' \
#short_brca_orig_order.txt trial.txt | more

#awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
#((NR != FNR) && (FNR <= 4)){for (j=1; j<=6; j++) {mtx[j,FNR] = $j; } } \
#END { {for (k=1; k<=ngenes; k++) {print orig_gene_order[k];}} \
#{for (m=1; m<=6; m+=2) { for (l=1; l<=4; l++) { printf mtx[m,l] OFS mtx[m+1,l] OFS; printf "\n"} } print ""; } }' \
#short_brca_orig_order.txt trial.txt | more

#awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
#((NR != FNR) && (FNR <= 4)){for (j=1; j<=6; j++) {mtx[j,FNR] = $j; } } \
#END { {for (k=1; k<=ngenes; k++) { \
#{for (m=1; m<=6; m+=2) { for (l=1; l<=4; l++) { if ((l==1) && (mtx[m,1] == orig_gene_order[k])) { \
#newm++; }  \
#if((l>=1) && (mtx[m,1] == orig_gene_order[k])) { \
#rearrngd_mtx[newm,l]=mtx[m,l]; rearrngd_mtx[newm+1,l]=mtx[m+1,l]; \
#printf rearrngd_mtx[newm,l] OFS rearrngd_mtx[newm+1,l] OFS; printf "\n"; \
#}}} \
#print ""; \
#}}}}' short_brca_orig_order.txt trial.txt | more

#seems to be working! DO NOT DELETE; the cmd has useful write statements; the cmd
#is for a portion of the complete files; 
# awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
# ((NR != FNR) && (FNR <= 4)){for (j=1; j<=6; j++) {mtx[j,FNR] = $j; } } \
# END { {for (k=1; k<=ngenes; k++) { \
# {for (m=1; m<=6; m++) { for (l=1; l<=4; l++) { \
# {if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
# { newm++; mhitnxt=m+1; new2m=newm+1; } }  \
# {if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
# {rearrngd_mtx[newm,l]=mtx[m,l]; printf "indx" OFS m OFS newm OFS l OFS rearrngd_mtx[newm,l] OFS; print ""; } } \
# {if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; printf "mhit" OFS mhitnxt OFS newm OFS l OFS rearrngd_mtx[newm,l] OFS; print ""; } } \
# } } mhitnxt=0; } } \
# print ""; \
# } \
# { for (irow=1; irow<=4; irow++) { for (mcol=1; mcol<=6; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
# short_brca_orig_order.txt trial.txt | more

#Seems to be working! DO NOT DELETE, as the cmd has useful write statements; the cmd is for the complete 
#input files; i.e., brca_orig_genlst.txt and brca_genewise_pway_fprint.txt;  
# awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
# (NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
# END { {for (k=1; k<=ngenes; k++) { \
# {for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
# {if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
# { newm++; mhitnxt=m+1; new2m=newm+1; } }  \
# {if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
# {rearrngd_mtx[newm,l]=mtx[m,l]; printf "indx" OFS m OFS newm OFS l OFS rearrngd_mtx[newm,l] OFS; print ""; } } \
# {if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; printf "mhit" OFS mhitnxt OFS newm OFS l OFS rearrngd_mtx[newm,l] OFS; print ""; } } \
# } } mhitnxt=0; } } \
# print ""; \
# } \
# { for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
# brca_orig_genlst.txt brca_genewise_pway_fprint.txt | more

#FINAL COMMAND; the cmd is for the complete input files; i.e., brca_orig_genlst.txt and brca_genewise_pway_fprint.txt
#diagnostic write statements, present in the above cmd, have been deleted;
#not sure why I have used orig_gene_order[NR]=$i, but it works; same results obtained with
#orig_gene_order[NR]=$0; 
awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
brca_orig_genlst.txt brca_genewise_pway_fprint.txt | more

#RUNNING THE ABOVE SCRIPT FOR ALL THE CANCERS;  
#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt

#BRCA;
awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
brca_orig_genlst.txt brca_genewise_pway_fprint.txt > brca_ordrd_genewise_pway_fprint.txt

#KIRC
#copying file containing genes-in-descending-order-of-number-of-cbio-mutations;  
cp /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/kirc_tcga_genes_nmutns.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/kirc_orig_genlst.txt
vi kirc_orig_genlst.txt
#:1,$s/\t/_(/
#:1,$s/$/)/

awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
kirc_orig_genlst.txt kirc_genewise_pway_fprint.txt > kirc_ordrd_genewise_pway_fprint.txt

#COADREAD
#copying file containing genes-in-descending-order-of-number-of-cbio-mutations;  
cp /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/coadread_tcga_genes_nmutns.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/coadread_orig_genlst.txt
vi coadread_orig_genlst.txt
#:1,$s/\t/_(/
#:1,$s/$/)/

awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
coadread_orig_genlst.txt coadread_genewise_pway_fprint.txt > coadread_ordrd_genewise_pway_fprint.txt


#HNSC
#copying file containing genes-in-descending-order-of-number-of-cbio-mutations;  
cp /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/hnsc_tcga_genes_nmutns.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/hnsc_orig_genlst.txt
vi hnsc_orig_genlst.txt
#:1,$s/\t/_(/
#:1,$s/$/)/

awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
hnsc_orig_genlst.txt hnsc_genewise_pway_fprint.txt > hnsc_ordrd_genewise_pway_fprint.txt


#GBM
#copying file containing genes-in-descending-order-of-number-of-cbio-mutations;  
cp /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/gbm_tcga_genes_nmutns.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/gbm_orig_genlst.txt
vi gbm_orig_genlst.txt
#:1,$s/\t/_(/
#:1,$s/$/)/

awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
gbm_orig_genlst.txt gbm_genewise_pway_fprint.txt > gbm_ordrd_genewise_pway_fprint.txt

#LUAD
#copying file containing genes-in-descending-order-of-number-of-cbio-mutations;  
cp /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/luad_tcga_genes_nmutns.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/luad_orig_genlst.txt
vi luad_orig_genlst.txt
#:1,$s/\t/_(/
#:1,$s/$/)/

awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
luad_orig_genlst.txt luad_genewise_pway_fprint.txt > luad_ordrd_genewise_pway_fprint.txt

#SKCM
#copying file containing genes-in-descending-order-of-number-of-cbio-mutations;  
cp /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/skcm_tcga_genes_nmutns.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/skcm_orig_genlst.txt
vi skcm_orig_genlst.txt
#:1,$s/\t/_(/
#:1,$s/$/)/

awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
skcm_orig_genlst.txt skcm_genewise_pway_fprint.txt > skcm_ordrd_genewise_pway_fprint.txt

#LAML
#copying file containing genes-in-descending-order-of-number-of-cbio-mutations;  
cp /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/laml_tcga_genes_nmutns.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/laml_orig_genlst.txt
vi laml_orig_genlst.txt
#:1,$s/\t/_(/
#:1,$s/$/)/

awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
laml_orig_genlst.txt laml_genewise_pway_fprint.txt > laml_ordrd_genewise_pway_fprint.txt


#taking the above *_genewise_pway_fprint.txt files (8 in number) to windows and displaying it in
#the xl file: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx
#sheet (example) = kirc_ordrd_genewise_pway_fprint

--------------------------------------------------

#Counting; 

#Have to create a table of the foll kind; the table counts the fraction of reactions
#in each hierarchy that a gene participates in; the sum of the fractions in a 
#top-level pway that the gene participates in are multiplied by the number of mutns 
#observed in the gene; 

#FLT3 (51)			NRAS (16)	
#Immune System	20/24; 		Immune System	4/11;
#Immune System	12/12; 		Immune System	1/10;
#Immune System	4/4; 		Immune System	1/17;
#Immune System	3/3; 		Immune System	1/20;
#		3.83*51=	Immune System 	1/24;
#		195.5		Immune System 	1/2;
#						1.11*16=
#						17.76
#Signal Transduction	1/1; 		ST	8/12
#Signal Transduction	1/1; 		ST	7/21
#Signal Transduction	1/7;		ST	5/14
#Signal Transduction	1/8;		ST	4/12
#Signal Transduction	1/9; 		ST	4/8
#		ST	3/10			2.38*51=
#		ST      3/10			121.33	
#		ST	3/10
#		ST	3/6
#		ST	2/13
#		ST	2/4
#		ST	2/5
#		ST	2/5
#		ST	2/9
#		ST	2/9
#		ST	2/9
#		ST	2/9
#		ST	1/12
#		ST	1/16
#		ST	1/2
#		ST	1/2
#		ST	1/31
#		ST	1/3
#		ST	1/4
#		ST	1/4
#		ST	1/4
#		ST	1/4
#		ST	1/4
#		ST	1/4
#		ST	1/4
#		ST	1/4
#		ST	1/5
#		ST	1/5
#		ST	1/6
#		ST	1/6
#		ST	1/6
#		ST	1/7
#		ST	1/8
#			9.76*16= 
#			156.2

#In LAML (considering only above 2 genes),
#Immune System = 213.26
#Signal Transduction = 277.53

#Plan to use the foll order of top-level pways while counting;
#Chromatin organization (R-HSA-4839726)
#DNA Repair (R-HSA-73894)
#DNA Replication (R-HSA-69306)

#Cell Cycle (R-HSA-1640170)

#Cell-Cell communication (R-HSA-1500931)
#Extracellular matrix organization (R-HSA-1474244)
#Organelle biogenesis and maintenance (R-HSA-1852241)
#Transport of small molecules (R-HSA-382551)
#Autophagy (R-HSA-9612973)
#Protein localization (R-HSA-9609507)
#Vesicle-mediated transport (R-HSA-5653656)

#Reproduction (R-HSA-1474165)
#Developmental Biology (R-HSA-1266738)

#Muscle contraction (R-HSA-397014)
#Neuronal System (R-HSA-112316)
#Sensory Perception (R-HSA-9709957)
#Circadian Clock (R-HSA-400253)
#Digestion and absorption (R-HSA-8963743)
#Metabolism (R-HSA-1430728)

#Metabolism of RNA (R-HSA-8953854)
#Metabolism of proteins (R-HSA-392499)

#Hemostasis (R-HSA-109582)
#Immune System (R-HSA-168256)

#Programmed Cell Death (R-HSA-5357801)

#Cellular responses to external stimuli (R-HSA-8953897)
#Signal Transduction (R-HSA-162582)

#Gene expression (Transcription) (R-HSA-74160)

#Disease (R-HSA-1643685)

###This cmd file continued as: /scratch/prasannalab/cancers_in_detail/pway_anal/cmd5_counting.sh

--------------------------------------------------
--------------------------------------------------

#unix notes:
#https://stackoverflow.com/questions/35731441/numeric-expression-in-if-condition-of-awk
#In awk, think of $ as an OPERATOR to retrieve the VALUE of the named FIELD NUMBER ($0 being a special case)

#how to split file; good trick
#https://unix.stackexchange.com/questions/705263/how-to-sort-each-20-lines-in-a-1000-line-file-and-save-only-the-sorted-line-with
#split -l 20 file.txt --filter "sort -nk 4|tail -n 1"
#The file gets split ted in packets of 20 l ines, then the filter option filters each packet by the given commands, so they get 
#sort ed n umerically by the 4th k ey and only the last line (highest value) extracted by tail.

#https://unix.stackexchange.com/questions/492500/awk-replace-one-character-only-in-a-certain-column
#awk 'BEGIN{FS=OFS=";"} {gsub(/\./, ",", $2)} 1' ip.txt

#https://www.gnu.org/software/gawk/manual/html_node/Multidimensional.html
#multidimensional awk array; 

#for help with awk asort 
#https://www.tutorialspoint.com/awk/awk_string_functions.htm

#counting records based on multiple columns;
#https://stackoverflow.com/questions/54214092/awk-script-for-counting-records-based-on-multiple-comditions
#awk '
#BEGIN {                        
#    FS=OFS=","                 # field separators
#}
#NR>1 {                         # after header
#    k=$1 OFS $2                # set the key
#    a[k]++                     # total count of unique $1 $2
#    b[k]+=($3==0)              # count where $3==0
#    c[k]+=($3>0)               # count where $3>0
#}
#END {                          # after all processing is done
#    for(i in a)                # output values
#        print i,a[i],b[i],c[i]
#}' file

#https://www.gnu.org/software/gawk/manual/html_node/Controlling-Scanning.html
#PROCINFO["sorted_in"] = "@ind_str_asc"

#very helpful;
#https://www.thegeekstuff.com/2010/03/awk-arrays-explained-with-5-practical-examples/

#https://stackoverflow.com/questions/2458346/sort-an-associative-array-in-awk

#helpful
#https://stackoverflow.com/questions/68734738/how-to-compare-values-between-two-different-associative-arrays-in-bash

#sites which helped solve the problem of the disconnect between gene-name associative array, 
#and the normal hierarchy-lines array;
#https://stackoverflow.com/questions/21616460/awk-outputting-elements-out-of-order
#https://www.faceprep.in/c-plus-plus/sort-an-array-according-to-the-order-defined-by-another-array/
#https://www.unix.com/shell-programming-and-scripting/169743-compare-strings-between-2-arrays-print-number-awk.html

--------------------------------------------------

############################################################
############################################################
############################################################

# MASTERFILE10 uses the pathway fingerprints of mutated genes in each cancer to 
#calculate the effect on each top-level pathway in the cancer; identifies the 
#most affected top-level pathways in each cancer; identifies mutated genes which 
#cause the greatest effect on each top-level pathway in each cancer; 

#10) MASTERFILE10 = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/cmd5_counting.sh

#this cmd file is continued from: 
#/scratch/prasannalab/cancers_in_detail/pway_anal/cmd4_forwriteup.sh

#pwd=/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt

#from the slide "29 Reactome top-level pathways" in the ppt file:
# D:\actrec_work\joined_actrec_nov21\work_progress2.pptx , created the foll
#file (by cut-paste and rearrange):
#arrngd_suprpways.txt
#this file has \t at the end of each line which needs to be deleted;
vi arrngd_suprpways.txt
#:1,$s/\t//
#also, changed "Cellular responses to external stimuli (R-HSA-8953897)" to 
#"Cellular responses to stimuli (R-HSA-8953897)", because that is how it appears in the other input
#file (e.g., laml_ordrd_genewise_pway_fprint.txt); 

#this above file should be one input file for the script you are about to write;
#the other input file should be: temp_laml.txt (which you have to create from:
#laml_ordrd_genewise_pway_fprint.txt); 

#below, creating temp_laml.txt; manual calculns for 2 genes in this file are in:
#D:\actrec_work\joined_actrec_nov21\cancer_MD_proj_ongoing4_tcga_data_collection.docx
#foll cmds record the process by which the final script was written; 

#NOTE: edit second input file to remove extra tabs at end of each line;
#REMOVE EXTRA TABS at end of each line of input file; 
cp laml_ordrd_genewise_pway_fprint.txt modified_laml_ordrd_genewise_pway_fprint.txt
vi modified_laml_ordrd_genewise_pway_fprint.txt
#:1,$s/\t\t$/\t/

#awk -F"\t" '{IFS=OFS="\t"} {for (j=1; j<=4; j++) {mtx[j,NR] = $j; printf mtx[j,NR] OFS;} printf "\n"}' laml_ordrd_genewise_pway_fprint.txt > temp_laml.txt

#awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {arrngd_toppways[NR]=$0; ntoppways=length(arrngd_toppways);} END {for (k=1; k<=ntoppways; k++) {print arrngd_toppways[k];}}' arrngd_suprpways.txt temp_laml.txt

#awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {arrngd_toppways[NR]=$0; ntoppways=length(arrngd_toppways);} (NR != FNR){for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; printf "@@@" OFS mtx[j,FNR] OFS;} printf "\n"} END { {for (k=1; k<=ntoppways; k++) {print arrngd_toppways[k];}} { { for (l=1; l<=FNR; l++) { for (m=1; m<=NF; m++) { printf "***" OFS mtx[m,l] OFS; } printf "\n"} } } }' arrngd_suprpways.txt temp_laml.txt

#awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {arrngd_toppways[NR]=$0; ntoppways=length(arrngd_toppways);} \
#(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
#END { {for (k=1; k<=ntoppways; k++) {print arrngd_toppways[k];}} \
#{ {for (l=1; l<=FNR; l++) { for (m=1; m<=NF; m++) { printf mtx[m,l] OFS; } printf "\n"} } } }' \
#arrngd_suprpways.txt temp_laml.txt

#awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {arrngd_toppways[NR]=$0; ntoppways=length(arrngd_toppways);} \
#(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
#END { {for (k=1; k<=ntoppways; k++) {print arrngd_toppways[k];}} \
#{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { print mtx[m,l] OFS; } } print ""; } }' \
#arrngd_suprpways.txt temp_laml.txt

#awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {arrngd_toppways[NR]=$i; ntoppways=length(arrngd_toppways);} \
#(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
#END { {for (k=1; k<=ntoppways; k++) {print arrngd_toppways[k];}} \
#{for (m=1; m<=NF; m+=2) { for (l=1; l<=FNR; l++) { printf mtx[m,l] OFS mtx[m+1,l] OFS; printf "\n"} } print ""; } }' \
#arrngd_suprpways.txt temp_laml.txt

#awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {arrngd_toppways[NR]=$i; ntoppways=length(arrngd_toppways);} \
#(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
#END { {for (k=1; k<=ntoppways; k++) {print arrngd_toppways[k];}} print ""; \
#{for (m=1; m<=NF; m+=2) { for (l=1; l<=FNR; l++) { \
#{ if(mtx[m,l] == mtx[m+1,l]) { continue } } \
#{ if (l==1) { a[m,1]=mtx[m,1]; b[m,1]=mtx[m,1]; c[m,1]=mtx[m,1]; printf a[m,1] OFS b[m,1] OFS c[m,1]; } } \
#{ if (l>1) {split (mtx[m,l], arr1, "|"); a[m,l]=arr1[2]; b[m,l]=arr1[1]; printf a[m,l] OFS b[m,l] OFS; } \
#{split (mtx[m+1,l], arr2, ","); c[m,l]=arr2[1]; printf c[m,l]; print "";} } \
#} print ""; } } }' \
#arrngd_suprpways.txt temp_laml.txt

#awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {arrngd_toppways[NR]=$i; ntoppways=length(arrngd_toppways);} \
#(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
#END { {for (m=1; m<=NF; m+=2) { for (l=1; l<=FNR; l++) { \
#{ if(mtx[m,l] == mtx[m+1,l]) { continue } } \
#{ if (l==1) { a[m,1]=mtx[m,1]; b[m,1]=mtx[m,1]; c[m,1]=mtx[m,1]; printf a[m,1] OFS b[m,1] OFS c[m,1]; } } \
#{ if (l>1) {split (mtx[m,l], arr1, "|"); a[m,l]=arr1[2]; b[m,l]=arr1[1]; printf a[m,l] OFS b[m,l] OFS; } \
#{split (mtx[m+1,l], arr2, ","); c[m,l]=arr2[1]; printf c[m,l]; print "";} } \
#} print ""; } } \
#{ for (m2=1; m2<=NF; m2++) { for (l2=1; l2<=FNR; l2++) { \
#{ if ((a[m2,l2]==b[m2,l2]) && (b[m2,l2]==c[m2,l2])) { continue } } \
#print a[m2,l2], b[m2,l2], c[m2,l2]; } print ""; } }\
#{ for (k=1; k<=ntoppways; k++) {print arrngd_toppways[k];} } print ""; \
#}' \
#arrngd_suprpways.txt temp_laml.txt

##below, has write statements;
#awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {arrngd_toppways[NR]=$i; ntoppways=length(arrngd_toppways);} \
#(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
#END { {for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
##{ if (mtx[m,l] == mtx[m+1,l]) { continue } } \
#{ if ((l==1) && (mtx[m,1] ~ /_/)) { n++; n1=n; a[n1,1]=mtx[m,1]; genenm=mtx[m,1]; \
#n++; n2=n; n++; n3=n; \ 
##print "***" OFS n1 OFS n2 OFS n3 OFS a[n1,1] OFS; \
#} } \
#{ if ((l==1) && (mtx[m,1] !~ /_/)) { a[n2,1]=genenm; \ 
##printf "***" OFS a[n2,1] OFS; \
#a[n3,1]=genenm; print "***" OFS a[n3,1] OFS; } } \ 
#{ if ((l>1) && (mtx[m,l] ~ /R-HSA-/)) { split (mtx[m,l], arr1, "|"); a[n1,l]=arr1[2]; a[n2,l]=arr1[1]; \
#printf a[n1,l] OFS a[n2,l] OFS; } } \
#{ if ((l>1) && (mtx[m,l] !~ /R-HSA-/)) { split (mtx[m,l], arr2, ","); a[n3,l]=arr2[1]; printf a[n3,l]; print "";} } \
#} print ""; print "n=" n;} } \
#{ for (nrow=1; nrow<=FNR; nrow++) { for (ncol=1; ncol<=n; ncol++) { \
#{printf a[ncol,nrow] OFS; } } print ""; } print ""; } \
#}' \
#arrngd_suprpways.txt temp_laml.txt

##NF=5; FNR=72; loop count=360; input file has 29 written lines; 43 blank lines; total=72 lines;
#output file has 72 lines; 29 lines with text; 43 blank lines; thus, input and output files match;  
#awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {arrngd_toppways[NR]=$i; ntoppways=length(arrngd_toppways);} \
#(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
#END { {for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
#{ if ((l==1) && (mtx[m,1] ~ /_/)) { n++; n1=n; a[n1,1]=mtx[m,1]; genenm=mtx[m,1]; \
#n++; n2=n; n++; n3=n; } } \
#{ if ((l==1) && (mtx[m,1] !~ /_/)) { a[n2,1]=genenm; a[n3,1]=genenm; } } \ 
#{ if ((l>1) && (mtx[m,l] ~ /R-HSA-/)) { split (mtx[m,l], arr1, "|"); a[n1,l]=arr1[2]; a[n2,l]=arr1[1]; } } \
#{ if ((l>1) && (mtx[m,l] !~ /R-HSA-/)) { split (mtx[m,l], arr2, ","); a[n3,l]=arr2[1]; } } } } } \
#{ for (nrow=1; nrow<=FNR; nrow++) { for (ncol=1; ncol<=n; ncol++) { \
#{printf a[ncol,nrow] OFS; } } print ""; } } \
#}' \
#arrngd_suprpways.txt temp_laml.txt

##Foll works! Now you have to go to next step; 
#awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {arrngd_toppways[NR]=$i; ntoppways=length(arrngd_toppways);} \
#(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
#END { {for (m=1; m<NF; m++) { for (l=1; l<=FNR; l++) { \
#{ if ((l==1) && (mtx[m,1] ~ /_/)) { n++; n1=n; a[n1,1]=mtx[m,1]; genenm=mtx[m,1]; \
#n++; n2=n; n++; n3=n; } } \
#{ if ((l==1) && (mtx[m,1] !~ /_/)) { a[n2,1]=genenm; a[n3,1]=genenm; } } \ 
#{ if ((l>1) && (mtx[m,l] ~ /R-HSA-/)) { split (mtx[m,l], arr1, "|"); a[n1,l]=arr1[2]; a[n2,l]=arr1[1] } } \
#{ if ((l>1) && (mtx[m,l] !~ /R-HSA-/)) { split (mtx[m,l], arr2, ","); a[n3,l]=arr2[1]; } } } } } \
#{ for (nrow=1; nrow<=FNR; nrow++) { for (ncol=1; ncol<=n; ncol++) { \
#{printf a[ncol,nrow] OFS; } } print ""; } } \
#}' \
#arrngd_suprpways.txt temp_laml.txt

#Things to do (intermediate list): 
#check if each suprpway occurs in col; calculate fractions; add fractions; multiply 
#total fraction by nmutns; 
#edit arrngd_suprpways.txt to remove \t at end of each line; 
#for later; add total for each suprpway across genes in a cancer; this might give you some 
#idea of enriched affected processes;

#Seems to be working! DO NOT DELETE, as it is the script which worked first, and has write statements;  
#awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {arrngd_toppways[NR]=$i; ntoppways=length(arrngd_toppways);} \
#(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
#END { {for (m=1; m<NF; m++) { for (l=1; l<=FNR; l++) { \
#{ if ((l==1) && (mtx[m,1] ~ /_/)) { n++; n1=n; a[n1,1]=mtx[m,1]; genenm=mtx[m,1]; \
#n++; n2=n; n++; n3=n; } } \
#{ if ((l==1) && (mtx[m,1] !~ /_/)) { a[n2,1]=genenm; a[n3,1]=genenm; } } \ 
#{ if ((l>1) && (mtx[m,l] ~ /R-HSA-/)) { split (mtx[m,l], arr1, "|"); a[n1,l]=arr1[2]; a[n2,l]=arr1[1] } } \
#{ if ((l>1) && (mtx[m,l] !~ /R-HSA-/)) { split (mtx[m,l], arr2, ","); a[n3,l]=arr2[1]; } } } } } \
#{ for (nrow=1; nrow<=FNR; nrow++) { for (ncol=1; ncol<=n; ncol++) { \
#{printf a[ncol,nrow] OFS; } } print ""; } } \
#\
#{ for (hacol=1; hacol<=NF; hacol+=3) { for (harow=1; harow<=FNR; harow++) { \
#\
#{if (harow == 1) { newcol++; na1=newcol; b[na1,1]=a[hacol,harow]; \
#newcol++; na2=newcol; split (a[hacol,harow], arr3, "_"); \
#{gsub(/\(/,"",arr3[2]); gsub(/\)/,"",arr3[2]);} \
#b[na2,1]=arr3[2]; } } \
#\
#{if (harow > 1) { newrow=1; \
#for (k=1; k<=ntoppways; k++) { \
##{gsub(/\t/,"",arrngd_toppways[k])} \
#if (arrngd_toppways[k] == a[hacol,harow] ) { \
#suprpway[k]=arrngd_toppways[k]; \
#denom=a[hacol+1,harow]; \
#numer=a[hacol+2,harow]; \
#fracn=numer/denom; \
#sumfracn[k]=sumfracn[k]+fracn; \
##print "***" OFS suprpway[k] OFS sumfracn[k]; \
#} \
#} } \
#} \
#} \
#{ for (k=1; k<=ntoppways; k++) { if (sumfracn[k] > 0) { \
#newrow++; \
##print "***" OFS newrow;\
#b[na1,newrow]=suprpway[k]; \
#sumfracn[k]*=b[na2,1]; \
##print "***" OFS b[na1,newrow] OFS b[na2,1] OFS sumfracn[k]; \
#b[na2,newrow]=sumfracn[k]; \
##print b[na1,newrow] OFS b[na2,newrow]; \
#sumfracn[k]=0; \
#suprpway[k]=""; \
#} \
#} } \
#} \
#} \
#{for (prow=1; prow<=28; prow++) { for (pcol=1; pcol<=newcol; pcol++) { \
#printf b[pcol,prow] OFS; \
#} \
#print ""; \
#} \
#} \
#{ for (k=1; k<=ntoppways; k++) {  sumcontrbn = 0; \
##{gsub(/\t/,"",arrngd_toppways[k])} \
##printf "***" OFS arrngd_toppways[k] OFS; \
#{ for (qcol=1; qcol<=newcol; qcol+=2) { for (qrow=1; qrow<=28; qrow++) { \
#{if ( (qrow == 1) && (b[qcol,1] ~ /_/) ) { gene=b[qcol,1]; } } \
#{if ( (qrow > 1) && (b[qcol,qrow] ~ /R-HSA-/) && (b[qcol,qrow] == arrngd_toppways[k]) ) { \
#uppway=b[qcol,qrow]; sumcontrbn+=b[qcol+1,qrow]; \
##print gene OFS uppway OFS b[qcol+1,qrow] OFS; \
#} } \
#} } } { if (sumcontrbn > 0) { print "Total " OFS arrngd_toppways[k] OFS sumcontrbn; } } } } \
#}' \
#arrngd_suprpways.txt temp_laml.txt


#edit second input file to remove extra tabs at the end of each line;
#REMOVE EXTRA TABS at the end of each line of input file; 
cp laml_ordrd_genewise_pway_fprint.txt modified_laml_ordrd_genewise_pway_fprint.txt
vi modified_laml_ordrd_genewise_pway_fprint.txt
#:1,$s/\t\t$/\t/

#FINAL COMMAND; 
awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {arrngd_toppways[NR]=$i; ntoppways=length(arrngd_toppways);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (m=1; m<=NF-1; m++) { for (l=1; l<=FNR; l++) { \
{ if ((l==1) && (mtx[m,1] ~ /_/)) { n++; n1=n; a[n1,1]=mtx[m,1]; genenm=mtx[m,1]; \
n++; n2=n; n++; n3=n; } } \
{ if ((l==1) && (mtx[m,1] !~ /_/)) { a[n2,1]=genenm; a[n3,1]=genenm; } } \ 
{ if ((l>1) && (mtx[m,l] ~ /R-HSA-/)) { split (mtx[m,l], arr1, "|"); a[n1,l]=arr1[2]; a[n2,l]=arr1[1] } } \
{ if ((l>1) && (mtx[m,l] !~ /R-HSA-/)) { split (mtx[m,l], arr2, ","); a[n3,l]=arr2[1]; } } } } } \
{ for (nrow=1; nrow<=FNR; nrow++) { for (ncol=1; ncol<=n; ncol++) { \
{printf a[ncol,nrow] OFS; } } print ""; } } \
\
{ for (hacol=1; hacol<=NF*3; hacol+=3) { for (harow=1; harow<=FNR; harow++) { \
{if (harow == 1) { newcol++; na1=newcol; b[na1,1]=a[hacol,harow]; \
newcol++; na2=newcol; split (a[hacol,harow], arr3, "_"); \
{gsub(/\(/,"",arr3[2]); gsub(/\)/,"",arr3[2]);} \
b[na2,1]=arr3[2]; } } \
{if (harow > 1) { newrow=1; \
for (k=1; k<=ntoppways; k++) { \
if (arrngd_toppways[k] == a[hacol,harow] ) { \
suprpway[k]=arrngd_toppways[k]; \
denom=a[hacol+1,harow]; \
numer=a[hacol+2,harow]; \
fracn=numer/denom; \
sumfracn[k]=sumfracn[k]+fracn; \
} } } } } \
{ for (k=1; k<=ntoppways; k++) { if (sumfracn[k] > 0) { \
newrow++; \
b[na1,newrow]=suprpway[k]; \
sumfracn[k]*=b[na2,1]; \
b[na2,newrow]=sumfracn[k]; \
sumfracn[k]=0; \
suprpway[k]=""; \
} } } } } \
{for (prow=1; prow<=28; prow++) { for (pcol=1; pcol<=newcol; pcol++) { \
printf b[pcol,prow] OFS; } print ""; } } \
\
{ for (k=1; k<=ntoppways; k++) {  sumcontrbn = 0; \
{ for (qcol=1; qcol<=newcol; qcol+=2) { for (qrow=1; qrow<=28; qrow++) { \
{if ( (qrow == 1) && (b[qcol,1] ~ /_/) ) { gene=b[qcol,1]; } } \
{if ( (qrow > 1) && (b[qcol,qrow] ~ /R-HSA-/) && (b[qcol,qrow] == arrngd_toppways[k]) ) { \
uppway=b[qcol,qrow]; sumcontrbn+=b[qcol+1,qrow]; \
#print gene OFS uppway OFS b[qcol+1,qrow] OFS; \
} } } } } \
{ if (sumcontrbn > 0) { print "Total " OFS arrngd_toppways[k] OFS sumcontrbn; } } } } \
}' \
arrngd_suprpways.txt modified_laml_ordrd_genewise_pway_fprint.txt

#have to run above script for each cancer; 
#the SCRIPT HAS TO BE RUN TWICE FOR EACH CANCER; run ONCE with the SECOND TO LAST PRINT STATEMENT COMMENTED; 
#run SECOND TIME with the SECOND TO LAST PRINT STATEMENT UNCOMMENTED; 

#selected, copied and pasted above script into foll file: 
vi total_suprpway_contrbns.awk
#in this file, PRINT STATEMENT is COMMENTED;

#copied this file as follows:
cp total_suprpway_contrbns.awk total_gene_suprpway_contrbns.awk
#in this file, PRINT STATEMENT is UNCOMMENTED;

#For each cancer, plan to edit the above two awk script files to include appropriate input files;

#edit second input file to remove extra tabs at the end of each line;
#REMOVE EXTRA TABS at the end of each line of input file; 
cp laml_ordrd_genewise_pway_fprint.txt modified_laml_ordrd_genewise_pway_fprint.txt
vi modified_laml_ordrd_genewise_pway_fprint.txt
#:1,$s/\t\t$/\t/

cp brca_ordrd_genewise_pway_fprint.txt modified_brca_ordrd_genewise_pway_fprint.txt
vi modified_brca_ordrd_genewise_pway_fprint.txt
#:1,$s/\t\t$/\t/

cp coadread_ordrd_genewise_pway_fprint.txt modified_coadread_ordrd_genewise_pway_fprint.txt
vi modified_coadread_ordrd_genewise_pway_fprint.txt
#:1,$s/\t\t$/\t/

cp gbm_ordrd_genewise_pway_fprint.txt modified_gbm_ordrd_genewise_pway_fprint.txt
vi modified_gbm_ordrd_genewise_pway_fprint.txt
#:1,$s/\t\t$/\t/

cp hnsc_ordrd_genewise_pway_fprint.txt modified_hnsc_ordrd_genewise_pway_fprint.txt
vi modified_hnsc_ordrd_genewise_pway_fprint.txt
#:1,$s/\t\t$/\t/

cp kirc_ordrd_genewise_pway_fprint.txt modified_kirc_ordrd_genewise_pway_fprint.txt
vi modified_kirc_ordrd_genewise_pway_fprint.txt
#:1,$s/\t\t$/\t/

cp luad_ordrd_genewise_pway_fprint.txt modified_luad_ordrd_genewise_pway_fprint.txt
vi modified_luad_ordrd_genewise_pway_fprint.txt
#:1,$s/\t\t$/\t/

cp skcm_ordrd_genewise_pway_fprint.txt modified_skcm_ordrd_genewise_pway_fprint.txt
vi modified_skcm_ordrd_genewise_pway_fprint.txt
#:1,$s/\t\t$/\t/

#First, ran below script for all cancers;
vi total_suprpway_contrbns.awk
#first input file name was left unmodified; 
#replaced existing second input file name with the foll file name: 
modified_laml_ordrd_genewise_pway_fprint.txt
sh total_suprpway_contrbns.awk > total_suprpwaycontrbns_laml.txt

vi total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
modified_brca_ordrd_genewise_pway_fprint.txt
sh total_suprpway_contrbns.awk > total_suprpwaycontrbns_brca.txt

vi total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
modified_coadread_ordrd_genewise_pway_fprint.txt
sh total_suprpway_contrbns.awk > total_suprpwaycontrbns_coadread.txt

vi total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
modified_gbm_ordrd_genewise_pway_fprint.txt
sh total_suprpway_contrbns.awk > total_suprpwaycontrbns_gbm.txt

vi total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
modified_hnsc_ordrd_genewise_pway_fprint.txt
sh total_suprpway_contrbns.awk > total_suprpwaycontrbns_hnsc.txt

vi total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
modified_kirc_ordrd_genewise_pway_fprint.txt
sh total_suprpway_contrbns.awk > total_suprpwaycontrbns_kirc.txt

vi total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
modified_luad_ordrd_genewise_pway_fprint.txt
sh total_suprpway_contrbns.awk > total_suprpwaycontrbns_luad.txt

vi total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
modified_skcm_ordrd_genewise_pway_fprint.txt
sh total_suprpway_contrbns.awk > total_suprpwaycontrbns_skcm.txt


#Next, ran below script for all cancers;
#edited the file to uncomment the second-last print statement; 
vi total_gene_suprpway_contrbns.awk
#also, replaced existing second input file name with the foll file name: 
modified_laml_ordrd_genewise_pway_fprint.txt
sh total_gene_suprpway_contrbns.awk > total_genesuprpwaycontrbns_laml.txt

vi total_gene_suprpway_contrbns.awk
#also, replaced existing second input file name with the foll file name: 
modified_brca_ordrd_genewise_pway_fprint.txt
sh total_gene_suprpway_contrbns.awk > total_genesuprpwaycontrbns_brca.txt

vi total_gene_suprpway_contrbns.awk
#also, replaced existing second input file name with the foll file name: 
modified_coadread_ordrd_genewise_pway_fprint.txt
sh total_gene_suprpway_contrbns.awk > total_genesuprpwaycontrbns_coadread.txt

vi total_gene_suprpway_contrbns.awk
#also, replaced existing second input file name with the foll file name: 
modified_gbm_ordrd_genewise_pway_fprint.txt
sh total_gene_suprpway_contrbns.awk > total_genesuprpwaycontrbns_gbm.txt

vi total_gene_suprpway_contrbns.awk
#also, replaced existing second input file name with the foll file name: 
modified_hnsc_ordrd_genewise_pway_fprint.txt
sh total_gene_suprpway_contrbns.awk > total_genesuprpwaycontrbns_hnsc.txt

vi total_gene_suprpway_contrbns.awk
#also, replaced existing second input file name with the foll file name: 
modified_kirc_ordrd_genewise_pway_fprint.txt
sh total_gene_suprpway_contrbns.awk > total_genesuprpwaycontrbns_kirc.txt

vi total_gene_suprpway_contrbns.awk
#also, replaced existing second input file name with the foll file name: 
modified_luad_ordrd_genewise_pway_fprint.txt
sh total_gene_suprpway_contrbns.awk > total_genesuprpwaycontrbns_luad.txt

vi total_gene_suprpway_contrbns.awk
#also, replaced existing second input file name with the foll file name: 
modified_skcm_ordrd_genewise_pway_fprint.txt
sh total_gene_suprpway_contrbns.awk > total_genesuprpwaycontrbns_skcm.txt

--------------------------------------------------

#made a sub-directory to work on these total files;
#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/totldir
#copied total set of files to this sub-dir;
cp /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/total_*.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/totldir/.

#BRCA
#only the third part of each total file needs to be sorted; so edited each total file to retain
#only the third part;   
cp total_suprpwaycontrbns_brca.txt forsort_suprpwaycontrbns_brca.txt
vi forsort_suprpwaycontrbns_brca.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' forsort_suprpwaycontrbns_brca.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > brca_suprpwaytotals_sortd.txt

cp total_genesuprpwaycontrbns_brca.txt forsort_genesuprpwaycontrbns_brca.txt
vi forsort_genesuprpwaycontrbns_brca.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' forsort_genesuprpwaycontrbns_brca.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > forsort2_genesuprpwaycontrbns_brca.txt

#Need to arrange brca_genesuprpwaytotals_sortd.txt in the order in which superpways have been arranged in arrngd_suprpways.txt
cp /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/arrngd_suprpways.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/totldir/arrngd_ordr_suprway.sh
#turning arrngd_ordr_suprway.sh into a cmd file;
vi arrngd_ordr_suprway.sh
#:1,$s/^/grep "/
#:1,$s/$/" \$1/
sh arrngd_ordr_suprway.sh forsort2_genesuprpwaycontrbns_brca.txt > brca_genesuprpwaytotals_sortd.txt

#COADREAD
#edited each total file to retain only the third part;   
cp total_suprpwaycontrbns_coadread.txt forsort_suprpwaycontrbns_coadread.txt
vi forsort_suprpwaycontrbns_coadread.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' forsort_suprpwaycontrbns_coadread.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > coadread_suprpwaytotals_sortd.txt

cp total_genesuprpwaycontrbns_coadread.txt forsort_genesuprpwaycontrbns_coadread.txt
vi forsort_genesuprpwaycontrbns_coadread.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' forsort_genesuprpwaycontrbns_coadread.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > forsort2_genesuprpwaycontrbns_coadread.txt

#Rearranging coadread_genesuprpwaytotals_sortd.txt
sh arrngd_ordr_suprway.sh forsort2_genesuprpwaycontrbns_coadread.txt > coadread_genesuprpwaytotals_sortd.txt

#GBM
#edited each total file to retain only the third part;   
cp total_suprpwaycontrbns_gbm.txt forsort_suprpwaycontrbns_gbm.txt
vi forsort_suprpwaycontrbns_gbm.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' forsort_suprpwaycontrbns_gbm.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > gbm_suprpwaytotals_sortd.txt

cp total_genesuprpwaycontrbns_gbm.txt forsort_genesuprpwaycontrbns_gbm.txt
vi forsort_genesuprpwaycontrbns_gbm.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' forsort_genesuprpwaycontrbns_gbm.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > forsort2_genesuprpwaycontrbns_gbm.txt

#Rearranging gbm_genesuprpwaytotals_sortd.txt
sh arrngd_ordr_suprway.sh forsort2_genesuprpwaycontrbns_gbm.txt > gbm_genesuprpwaytotals_sortd.txt

#HNSC
#edited each total file to retain only the third part;   
cp total_suprpwaycontrbns_hnsc.txt forsort_suprpwaycontrbns_hnsc.txt
vi forsort_suprpwaycontrbns_hnsc.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' forsort_suprpwaycontrbns_hnsc.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > hnsc_suprpwaytotals_sortd.txt

cp total_genesuprpwaycontrbns_hnsc.txt forsort_genesuprpwaycontrbns_hnsc.txt
vi forsort_genesuprpwaycontrbns_hnsc.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' forsort_genesuprpwaycontrbns_hnsc.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > forsort2_genesuprpwaycontrbns_hnsc.txt

#Rearranging hnsc_genesuprpwaytotals_sortd.txt
sh arrngd_ordr_suprway.sh forsort2_genesuprpwaycontrbns_hnsc.txt > hnsc_genesuprpwaytotals_sortd.txt

#KIRC
#edited each total file to retain only the third part;   
cp total_suprpwaycontrbns_kirc.txt forsort_suprpwaycontrbns_kirc.txt
vi forsort_suprpwaycontrbns_kirc.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' forsort_suprpwaycontrbns_kirc.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > kirc_suprpwaytotals_sortd.txt

cp total_genesuprpwaycontrbns_kirc.txt forsort_genesuprpwaycontrbns_kirc.txt
vi forsort_genesuprpwaycontrbns_kirc.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' forsort_genesuprpwaycontrbns_kirc.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > forsort2_genesuprpwaycontrbns_kirc.txt

#Rearranging kirc_genesuprpwaytotals_sortd.txt
sh arrngd_ordr_suprway.sh forsort2_genesuprpwaycontrbns_kirc.txt > kirc_genesuprpwaytotals_sortd.txt

#LAML
#edited each total file to retain only the third part;   
cp total_suprpwaycontrbns_laml.txt forsort_suprpwaycontrbns_laml.txt
vi forsort_suprpwaycontrbns_laml.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' forsort_suprpwaycontrbns_laml.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > laml_suprpwaytotals_sortd.txt

cp total_genesuprpwaycontrbns_laml.txt forsort_genesuprpwaycontrbns_laml.txt
vi forsort_genesuprpwaycontrbns_laml.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' forsort_genesuprpwaycontrbns_laml.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > forsort2_genesuprpwaycontrbns_laml.txt

#Rearranging laml_genesuprpwaytotals_sortd.txt
sh arrngd_ordr_suprway.sh forsort2_genesuprpwaycontrbns_laml.txt > laml_genesuprpwaytotals_sortd.txt

#LUAD
#edited each total file to retain only the third part;   
cp total_suprpwaycontrbns_luad.txt forsort_suprpwaycontrbns_luad.txt
vi forsort_suprpwaycontrbns_luad.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' forsort_suprpwaycontrbns_luad.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > luad_suprpwaytotals_sortd.txt

cp total_genesuprpwaycontrbns_luad.txt forsort_genesuprpwaycontrbns_luad.txt
vi forsort_genesuprpwaycontrbns_luad.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' forsort_genesuprpwaycontrbns_luad.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > forsort2_genesuprpwaycontrbns_luad.txt

#Rearranging luad_genesuprpwaytotals_sortd.txt
sh arrngd_ordr_suprway.sh forsort2_genesuprpwaycontrbns_luad.txt > luad_genesuprpwaytotals_sortd.txt

#SKCM
#edited each total file to retain only the third part;   
cp total_suprpwaycontrbns_skcm.txt forsort_suprpwaycontrbns_skcm.txt
vi forsort_suprpwaycontrbns_skcm.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' forsort_suprpwaycontrbns_skcm.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > skcm_suprpwaytotals_sortd.txt

cp total_genesuprpwaycontrbns_skcm.txt forsort_genesuprpwaycontrbns_skcm.txt
vi forsort_genesuprpwaycontrbns_skcm.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' forsort_genesuprpwaycontrbns_skcm.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > forsort2_genesuprpwaycontrbns_skcm.txt

#Rearranging skcm_genesuprpwaytotals_sortd.txt
sh arrngd_ordr_suprway.sh forsort2_genesuprpwaycontrbns_skcm.txt > skcm_genesuprpwaytotals_sortd.txt

#took the above files (e.g., total_genesuprpwaycontrbns_skcm.txt, skcm_suprpwaytotals_sortd.txt, skcm_genesuprpwaytotals_sortd.txt)
#to windows, and tabulated them in the foll excel file:  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways\pway_fingerprint_matrix\totalfiles\totals.xlsx

--------------------------------------------------

#COMPLETING OMIM PWAY FINGERPRINT PART; 

#cmds will be from /scratch/prasannalab/cancers_in_detail/pway_anal/cmd4_forwriteup.sh; 

#created the foll sub-directory for the work; 
#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/bmomim_fingerprint

cp /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/list_324_bm_omim_genes.txt bmomim_324_genelist.txt

paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Autophagy.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Autophagy.txt > all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Cell_Cell_communication.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Cell_Cell_communication.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Cell_Cycle.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Cell_Cycle.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Cellular_responses_to_stimuli.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Cellular_responses_to_stimuli.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Chromatin_organization.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Chromatin_organization.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Circadian_Clock.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Circadian_Clock.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Developmental_Biology.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Developmental_Biology.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Digestion_and_absorption.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Digestion_and_absorption.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Disease.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Disease.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_DNA_Repair.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_DNA_Repair.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_DNA_Replication.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_DNA_Replication.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Extracellular_matrix_organization.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Extracellular_matrix_organization.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Gene_expression_Transcription.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Gene_expression_Transcription.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Hemostasis.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Hemostasis.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Immune_System.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Immune_System.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Metabolism_of_proteins.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Metabolism_of_proteins.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Metabolism_of_RNA.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Metabolism_of_RNA.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Metabolism.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Metabolism.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Muscle_contraction.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Muscle_contraction.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Neuronal_System.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Neuronal_System.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Organelle_biogenesis_and_maintenance.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Organelle_biogenesis_and_maintenance.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Programmed_Cell_Death.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Programmed_Cell_Death.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Protein_localization.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Protein_localization.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Reproduction.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Reproduction.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Sensory_Perception.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Sensory_Perception.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Signal_Transduction.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Signal_Transduction.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Transport_of_small_molecules.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Transport_of_small_molecules.txt >> all_suprpway_trees_bmomim_genes.txt
paste -d" " /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/tree_Vesicle_mediated_transport.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/fortabuln_hier_bmomim_Vesicle_mediated_transport.txt >> all_suprpway_trees_bmomim_genes.txt

wc -l all_suprpway_trees_bmomim_genes.txt
#2253 

#awk '!($0 ~ /^ $/)' all_suprpway_trees_bmomim_genes.txt | grep -v "All oncokb" | awk -F", " '{IFS=OFS=", "}{$NF = ""; print $0}' | more

awk '!($0 ~ /^ $/)' all_suprpway_trees_bmomim_genes.txt | grep -v "All oncokb" | awk -F"\\), " '{IFS=OFS="), "}{{for (i=1; i<NF; i++) printf $i OFS} printf "\n"}' | grep -v ^$ > cols1_2_all_suprpway_trees_bmomim_genes.txt
vi cols1_2_all_suprpway_trees_bmomim_genes.txt

vi bmomim_324_genelist.txt
#there are no - or _ ; hence no editing required; 
paste -d"\t" bmomim_324_genelist.txt bmomim_324_genelist.txt > temppairlst.txt

#creating the necessary prep files for bmomim genes; 
cp /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/prep_kirc_fingerprint_onlyhier.sh temp_prep_bmomim_fingerprint_onlyhier.sh

awk -F"; " '{print $2}' temp_prep_bmomim_fingerprint_onlyhier.sh | awk -F"&& " '{print $1}' > temp_suprpway_part.txt
#kirc had 102 genes; bmomim has 324; 324 - 102 = 222 extra genes; thus, edit temp_suprpway_part.txt, and do 100yy followed
#by  p, p for each suprpway; then do 22yy followed by p (i.e., add 222 lines for each suprpway);
vi temp_suprpway_part.txt
#go to 1st line of Autophagy; 100yy, p, p; 22yy p;
#go to 1st line of Cell-Cell communication; 100yy, p, p; 22yy p;
#keep going;

vi templeftecho.txt
#i esc !! cat bmomim_324_genelist.txt
#:1,$s/^/echo -e -n "/
#:1,$s/$/\\t"; /
#:$
#o        #paste foll line;
#echo -e "#--------------------------------------------------"
#:1
#325yy p
#:$
#p
#paste 27 times;

paste -d" " templeftecho.txt temp_suprpway_part.txt > temp_echoleft_suprpwaypart.txt
vi temp_echoleft_suprpwaypart.txt
#:1,$s/;  awk/; awk/

vi temp_third_part.txt
#i esc !! cat temppairlst.txt
#:1,$s/^/ \&\& (\$2 \~ \//
#:1,$s/\t/ \\(\/)){print "/
#:1,$s/$/\\t" \$1}' cols1_2_all_suprpway_trees_bmomim_genes.txt; echo "";/
#:$
#o        #adding blank line
#esc
#:1
#325yy
#:$
#p
#:$
#p        #repeat 27 times

paste -d" " temp_echoleft_suprpwaypart.txt temp_third_part.txt > prep_bmomim_fingerprint_onlyhier.sh
vi prep_bmomim_fingerprint_onlyhier.sh
#:1,$s/)   /) /
#:1,$s/(\$2 \~ \//(\$2 \~ \/ /      ###THIS IS AN IMPORTANT CORRECTION (it was incorporated AFTER THE oncokb part had 
                                    ###been completed); the correction must be included for oncokb part too; 
                                    ###it introduces a " " before the gene name, ensuring that parts of genenames are not
                                    ###picked; e.g., ($2 ~ /F8 (/) will pick instances of FGF8 and F8; it should be
                                    ###($2 ~ / F8 (/) ; this will only pick F8 and not FGF8; 
###for each cancer, the last (second) vi substitution above may be made directly by editing each pair of cancer sh files; 
###(e.g., prep_skcm_fingerprint_onlyhier.sh and prep_skcm_infile_gene_pway_fingerprint.sh); 
###made this substitution and checked for all 8 cancers; found that JARID2 is appearing twice for each cancer; i.e.,
###JARID2 is being pulled out for "JARID2" as well as for "ARID2"; only for coadread, in addition to JARID2, NEGR1 
###is being pulled out probably for EGR1; however, in the pway fingerprint tables in xl, NEGR1 does not occur, 
###because (thankfully) NEGR1 mutations are not observed in ANY cancer! Thus, JARID2 is the only problem;
###testing was done in the subdirectory:
###pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/test ;  
###JARID2 = 2|Gene expression....PRC2 methylates histones and DNA (R-HSA-212300)
###NEGR1 = 1|Metabolism of proteins...Post-translational modification: synthesis of GPI-anchored proteins (R-HSA-163125)
###kirc = JARID2; brca = JARID2; coadread = JARID2, NEGR1; skcm = JARID2; luad = JARID2; gbm = JARID2; laml = JARID2; hnsc = JARID2;
###old rncount file has one extra JARID2 line; JARID2 occurs for itself and also for ARID2;

cp prep_bmomim_fingerprint_onlyhier.sh prep_addnl_bmomim_fingerprint_onlyhier.sh
vi prep_addnl_bmomim_fingerprint_onlyhier.sh
#:1,$s/\$1}' /"(" \$2}' /
#:1,$s/txt; echo "";/txt | awk -F"\\t|, " '{for \(i=1; i<=NF; i++){if \(\$i \~ \//
#:wq

cp bmomim_324_genelist.txt tmp_duplicate.txt
vi tmp_duplicate.txt
#:$        #go to last line
#o         #insert blank line
#esc
#:1        #go to first line
#325yy
#:$
#p
#repeat to get a total of 28 times, for 28 suprpways;

paste -d"\t" prep_addnl_bmomim_fingerprint_onlyhier.sh tmp_duplicate.txt > tmpp.txt
vi tmpp.txt
#:1,$s/\/\t/\//
#:1,$s/$/ \\(\/) print \$i}}'/
#:1,$s/\t \\(\/) print \$i}}'//
#:1,$s/}}'/}}' ; echo "" ;/
#:wq

cp tmpp.txt prep_addnl_bmomim_fingerprint_onlyhier.sh

sh prep_bmomim_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh prep_addnl_bmomim_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

mv junk4.txt rncount_hier_bmomim_genes.txt

#using matrix program to generate gene pathway fingerprint table for bmomim genes; matrix program is in foll area:
/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/gene_pway_fingerprint_mtx.pl

#command is the foll:
perl gene_pway_fingerprint_mtx.pl all_reactome_hierarchies.txt gene_wise_hierarchies_bmomim.txt bmomim_genes_pway_fingerprint_mtx.out

#input file, all_reactome_hierarchies.txt, is in the foll area:
/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/all_reactome_hierarchies.txt

#second input file is created as follows:
cp bmomim_324_genelist.txt bmomim_no_mutns.txt
vi bmomim_no_mutns.txt
#:1,$s/$/\t0/

paste -d"\t" bmomim_no_mutns.txt bmomim_324_genelist.txt > prep_bmomim_infile_gene_pway_fingerprint.sh
vi prep_bmomim_infile_gene_pway_fingerprint.sh
#:1,$s/^/echo "/
#:1,$s/\t/_(/
#:1,$s/\t/)" ; \t/
#:1,$s/\t/awk -F"\\t" '(\$1 \~ \/^/
#:1,$s/$/\$\/) \&\& ((\$2 \~ \/[0-9]\/))' rncount_hier_bmomim_genes.txt/

sh prep_bmomim_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > gene_wise_hierarchies_bmomim.txt

perl /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/gene_pway_fingerprint_mtx.pl /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/all_reactome_hierarchies.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/bmomim_fingerprint/gene_wise_hierarchies_bmomim.txt bmomim_genes_pway_fingerprint_mtx.out

#foll cmds help in checking output file;
awk -F"   " '((NR==1)||($NF>1))' bmomim_genes_pway_fingerprint_mtx.out | more
#The following command line uses awk to prepend the last field of each line of file.txt, does a reverse
#numerical sort, then uses cut to remove the added field:
awk '{print $NF,$0}' bmomim_genes_pway_fingerprint_mtx.out | sort -nr | cut -f2- -d' ' | more
awk -F"   " '((NR==1)||($NF!=0))' bmomim_genes_pway_fingerprint_mtx.out | more

#have to make format of output file suitable for xl;
vi bmomim_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#cmds to get gene_pway_fingerprint for each gene in each cancer;

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt

#for each gene, only hierarchies in which the gene participates in are listed; also, cancer genes
#which co-occur in each hierarchy are listed;
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
bmomim_genes_pway_fingerprint_mtx.out > bmomim_interim1.txt

#to the above file, the foll cmd adds a col indicating the minimum superpway name;
awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' bmomim_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > bmomim_interim2.txt

cp bmomim_interim2.txt bmomim_interim2at.txt

#replaced tabs with @; tab as field-separator DOES NOT WORK with unix sort;
vi bmomim_interim2at.txt
#:1,$s/\t/@/g

#sort in ASCENDING order; k1=gene; k2=minimal suprpway name; k4=n reactions in hierarchy gene participates in;
sort --field-separator='@' -k1,1 -k2,2 -k4,4g bmomim_interim2at.txt | sed -s 's/@/\t/g' > bmomim_interim3.txt

awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' bmomim_interim3.txt > bmomim_interim4.txt

sed -e 's/\t/@/g' bmomim_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > bmomim_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' bmomim_interim5.txt > bmomim_fprint1.txt

sed -e 's/\t/@/g' bmomim_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > bmomim_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' bmomim_fprint2.txt > bmomim_genewise_pway_fprint.txt


cp bmomim_no_mutns.txt bmomim_orig_genlst.txt
vi bmomim_orig_genlst.txt
#:1,$s/\t/_(/
#:1,$s/$/)/

awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
bmomim_orig_genlst.txt bmomim_genewise_pway_fprint.txt > bmomim_ordrd_genewise_pway_fprint.txt

#taking the 3 files listed below to windows; the files are in the foll directory:
#/scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/bmomim_fingerprint ;
#bmomim_genes_pway_fingerprint_mtx.out, bmomim_genewise_pway_fprint.txt, bmomim_ordrd_genewise_pway_fprint.txt ;
#including the files as sheets in foll xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways_genes_in_superpways.xlsx

head -1 bmomim_ordrd_genewise_pway_fprint.txt | sed -e 's/\t/\n/g' | grep -v ^$ > ttt

#why are there only 323 genes in the bmomim_ordrd_genewise_pway_fprint.txt file? check. 
head -1 bmomim_ordrd_genewise_pway_fprint.txt | sed -e 's/\t/\n/g' | grep -v ^$ > checkbmomimgenlst.txt
#in two windows, using split/vertical split, edited the files: checkbmomimgenlst.txt and
#bmomim_ordrd_genewise_pway_fprint.txt; compared the gene lists side-by-side, 100 entries at a time; the 
#96th entry, FERMT3, in bmomim_ordrd_genewise_pway_fprint.txt, is not there in checkbmomimgenlst.txt; 
#FERMT3 IS PRESENT in the matrix, but is always 0, i.e., it does not participate in any hierarchy; 
awk -F"\t" '($97 != 0) {print $1 "\t" $97}' bmomim_genes_pway_fingerprint_mtx.out
        FERMT3_(0)
#the command in line 762 above (comment reproduced below), retains only hierarchies in which the gene 
#participates; as FERMT3 does not participate in any hierarchy, it gets removed; 
#"for each gene, only hierarchies in which the gene participates in are listed; also, cancer genes
#which co-occur in each hierarchy are listed;"
#FERMT3 is not in all_suprpway_trees_bmomim_genes.txt

--------------------------------------------------
#redoing oncokb tables; 

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint

#Making the above-identified correction for 8 cancers; 
#start at line 659 above;
#start at line 3722 in the cmd4 file; 

#BRCA
#starting with brca; in general, below, while making corrections, the orig files have been copied with
#the prefix old; then the original files have been edited; 
cp prep_brca_fingerprint_onlyhier.sh old_prep_brca_fingerprint_onlyhier.sh
vi prep_brca_fingerprint_onlyhier.sh
#:1,$s/(\$2 \~ \//(\$2 \~ \/ /      ###MADE THIS IMPORTANT CORRECTION 

cp prep_addnl_brca_fingerprint_onlyhier.sh old_prep_addnl_brca_fingerprint_onlyhier.sh

cp prep_brca_fingerprint_onlyhier.sh prep_addnl_brca_fingerprint_onlyhier.sh
vi prep_addnl_brca_fingerprint_onlyhier.sh
#:1,$s/\$1}' /"(" \$2}' /
#:1,$s/txt; echo "";/txt | awk -F"\\t|, " '{for \(i=1; i<=NF; i++){if \(\$i \~ \//
#:wq

cp brca_tcga_drigenes.txt tmp_duplicate.txt
vi tmp_duplicate.txt
#:$        #go to last line
#o         #insert blank line
#esc
#:1        #go to first line
#267yy
#:$
#p
#repeat to get a total of 28 times, for 28 suprpways;

paste -d"\t" prep_addnl_brca_fingerprint_onlyhier.sh tmp_duplicate.txt > tmpp.txt
vi tmpp.txt
#:1,$s/\/\t/\//
#:1,$s/$/ \\(\/) print \$i}}'/
#:1,$s/\t \\(\/) print \$i}}'//
#:1,$s/}}'/}}' ; echo "" ;/
#:wq

cp tmpp.txt prep_addnl_brca_fingerprint_onlyhier.sh

sh prep_brca_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh prep_addnl_brca_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

cp rncount_hier_brca_genes.txt old_rncount_hier_brca_genes.txt
mv junk4.txt rncount_hier_brca_genes.txt

#comparing new rncount_hier_brca_genes.txt and old_rncount_hier_brca_genes.txt ; 
#the extra JARID2 line (that was additionally being pulled out for search pattern "ARID2" in the old file), is 
#no longer present in the new rncount file; i.e., JARID2 is pulled out only once, for the search pattern "JARID2";
#it is not erroneously pulled out for the search pattern "ARID2";
#also, the old and new files differ by 1 line; 
diff --side-by-side --suppress-common-lines rncount_hier_brca_genes.txt old_rncount_hier_brca_genes.txt
                                                              > JARID2  2|Gene expression (Transcription) (R-HSA-74160)|Epige
wc -l rncount_hier_brca_genes.txt old_rncount_hier_brca_genes.txt
   2347 rncount_hier_brca_genes.txt
   2348 old_rncount_hier_brca_genes.txt

cp gene_wise_hierarchies_brca.txt old_gene_wise_hierarchies_brca.txt
sh prep_brca_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > gene_wise_hierarchies_brca.txt

diff gene_wise_hierarchies_brca.txt old_gene_wise_hierarchies_brca.txt
> 2|Gene expression (Transcription) (R-HSA-74160)|Epigenetic regulation of gene expression (R-HSA-212165)|PRC2 methylates histones and DNA (R-HSA-212300)|

#there are 4 JARID2 mutns in brca (brca_tcga_genes_nmutns.txt); hence, prep_brca_fingerprint_onlyhier.sh (old and new) 
#search for it in cols1_2_all_suprpway_trees_oncokb_genes.txt; the old sh file was pulling out JARID2 for the pattern 
#"JARID2", and for the pattern "ARID2"; the new sh file pulls out JARID2 only for pattern "JARID2"; hence, the old 
#rncount_hier_kirc_genes.txt file has 2 JARID2 entries, and the new rncount file has one JARID2 entry; the 
#prep_brca_infile_gene_pway_fingerprint.sh correctly uses search patterns ^JARID2 and ^ARID2; as a result, in the old 
#gene_wise_hierarchies_brca.txt file, for JARID2, the same entry repeats TWICE; in the new gene_wise_hierarchies_brca.txt, 
#for JARID2, correctly, only one entry occurs; as a result, old and new gene_wise_hierarchies_brca.txt differ; 

cp brca_genes_pway_fingerprint_mtx.out old_brca_genes_pway_fingerprint_mtx.out
perl gene_pway_fingerprint_mtx.pl all_reactome_hierarchies.txt gene_wise_hierarchies_brca.txt brca_genes_pway_fingerprint_mtx.out

#have to make format of output file suitable for xl;
vi brca_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#old and new brca_genes_pway_fingerprint_mtx.out ARE THE SAME!!  Hence, NO NEED TO REDO
#REST OF CALCULATIONS for brca!  NO NEED TO CHANGE THE MATRICES in excel for brca;  
diff brca_genes_pway_fingerprint_mtx.out old_brca_genes_pway_fingerprint_mtx.out

#as old and new matrices are same, used the foll mv cmds to restore the original (or old) matrix 
#as the matrix presented in excel; 
mv brca_genes_pway_fingerprint_mtx.out new_brca_genes_pway_fingerprint_mtx.out
mv old_brca_genes_pway_fingerprint_mtx.out brca_genes_pway_fingerprint_mtx.out


#KIRC; 
cp prep_kirc_fingerprint_onlyhier.sh old_prep_kirc_fingerprint_onlyhier.sh
vi prep_kirc_fingerprint_onlyhier.sh
#:1,$s/(\$2 \~ \//(\$2 \~ \/ /      ###MADE THIS IMPORTANT CORRECTION 

cp prep_addnl_kirc_fingerprint_onlyhier.sh old_prep_addnl_kirc_fingerprint_onlyhier.sh

cp prep_kirc_fingerprint_onlyhier.sh prep_addnl_kirc_fingerprint_onlyhier.sh
vi prep_addnl_kirc_fingerprint_onlyhier.sh
#:1,$s/\$1}' /"(" \$2}' /
#:1,$s/txt; echo "";/txt | awk -F"\\t|, " '{for \(i=1; i<=NF; i++){if \(\$i \~ \//
#:wq

cp kirc_tcga_drigenes.txt tmp_duplicate.txt
vi tmp_duplicate.txt
#:$        #go to last line
#o         #insert blank line
#esc
#:1        #go to first line
#103yy
#:$
#p
#repeat to get a total of 28 times, for 28 suprpways;

paste -d"\t" prep_addnl_kirc_fingerprint_onlyhier.sh tmp_duplicate.txt > tmpp.txt
vi tmpp.txt
#:1,$s/\/\t/\//
#:1,$s/$/ \\(\/) print \$i}}'/
#:1,$s/\t \\(\/) print \$i}}'//
#:1,$s/}}'/}}' ; echo "" ;/
#:wq

cp tmpp.txt prep_addnl_kirc_fingerprint_onlyhier.sh

sh prep_kirc_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh prep_addnl_kirc_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

cp rncount_hier_kirc_genes.txt old_rncount_hier_kirc_genes.txt
mv junk4.txt rncount_hier_kirc_genes.txt

#comparing new rncount_hier_kirc_genes.txt and old_rncount_hier_kirc_genes.txt ; 
#the extra JARID2 line (that was additionally being pulled out for search pattern "ARID2" in the old file), is 
#no longer present in the new rncount file; i.e., JARID2 is pulled out only once, for the search pattern "JARID2";
#it is not erroneously pulled out for the search pattern "ARID2";
#also, the old and new files differ by 1 line; 
diff --side-by-side --suppress-common-lines rncount_hier_kirc_genes.txt old_rncount_hier_kirc_genes.txt
                                                              > JARID2  2|Gene expression (Transcription) (R-HSA-74160)|Epige
wc -l rncount_hier_kirc_genes.txt old_rncount_hier_kirc_genes.txt
   897 rncount_hier_kirc_genes.txt
   898 old_rncount_hier_kirc_genes.txt

cp gene_wise_hierarchies_kirc.txt old_gene_wise_hierarchies_kirc.txt
sh prep_kirc_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > gene_wise_hierarchies_kirc.txt

diff gene_wise_hierarchies_kirc.txt old_gene_wise_hierarchies_kirc.txt
#both files are IDENTICAL! Hence, NO NEED TO REDO REST OF CALCULATIONS for kirc!
#there are no JARID2 mutns in kirc; hence, prep_kirc_fingerprint_onlyhier.sh (old or new) 
#does not search for it in cols1_2_all_suprpway_trees_oncokb_genes.txt; but the old sh file was pulling out JARID2 for 
#ARID2; the new sh file does not pull out JARID2 for ARID2; hence, the new rncount_hier_kirc_genes.txt has 
#NO JARID2 entries; the old rncount file had a JARID2 entry for ARID2; the prep_kirc_infile_gene_pway_fingerprint.sh 
#correctly uses ^ARID2, and hence gene_wise_hierarchies_kirc.txt files, old and new, do not contain JARID2 and are identical; 


#COADREAD
cp prep_coadread_fingerprint_onlyhier.sh old_prep_coadread_fingerprint_onlyhier.sh
vi prep_coadread_fingerprint_onlyhier.sh
#:1,$s/(\$2 \~ \//(\$2 \~ \/ /      ###MADE THIS IMPORTANT CORRECTION 

cp prep_addnl_coadread_fingerprint_onlyhier.sh old_prep_addnl_coadread_fingerprint_onlyhier.sh

cp prep_coadread_fingerprint_onlyhier.sh prep_addnl_coadread_fingerprint_onlyhier.sh
vi prep_addnl_coadread_fingerprint_onlyhier.sh
#:1,$s/\$1}' /"(" \$2}' /
#:1,$s/txt; echo "";/txt | awk -F"\\t|, " '{for \(i=1; i<=NF; i++){if \(\$i \~ \//
#:wq

cp coadread_tcga_drigenes.txt tmp_duplicate.txt
vi tmp_duplicate.txt
#:$        #go to last line
#o         #insert blank line
#esc
#:1        #go to first line
#282yy
#:$
#p
#repeat to get a total of 28 times, for 28 suprpways;

paste -d"\t" prep_addnl_coadread_fingerprint_onlyhier.sh tmp_duplicate.txt > tmpp.txt
vi tmpp.txt
#:1,$s/\/\t/\//
#:1,$s/$/ \\(\/) print \$i}}'/
#:1,$s/\t \\(\/) print \$i}}'//
#:1,$s/}}'/}}' ; echo "" ;/
#:wq

cp tmpp.txt prep_addnl_coadread_fingerprint_onlyhier.sh

sh prep_coadread_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh prep_addnl_coadread_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

cp rncount_hier_coadread_genes.txt old_rncount_hier_coadread_genes.txt
mv junk4.txt rncount_hier_coadread_genes.txt

#comparing new rncount_hier_coadread_genes.txt and old_rncount_hier_coadread_genes.txt ; 
#the extra JARID2 and NEGR1 lines (that were additionally being pulled out for search patterns "ARID2" and "EGR1" 
#in the old file), are no longer present in the new rncount file; i.e., JARID2 is pulled out only once, for the 
#search pattern "JARID2"; it is not erroneously pulled out additionally for the search pattern "ARID2"; and NEGR1 is 
#not pulled out in the new rncount file, because NEGR1 is not mutated in coadread; it is not erroneously pulled out 
#for the search pattern "EGR1", as it was in the old rncount file; 
#also, the old and new files differ by 2 lines; -1 JARID2, -1 (or 0) NEGR1
diff --side-by-side --suppress-common-lines rncount_hier_coadread_genes.txt old_rncount_hier_coadread_genes.txt
                                                              > JARID2  2|Gene expression (Transcription) (R-HSA-74160)|Epige
                                                              > NEGR1   1|Metabolism of proteins (R-HSA-392499)|Post-translat

wc -l rncount_hier_coadread_genes.txt old_rncount_hier_coadread_genes.txt
   2320 rncount_hier_coadread_genes.txt
   2322 old_rncount_hier_coadread_genes.txt

cp gene_wise_hierarchies_coadread.txt old_gene_wise_hierarchies_coadread.txt
sh prep_coadread_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > gene_wise_hierarchies_coadread.txt

diff gene_wise_hierarchies_coadread.txt old_gene_wise_hierarchies_coadread.txt
> 2|Gene expression (Transcription) (R-HSA-74160)|Epigenetic regulation of gene expression (R-HSA-212165)|PRC2 methylates histones and DNA (R-HSA-212300)|

#there are 7 JARID2 mutns in coadread (coadread_tcga_genes_nmutns.txt); hence, prep_coadread_fingerprint_onlyhier.sh, old and new, 
#search for it in cols1_2_all_suprpway_trees_oncokb_genes.txt; the old sh file was pulling out JARID2 for the pattern 
#"JARID2", and for the pattern "ARID2"; the new sh file pulls out JARID2 only for pattern "JARID2"; hence, the old 
#rncount_hier_kirc_genes.txt file has 2 JARID2 entries, and the new rncount file has one JARID2 entry; there are no NEGR1
#mutations in coadread (there are 4 EGR1 mutations); hence prep_coadread_fingerprint_onlyhier.sh, old and new, do not 
#search for it; the old sh file erroneously pulled out NEGR1 for "EGR1"; the new sh file does not pull out NEGR1; 
#prep_coadread_infile_gene_pway_fingerprint.sh correctly uses search patterns ^JARID2, ^ARID2, and ^EGR1; as a result, in the old 
#gene_wise_hierarchies_coadread.txt file, for JARID2, the same entry repeats TWICE; and one NEGR1 entry erroneously occurs 
#for search string "EGR1"; in the new gene_wise_hierarchies_coadread.txt, for JARID2, correctly, only one entry occurs; and no 
#NEGR1 entry occurs; as a result, old and new gene_wise_hierarchies_coadread.txt differ; 

cp coadread_genes_pway_fingerprint_mtx.out old_coadread_genes_pway_fingerprint_mtx.out
perl gene_pway_fingerprint_mtx.pl all_reactome_hierarchies.txt gene_wise_hierarchies_coadread.txt coadread_genes_pway_fingerprint_mtx.out

#have to make format of output file suitable for xl;
vi coadread_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#old and new coadread_genes_pway_fingerprint_mtx.out ARE THE SAME!!  Hence, NO NEED TO REDO
#REST OF CALCULATIONS for coadread!  NO NEED TO CHANGE THE MATRICES in excel for coadread;  
diff coadread_genes_pway_fingerprint_mtx.out old_coadread_genes_pway_fingerprint_mtx.out

#as old and new matrices are same, used the foll mv cmds to restore the original (or old) matrix 
#as the matrix presented in excel; 
mv coadread_genes_pway_fingerprint_mtx.out new_coadread_genes_pway_fingerprint_mtx.out
mv old_coadread_genes_pway_fingerprint_mtx.out coadread_genes_pway_fingerprint_mtx.out

#HNSC
cp prep_hnsc_fingerprint_onlyhier.sh old_prep_hnsc_fingerprint_onlyhier.sh
vi prep_hnsc_fingerprint_onlyhier.sh
#:1,$s/(\$2 \~ \//(\$2 \~ \/ /      ###MADE THIS IMPORTANT CORRECTION 

cp prep_addnl_hnsc_fingerprint_onlyhier.sh old_prep_addnl_hnsc_fingerprint_onlyhier.sh

cp prep_hnsc_fingerprint_onlyhier.sh prep_addnl_hnsc_fingerprint_onlyhier.sh
vi prep_addnl_hnsc_fingerprint_onlyhier.sh
#:1,$s/\$1}' /"(" \$2}' /
#:1,$s/txt; echo "";/txt | awk -F"\\t|, " '{for \(i=1; i<=NF; i++){if \(\$i \~ \//
#:wq

cp hnsc_tcga_drigenes.txt tmp_duplicate.txt
vi tmp_duplicate.txt
#:$        #go to last line
#o         #insert blank line
#esc
#:1        #go to first line
#215yy
#:$
#p
#repeat to get a total of 28 times, for 28 suprpways;

paste -d"\t" prep_addnl_hnsc_fingerprint_onlyhier.sh tmp_duplicate.txt > tmpp.txt
vi tmpp.txt
#:1,$s/\/\t/\//
#:1,$s/$/ \\(\/) print \$i}}'/
#:1,$s/\t \\(\/) print \$i}}'//
#:1,$s/}}'/}}' ; echo "" ;/
#:wq

cp tmpp.txt prep_addnl_hnsc_fingerprint_onlyhier.sh

sh prep_hnsc_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh prep_addnl_hnsc_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

cp rncount_hier_hnsc_genes.txt old_rncount_hier_hnsc_genes.txt
mv junk4.txt rncount_hier_hnsc_genes.txt

diff --side-by-side --suppress-common-lines rncount_hier_hnsc_genes.txt old_rncount_hier_hnsc_genes.txt
                                                              > JARID2  2|Gene expression (Transcription) (R-HSA-74160)|Epige

wc -l rncount_hier_hnsc_genes.txt old_rncount_hier_hnsc_genes.txt
  2057 rncount_hier_hnsc_genes.txt
  2058 old_rncount_hier_hnsc_genes.txt

cp gene_wise_hierarchies_hnsc.txt old_gene_wise_hierarchies_hnsc.txt
sh prep_hnsc_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > gene_wise_hierarchies_hnsc.txt

diff gene_wise_hierarchies_hnsc.txt old_gene_wise_hierarchies_hnsc.txt
> 2|Gene expression (Transcription) (R-HSA-74160)|Epigenetic regulation of gene expression (R-HSA-212165)|PRC2 methylates histones and DNA (R-HSA-212300)|

cp hnsc_genes_pway_fingerprint_mtx.out old_hnsc_genes_pway_fingerprint_mtx.out
perl gene_pway_fingerprint_mtx.pl all_reactome_hierarchies.txt gene_wise_hierarchies_hnsc.txt hnsc_genes_pway_fingerprint_mtx.out

#have to make format of output file suitable for xl;
vi hnsc_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#old and new hnsc_genes_pway_fingerprint_mtx.out ARE THE SAME!!  
diff hnsc_genes_pway_fingerprint_mtx.out old_hnsc_genes_pway_fingerprint_mtx.out

#as old and new matrices are same, used the foll mv cmds to restore the original (or old) matrix 
#as the matrix presented in excel; 
mv hnsc_genes_pway_fingerprint_mtx.out new_hnsc_genes_pway_fingerprint_mtx.out
mv old_hnsc_genes_pway_fingerprint_mtx.out hnsc_genes_pway_fingerprint_mtx.out

#LUAD
cp prep_luad_fingerprint_onlyhier.sh old_prep_luad_fingerprint_onlyhier.sh
vi prep_luad_fingerprint_onlyhier.sh
#:1,$s/(\$2 \~ \//(\$2 \~ \/ /      ###MADE THIS IMPORTANT CORRECTION 

cp prep_addnl_luad_fingerprint_onlyhier.sh old_prep_addnl_luad_fingerprint_onlyhier.sh

cp prep_luad_fingerprint_onlyhier.sh prep_addnl_luad_fingerprint_onlyhier.sh
vi prep_addnl_luad_fingerprint_onlyhier.sh
#:1,$s/\$1}' /"(" \$2}' /
#:1,$s/txt; echo "";/txt | awk -F"\\t|, " '{for \(i=1; i<=NF; i++){if \(\$i \~ \//
#:wq

cp luad_tcga_drigenes.txt tmp_duplicate.txt
vi tmp_duplicate.txt
#:$        #go to last line
#o         #insert blank line
#esc
#:1        #go to first line
#263yy
#:$
#p
#repeat to get a total of 28 times, for 28 suprpways;

paste -d"\t" prep_addnl_luad_fingerprint_onlyhier.sh tmp_duplicate.txt > tmpp.txt
vi tmpp.txt
#:1,$s/\/\t/\//
#:1,$s/$/ \\(\/) print \$i}}'/
#:1,$s/\t \\(\/) print \$i}}'//
#:1,$s/}}'/}}' ; echo "" ;/
#:wq

cp tmpp.txt prep_addnl_luad_fingerprint_onlyhier.sh

sh prep_luad_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh prep_addnl_luad_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

cp rncount_hier_luad_genes.txt old_rncount_hier_luad_genes.txt
mv junk4.txt rncount_hier_luad_genes.txt

diff --side-by-side --suppress-common-lines rncount_hier_luad_genes.txt old_rncount_hier_luad_genes.txt
                                                              > JARID2  2|Gene expression (Transcription) (R-HSA-74160)|Epige

wc -l rncount_hier_luad_genes.txt old_rncount_hier_luad_genes.txt
   2424 rncount_hier_luad_genes.txt
   2425 old_rncount_hier_luad_genes.txt

cp gene_wise_hierarchies_luad.txt old_gene_wise_hierarchies_luad.txt
sh prep_luad_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > gene_wise_hierarchies_luad.txt

diff gene_wise_hierarchies_luad.txt old_gene_wise_hierarchies_luad.txt
> 2|Gene expression (Transcription) (R-HSA-74160)|Epigenetic regulation of gene expression (R-HSA-212165)|PRC2 methylates histones and DNA (R-HSA-212300)|

cp luad_genes_pway_fingerprint_mtx.out old_luad_genes_pway_fingerprint_mtx.out
perl gene_pway_fingerprint_mtx.pl all_reactome_hierarchies.txt gene_wise_hierarchies_luad.txt luad_genes_pway_fingerprint_mtx.out

#have to make format of output file suitable for xl;
vi luad_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#old and new luad_genes_pway_fingerprint_mtx.out ARE THE SAME!!  
diff luad_genes_pway_fingerprint_mtx.out old_luad_genes_pway_fingerprint_mtx.out

#as old and new matrices are same, used the foll mv cmds to restore the original (or old) matrix 
#as the matrix presented in excel; 
mv luad_genes_pway_fingerprint_mtx.out new_luad_genes_pway_fingerprint_mtx.out
mv old_luad_genes_pway_fingerprint_mtx.out luad_genes_pway_fingerprint_mtx.out

#SKCM
cp prep_skcm_fingerprint_onlyhier.sh old_prep_skcm_fingerprint_onlyhier.sh
vi prep_skcm_fingerprint_onlyhier.sh
#:1,$s/(\$2 \~ \//(\$2 \~ \/ /      ###MADE THIS IMPORTANT CORRECTION 

cp prep_addnl_skcm_fingerprint_onlyhier.sh old_prep_addnl_skcm_fingerprint_onlyhier.sh

cp prep_skcm_fingerprint_onlyhier.sh prep_addnl_skcm_fingerprint_onlyhier.sh
vi prep_addnl_skcm_fingerprint_onlyhier.sh
#:1,$s/\$1}' /"(" \$2}' /
#:1,$s/txt; echo "";/txt | awk -F"\\t|, " '{for \(i=1; i<=NF; i++){if \(\$i \~ \//
#:wq

cp skcm_tcga_drigenes.txt tmp_duplicate.txt
vi tmp_duplicate.txt
#:$        #go to last line
#o         #insert blank line
#esc
#:1        #go to first line
#274yy
#:$
#p
#repeat to get a total of 28 times, for 28 suprpways;

paste -d"\t" prep_addnl_skcm_fingerprint_onlyhier.sh tmp_duplicate.txt > tmpp.txt
vi tmpp.txt
#:1,$s/\/\t/\//
#:1,$s/$/ \\(\/) print \$i}}'/
#:1,$s/\t \\(\/) print \$i}}'//
#:1,$s/}}'/}}' ; echo "" ;/
#:wq

cp tmpp.txt prep_addnl_skcm_fingerprint_onlyhier.sh

sh prep_skcm_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh prep_addnl_skcm_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

cp rncount_hier_skcm_genes.txt old_rncount_hier_skcm_genes.txt
mv junk4.txt rncount_hier_skcm_genes.txt

diff --side-by-side --suppress-common-lines rncount_hier_skcm_genes.txt old_rncount_hier_skcm_genes.txt
                                                              > JARID2  2|Gene expression (Transcription) (R-HSA-74160)|Epige

wc -l rncount_hier_skcm_genes.txt old_rncount_hier_skcm_genes.txt
   2598 rncount_hier_skcm_genes.txt
   2599 old_rncount_hier_skcm_genes.txt

cp gene_wise_hierarchies_skcm.txt old_gene_wise_hierarchies_skcm.txt
sh prep_skcm_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > gene_wise_hierarchies_skcm.txt

diff gene_wise_hierarchies_skcm.txt old_gene_wise_hierarchies_skcm.txt
> 2|Gene expression (Transcription) (R-HSA-74160)|Epigenetic regulation of gene expression (R-HSA-212165)|PRC2 methylates histones and DNA (R-HSA-212300)|

cp skcm_genes_pway_fingerprint_mtx.out old_skcm_genes_pway_fingerprint_mtx.out
perl gene_pway_fingerprint_mtx.pl all_reactome_hierarchies.txt gene_wise_hierarchies_skcm.txt skcm_genes_pway_fingerprint_mtx.out

#have to make format of output file suitable for xl;
vi skcm_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#old and new skcm_genes_pway_fingerprint_mtx.out ARE THE SAME!!  
diff skcm_genes_pway_fingerprint_mtx.out old_skcm_genes_pway_fingerprint_mtx.out

#as old and new matrices are same, used the foll mv cmds to restore the original (or old) matrix 
#as the matrix presented in excel; 
mv skcm_genes_pway_fingerprint_mtx.out new_skcm_genes_pway_fingerprint_mtx.out
mv old_skcm_genes_pway_fingerprint_mtx.out skcm_genes_pway_fingerprint_mtx.out

#GBM
cp prep_gbm_fingerprint_onlyhier.sh old_prep_gbm_fingerprint_onlyhier.sh
vi prep_gbm_fingerprint_onlyhier.sh
#:1,$s/(\$2 \~ \//(\$2 \~ \/ /      ###MADE THIS IMPORTANT CORRECTION 

cp prep_addnl_gbm_fingerprint_onlyhier.sh old_prep_addnl_gbm_fingerprint_onlyhier.sh

cp prep_gbm_fingerprint_onlyhier.sh prep_addnl_gbm_fingerprint_onlyhier.sh
vi prep_addnl_gbm_fingerprint_onlyhier.sh
#:1,$s/\$1}' /"(" \$2}' /
#:1,$s/txt; echo "";/txt | awk -F"\\t|, " '{for \(i=1; i<=NF; i++){if \(\$i \~ \//
#:wq

cp gbm_tcga_drigenes.txt tmp_duplicate.txt
vi tmp_duplicate.txt
#:$        #go to last line
#o         #insert blank line
#esc
#:1        #go to first line
#150yy
#:$
#p
#repeat to get a total of 28 times, for 28 suprpways;

paste -d"\t" prep_addnl_gbm_fingerprint_onlyhier.sh tmp_duplicate.txt > tmpp.txt
vi tmpp.txt
#:1,$s/\/\t/\//
#:1,$s/$/ \\(\/) print \$i}}'/
#:1,$s/\t \\(\/) print \$i}}'//
#:1,$s/}}'/}}' ; echo "" ;/
#:wq

cp tmpp.txt prep_addnl_gbm_fingerprint_onlyhier.sh

sh prep_gbm_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh prep_addnl_gbm_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

cp rncount_hier_gbm_genes.txt old_rncount_hier_gbm_genes.txt
mv junk4.txt rncount_hier_gbm_genes.txt

diff --side-by-side --suppress-common-lines rncount_hier_gbm_genes.txt old_rncount_hier_gbm_genes.txt
                                                              > JARID2  2|Gene expression (Transcription) (R-HSA-74160)|Epige

wc -l rncount_hier_gbm_genes.txt old_rncount_hier_gbm_genes.txt
  1556 rncount_hier_gbm_genes.txt
  1557 old_rncount_hier_gbm_genes.txt


cp gene_wise_hierarchies_gbm.txt old_gene_wise_hierarchies_gbm.txt
sh prep_gbm_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > gene_wise_hierarchies_gbm.txt

diff gene_wise_hierarchies_gbm.txt old_gene_wise_hierarchies_gbm.txt
> 2|Gene expression (Transcription) (R-HSA-74160)|Epigenetic regulation of gene expression (R-HSA-212165)|PRC2 methylates histones and DNA (R-HSA-212300)|

cp gbm_genes_pway_fingerprint_mtx.out old_gbm_genes_pway_fingerprint_mtx.out
perl gene_pway_fingerprint_mtx.pl all_reactome_hierarchies.txt gene_wise_hierarchies_gbm.txt gbm_genes_pway_fingerprint_mtx.out

#have to make format of output file suitable for xl;
vi gbm_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#old and new gbm_genes_pway_fingerprint_mtx.out ARE THE SAME!!  
diff gbm_genes_pway_fingerprint_mtx.out old_gbm_genes_pway_fingerprint_mtx.out

#as old and new matrices are same, used the foll mv cmds to restore the original (or old) matrix 
#as the matrix presented in excel; 
mv gbm_genes_pway_fingerprint_mtx.out new_gbm_genes_pway_fingerprint_mtx.out
mv old_gbm_genes_pway_fingerprint_mtx.out gbm_genes_pway_fingerprint_mtx.out

#LAML
cp prep_laml_fingerprint_onlyhier.sh old_prep_laml_fingerprint_onlyhier.sh
vi prep_laml_fingerprint_onlyhier.sh
#:1,$s/(\$2 \~ \//(\$2 \~ \/ /      ###MADE THIS IMPORTANT CORRECTION 

cp prep_addnl_laml_fingerprint_onlyhier.sh old_prep_addnl_laml_fingerprint_onlyhier.sh

cp prep_laml_fingerprint_onlyhier.sh prep_addnl_laml_fingerprint_onlyhier.sh
vi prep_addnl_laml_fingerprint_onlyhier.sh
#:1,$s/\$1}' /"(" \$2}' /
#:1,$s/txt; echo "";/txt | awk -F"\\t|, " '{for \(i=1; i<=NF; i++){if \(\$i \~ \//
#:wq

cp laml_tcga_drigenes.txt tmp_duplicate.txt
vi tmp_duplicate.txt
#:$        #go to last line
#o         #insert blank line
#esc
#:1        #go to first line
#93yy
#:$
#p
#repeat to get a total of 28 times, for 28 suprpways;

paste -d"\t" prep_addnl_laml_fingerprint_onlyhier.sh tmp_duplicate.txt > tmpp.txt
vi tmpp.txt
#:1,$s/\/\t/\//
#:1,$s/$/ \\(\/) print \$i}}'/
#:1,$s/\t \\(\/) print \$i}}'//
#:1,$s/}}'/}}' ; echo "" ;/
#:wq

cp tmpp.txt prep_addnl_laml_fingerprint_onlyhier.sh

sh prep_laml_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh prep_addnl_laml_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

cp rncount_hier_laml_genes.txt old_rncount_hier_laml_genes.txt
mv junk4.txt rncount_hier_laml_genes.txt

diff --side-by-side --suppress-common-lines rncount_hier_laml_genes.txt old_rncount_hier_laml_genes.txt
                                                              > JARID2  2|Gene expression (Transcription) (R-HSA-74160)|Epige

wc -l rncount_hier_laml_genes.txt old_rncount_hier_laml_genes.txt
   949 rncount_hier_laml_genes.txt
   950 old_rncount_hier_laml_genes.txt

cp gene_wise_hierarchies_laml.txt old_gene_wise_hierarchies_laml.txt
sh prep_laml_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > gene_wise_hierarchies_laml.txt

diff gene_wise_hierarchies_laml.txt old_gene_wise_hierarchies_laml.txt
#both files are IDENTICAL! Hence, NO NEED TO REDO REST OF CALCULATIONS for laml!

--------------------------------------------------

#unix notes:
#how to split in awk
#https://stackoverflow.com/questions/8009664/how-to-split-a-delimited-string-into-an-array-in-awk

#https://askubuntu.com/questions/1322268/how-to-split-a-string-from-a-column-using-awk

#foll maybe useful for using | 
#https://fedingo.com/awk-split-one-column-into-multiple-columns/

--------------------------------------------------

#while looking at results;
#dir4pwayswrtup
#all oncokb convergences for APC;
grep " APC (" fortabuln_hier_oncokb_*.txt | grep -v "All oncokb or bmomim genes in top-level pathway" | awk -F", " '{{for (i=1; i<NF; i++)printf $i}print ""}'
#all oncokb and omim convergences for APC
grep " APC (" fortabuln_hier_*.txt | grep -v "All oncokb or bmomim genes in top-level pathway" | awk -F", " '{{for (i=1; i<NF; i++)printf $i}print ""}'

#dir4pwayswrtup/gene_pway_fingerprint/finprnt
#all coadread convergences for APC; 
#grep "^APC" coadread_interim1.txt
#grep "^APC" coadread_interim1.txt | awk -F"\t" '{IFS=OFS="\t"}{{for (i=3; i<=NF; i++) printf $i OFS} print ""}' | more
#grep "^APC" coadread_interim1.txt | awk -F"\t" '{IFS=OFS="\t"}{{for (i=3; i<=NF; i++) print $i OFS}}' | grep ")_" | sed -e 's/)_/) /' | sort -k1,1 | cut -d" " -f1 | uniq
awk -F"\t" '{IFS=OFS="\t"}(($1 ~ /^APC_/) && ($2 ~ /\|Signal Transduction \(R-HSA-162582\)\|/)){for (i=3; i<=NF; i++) print $i OFS}' coadread_interim1.txt | grep ")_" | sed -e 's/)_/) /' | sort -k1,1 | cut -d" " -f1 | uniq
awk -F"\t" '{IFS=OFS="\t"}(($1 ~ /^APC_/) && ($2 ~ /\|Signal Transduction \(R-HSA-162582\)\|/)){for (i=3; i<=NF; i++) print $i OFS}' coadread_interim1.txt | grep ")_" | sed -e 's/)_/) /' -e 's/_/ /' | sort -k1,1 | cut -d" " -f1 | uniq
awk -F"\t" '{IFS=OFS="\t"}(($1 ~ /^APC_/) && ($2 ~ /\|Signal Transduction \(R-HSA-162582\)\|/)){{for (i=3; i<=NF; i++) printf $i OFS} print "" }' coadread_interim1.txt

#*****
#below correct;
awk -F"\t" '{IFS=OFS="\t"}(($1 ~ /^APC_/) && ($2 ~ /\|Signal Transduction \(R-HSA-162582\)\|/)){ split ($2, n_rns_in_hier, "|"); printf $1 OFS n_rns_in_hier[1] OFS; for (i=2; i<=NF; i++) {printf $i OFS} print "" }' coadread_interim1.txt
awk -F"\t" '{IFS=OFS="\t"}(($1 ~ /^APC_/) && ($2 ~ /\|Signal Transduction \(R-HSA-162582\)\|/)){ split ($2, n_rns_in_hier, "|"); printf $1 OFS n_rns_in_hier[1] OFS; for (i=4; i<=NF; i++) {printf $i OFS} print "" }' coadread_interim1.txt

#****also see file apc_ctnnb1 in windows; also see networktrial.txt

#pway_anal/gene_pway_matrix
#reaction-wise convergences of APC with oncokb and omim genes;
grep "APC" pway_converged_genes.txt 
#reaction-wise convergences of APC with oncokb AND omim genes (none for APC, because APC does not 
#converge wth any omim gene);
grep "APC" pways_oncokb_and_omim_genes_converged.txt

#Note: change the totals calculations; use: 
#(sum of number of reactions gene participates in)/(total number of reactions in superpway)

#for node weights, you can use n(mutns); for edge weights, you can use (sum of reactions the 2 genes participate in)/2;  

#--------------------------------------------------

#modifying the totals-calculations (done above), to use the foll formula: 
#(sum of number of reactions gene participates in, in the various hierarchies of a superpway)/
#(total number of reactions in the hierarchies of the superpway that the gene participates in)

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt 

cp total_gene_suprpway_contrbns.awk new_total_gene_suprpway_contrbns.awk

#modified new_total_gene_suprpway_contrbns.awk as below:
#new lines are the foll:
## denom[k] = denom[k] + a[hacol+1,harow]; \
## numer[k] = numer[k] + a[hacol+2,harow]; \
## sumfracn[k] = numer[k]/denom[k]; \
#Also added the foll lines;
#denom[k]=0;
#numer[k]=0;

#old lines were the foll:
## denom=a[hacol+1,harow]; \
## numer=a[hacol+2,harow]; \
## fracn=numer/denom; \
## sumfracn[k]=sumfracn[k]+fracn; \

sh new_total_gene_suprpway_contrbns.awk

#Values for checking:
#laml NPM1_52
#Disease = (17+7+5+1)/(20+9+7+1) = 30/37 = 0.81 * 52 = 42.16 
#Gene Expression = (7+1)/(7+14) =  8/21 = 0.38 * 52 = 19.81 
#Cell Cycle = 3/4 = 0.75 * 52 = 39 
#laml FLT3_51
#Immune System = (20+12+4+3)/(24+12+4+3) = 39/43 = 0.91 * 51 = 46.26
#Disease = (10+4+2+16)/(10+14+2+17)=0.74 * 51 = 37.95
#laml TP53_20
#Gene Expression = (23+20+14+14+12+12+11+10+9+8+8+6+6+5+4+2+1+1)/(26+25+19+34+17+17+30+14+11+12+17+11+7+6+5+8+13+6)
# = 166/278 = 0.597 * 20 = 11.940
#laml DNMT3A_40 Gene Expression = 14.545
#laml RUNX1_24 Gene Expression = (33+20+10+9+7+7+6+6+5+5+4+4+2+1)/(33+20+15+19+7+8+6+8+5+5+4+4+8+2) = 0.8264 * 24 = 19.83
#laml KRAS_9 Signal Transduction = 81/314 = 0.26 * 9 = 2.32
#laml NRAS_16 Signal Transduction = ((8+7+5+8+6+16+21)/(12+21+14+12+8+10+6+13+4+10+36+12+16+4+31+3+32+10+18+15))*16 = 3.958
#laml NRAS_16 Disease = ((21+6+12+14)/(28+13+15+17+18+23+2+50+11+18+1+5+6+14+17)) * 16 = 3.563
#laml NRAS_16 Immune System = ((4+5)/(11+10+17+20+24+2)) * 16 = 1.714
#laml NRAS_16 Developmental Biology = 1/13 * 16 = 1.23
#laml NRAS_16 Hemostasis = 1/14 * 16 = 1.143
#laml NRAS_16 Hemostasis = 1/14 * 16 = 1.143
#laml NRAS_16 Neuronal System = 1/2 * 16 = 8


#Lines 307 to 391, above, have been copied below;
#re-ran the awk scripts to get new totals-files;
#First, ran below script for all cancers;
vi new_total_suprpway_contrbns.awk
#first input file name was left unmodified; 
#replaced existing second input file name with the foll file name: 
modified_laml_ordrd_genewise_pway_fprint.txt
sh new_total_suprpway_contrbns.awk > new_total_suprpwaycontrbns_laml.txt

vi new_total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
modified_brca_ordrd_genewise_pway_fprint.txt
sh new_total_suprpway_contrbns.awk > new_total_suprpwaycontrbns_brca.txt

vi new_total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
modified_coadread_ordrd_genewise_pway_fprint.txt
sh new_total_suprpway_contrbns.awk > new_total_suprpwaycontrbns_coadread.txt

vi new_total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
modified_gbm_ordrd_genewise_pway_fprint.txt
sh new_total_suprpway_contrbns.awk > new_total_suprpwaycontrbns_gbm.txt

vi new_total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
modified_hnsc_ordrd_genewise_pway_fprint.txt
sh new_total_suprpway_contrbns.awk > new_total_suprpwaycontrbns_hnsc.txt

vi new_total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
modified_kirc_ordrd_genewise_pway_fprint.txt
sh new_total_suprpway_contrbns.awk > new_total_suprpwaycontrbns_kirc.txt

vi new_total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
modified_luad_ordrd_genewise_pway_fprint.txt
sh new_total_suprpway_contrbns.awk > new_total_suprpwaycontrbns_luad.txt

vi new_total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
modified_skcm_ordrd_genewise_pway_fprint.txt
sh new_total_suprpway_contrbns.awk > new_total_suprpwaycontrbns_skcm.txt


#Next, ran below script for all cancers;
#edited the file to uncomment the second-last print statement; 
vi new_total_gene_suprpway_contrbns.awk
#also, replaced existing second input file name with the foll file name: 
modified_laml_ordrd_genewise_pway_fprint.txt
sh new_total_gene_suprpway_contrbns.awk > new_total_genesuprpwaycontrbns_laml.txt

vi new_total_gene_suprpway_contrbns.awk
#also, replaced existing second input file name with the foll file name: 
modified_brca_ordrd_genewise_pway_fprint.txt
sh new_total_gene_suprpway_contrbns.awk > new_total_genesuprpwaycontrbns_brca.txt

vi new_total_gene_suprpway_contrbns.awk
#also, replaced existing second input file name with the foll file name: 
modified_coadread_ordrd_genewise_pway_fprint.txt
sh new_total_gene_suprpway_contrbns.awk > new_total_genesuprpwaycontrbns_coadread.txt

vi new_total_gene_suprpway_contrbns.awk
#also, replaced existing second input file name with the foll file name: 
modified_gbm_ordrd_genewise_pway_fprint.txt
sh new_total_gene_suprpway_contrbns.awk > new_total_genesuprpwaycontrbns_gbm.txt

vi new_total_gene_suprpway_contrbns.awk
#also, replaced existing second input file name with the foll file name: 
modified_hnsc_ordrd_genewise_pway_fprint.txt
sh new_total_gene_suprpway_contrbns.awk > new_total_genesuprpwaycontrbns_hnsc.txt

vi new_total_gene_suprpway_contrbns.awk
#also, replaced existing second input file name with the foll file name: 
modified_kirc_ordrd_genewise_pway_fprint.txt
sh new_total_gene_suprpway_contrbns.awk > new_total_genesuprpwaycontrbns_kirc.txt

vi new_total_gene_suprpway_contrbns.awk
#also, replaced existing second input file name with the foll file name: 
modified_luad_ordrd_genewise_pway_fprint.txt
sh new_total_gene_suprpway_contrbns.awk > new_total_genesuprpwaycontrbns_luad.txt

vi new_total_gene_suprpway_contrbns.awk
#also, replaced existing second input file name with the foll file name: 
modified_skcm_ordrd_genewise_pway_fprint.txt
sh new_total_gene_suprpway_contrbns.awk > new_total_genesuprpwaycontrbns_skcm.txt

--------------------------------------------------
#Generating new totals-files for excel;  
#copied and pasted, below, lines 392 to 561 from above; modified as required;

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/totldir
#copied new_total set of files to this sub-dir;
cp /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/new_total_*.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/totldir/.

#BRCA
#only the third part of each new_total file needs to be sorted; so edited each new_total file to retain
#only the third part;   
cp new_total_suprpwaycontrbns_brca.txt new_forsort_suprpwaycontrbns_brca.txt
vi new_forsort_suprpwaycontrbns_brca.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' new_forsort_suprpwaycontrbns_brca.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > new_brca_suprpwaytotals_sortd.txt

cp new_total_genesuprpwaycontrbns_brca.txt new_forsort_genesuprpwaycontrbns_brca.txt
vi new_forsort_genesuprpwaycontrbns_brca.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' new_forsort_genesuprpwaycontrbns_brca.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > new_forsort2_genesuprpwaycontrbns_brca.txt

#Need to arrange new_brca_genesuprpwaytotals_sortd.txt in the order in which superpways have been arranged in arrngd_suprpways.txt
## cp /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/arrngd_suprpways.txt /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/totldir/arrngd_ordr_suprway.sh
#turning arrngd_ordr_suprway.sh into a cmd file;
## vi arrngd_ordr_suprway.sh
#:1,$s/^/grep "/
#:1,$s/$/" \$1/
sh arrngd_ordr_suprway.sh new_forsort2_genesuprpwaycontrbns_brca.txt > new_brca_genesuprpwaytotals_sortd.txt

#COADREAD
#edited each new_total file to retain only the third part;   
cp new_total_suprpwaycontrbns_coadread.txt new_forsort_suprpwaycontrbns_coadread.txt
vi new_forsort_suprpwaycontrbns_coadread.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' new_forsort_suprpwaycontrbns_coadread.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > new_coadread_suprpwaytotals_sortd.txt

cp new_total_genesuprpwaycontrbns_coadread.txt new_forsort_genesuprpwaycontrbns_coadread.txt
vi new_forsort_genesuprpwaycontrbns_coadread.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' new_forsort_genesuprpwaycontrbns_coadread.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > new_forsort2_genesuprpwaycontrbns_coadread.txt

#Rearranging new_coadread_genesuprpwaytotals_sortd.txt
sh arrngd_ordr_suprway.sh new_forsort2_genesuprpwaycontrbns_coadread.txt > new_coadread_genesuprpwaytotals_sortd.txt

#GBM
#edited each new_total file to retain only the third part;   
cp new_total_suprpwaycontrbns_gbm.txt new_forsort_suprpwaycontrbns_gbm.txt
vi new_forsort_suprpwaycontrbns_gbm.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' new_forsort_suprpwaycontrbns_gbm.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > new_gbm_suprpwaytotals_sortd.txt

cp new_total_genesuprpwaycontrbns_gbm.txt new_forsort_genesuprpwaycontrbns_gbm.txt
vi new_forsort_genesuprpwaycontrbns_gbm.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' new_forsort_genesuprpwaycontrbns_gbm.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > new_forsort2_genesuprpwaycontrbns_gbm.txt

#Rearranging new_gbm_genesuprpwaytotals_sortd.txt
sh arrngd_ordr_suprway.sh new_forsort2_genesuprpwaycontrbns_gbm.txt > new_gbm_genesuprpwaytotals_sortd.txt

#HNSC
#edited each new_total file to retain only the third part;   
cp new_total_suprpwaycontrbns_hnsc.txt new_forsort_suprpwaycontrbns_hnsc.txt
vi new_forsort_suprpwaycontrbns_hnsc.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' new_forsort_suprpwaycontrbns_hnsc.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > new_hnsc_suprpwaytotals_sortd.txt

cp new_total_genesuprpwaycontrbns_hnsc.txt new_forsort_genesuprpwaycontrbns_hnsc.txt
vi new_forsort_genesuprpwaycontrbns_hnsc.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' new_forsort_genesuprpwaycontrbns_hnsc.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > new_forsort2_genesuprpwaycontrbns_hnsc.txt

#Rearranging new_hnsc_genesuprpwaytotals_sortd.txt
sh arrngd_ordr_suprway.sh new_forsort2_genesuprpwaycontrbns_hnsc.txt > new_hnsc_genesuprpwaytotals_sortd.txt

#KIRC
#edited each new_total file to retain only the third part;   
cp new_total_suprpwaycontrbns_kirc.txt new_forsort_suprpwaycontrbns_kirc.txt
vi new_forsort_suprpwaycontrbns_kirc.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' new_forsort_suprpwaycontrbns_kirc.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > new_kirc_suprpwaytotals_sortd.txt

cp new_total_genesuprpwaycontrbns_kirc.txt new_forsort_genesuprpwaycontrbns_kirc.txt
vi new_forsort_genesuprpwaycontrbns_kirc.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' new_forsort_genesuprpwaycontrbns_kirc.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > new_forsort2_genesuprpwaycontrbns_kirc.txt

#Rearranging new_kirc_genesuprpwaytotals_sortd.txt
sh arrngd_ordr_suprway.sh new_forsort2_genesuprpwaycontrbns_kirc.txt > new_kirc_genesuprpwaytotals_sortd.txt

#LAML
#edited each new_total file to retain only the third part;   
cp new_total_suprpwaycontrbns_laml.txt new_forsort_suprpwaycontrbns_laml.txt
vi new_forsort_suprpwaycontrbns_laml.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' new_forsort_suprpwaycontrbns_laml.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > new_laml_suprpwaytotals_sortd.txt

cp new_total_genesuprpwaycontrbns_laml.txt new_forsort_genesuprpwaycontrbns_laml.txt
vi new_forsort_genesuprpwaycontrbns_laml.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' new_forsort_genesuprpwaycontrbns_laml.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > new_forsort2_genesuprpwaycontrbns_laml.txt

#Rearranging new_laml_genesuprpwaytotals_sortd.txt
sh arrngd_ordr_suprway.sh new_forsort2_genesuprpwaycontrbns_laml.txt > new_laml_genesuprpwaytotals_sortd.txt

#LUAD
#edited each new_total file to retain only the third part;   
cp new_total_suprpwaycontrbns_luad.txt new_forsort_suprpwaycontrbns_luad.txt
vi new_forsort_suprpwaycontrbns_luad.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' new_forsort_suprpwaycontrbns_luad.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > new_luad_suprpwaytotals_sortd.txt

cp new_total_genesuprpwaycontrbns_luad.txt new_forsort_genesuprpwaycontrbns_luad.txt
vi new_forsort_genesuprpwaycontrbns_luad.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' new_forsort_genesuprpwaycontrbns_luad.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > new_forsort2_genesuprpwaycontrbns_luad.txt

#Rearranging new_luad_genesuprpwaytotals_sortd.txt
sh arrngd_ordr_suprway.sh new_forsort2_genesuprpwaycontrbns_luad.txt > new_luad_genesuprpwaytotals_sortd.txt

#SKCM
#edited each new_total file to retain only the third part;   
cp new_total_suprpwaycontrbns_skcm.txt new_forsort_suprpwaycontrbns_skcm.txt
vi new_forsort_suprpwaycontrbns_skcm.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' new_forsort_suprpwaycontrbns_skcm.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > new_skcm_suprpwaytotals_sortd.txt

cp new_total_genesuprpwaycontrbns_skcm.txt new_forsort_genesuprpwaycontrbns_skcm.txt
vi new_forsort_genesuprpwaycontrbns_skcm.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' new_forsort_genesuprpwaycontrbns_skcm.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > new_forsort2_genesuprpwaycontrbns_skcm.txt

#Rearranging new_skcm_genesuprpwaytotals_sortd.txt
sh arrngd_ordr_suprway.sh new_forsort2_genesuprpwaycontrbns_skcm.txt > new_skcm_genesuprpwaytotals_sortd.txt

#took the above files (e.g., new_total_genesuprpwaycontrbns_skcm.txt, new_skcm_suprpwaytotals_sortd.txt, new_skcm_genesuprpwaytotals_sortd.txt)
#to windows, and tabulated them in the foll excel file:  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways\pway_fingerprint_matrix\totalfiles\new_totalfiles\new_totals.xlsx

--------------------------------------------------

#generating a table which lists superpways in descending order of superpway totals; 
#and for each superpway, lists the significantly contributing genes;

#pwd = /scratch/prasannalab/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/totldir

#created the foll file to get, for each cancer, suprpways and corresponding gene contributions in decreasing order;
vi get_allcan_gene_suprpway_contrbns.sh 
#into this file, copied and pasted suprpway names from the xl file: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\
#new1186files\pways\pway_fingerprint_matrix\totalfiles\new_totalfiles\new_totals.xlsx
#sheet = 8_cans_new_suprpway_totals
#the suprpways are arranged in descending order of totals in the xl file;
#after copying and pasting, manually created this sh file;
#vi tips to delete from cursor to end of line;
#C (or c$)  D (or d$)

#creating another sh file by modifying above one; the aim is to get a count of the number of genes there
#are in each suprpway, in each cancer; the cancer with the maximum number of genes, in each suprpway, will 
#determine the number of blank lines to be inserted for a neat tabulation;  

#sort -k2,2 get_allcan_gene_suprpway_contrbns.sh | grep -v "echo" | sed -e 's/$/ | wc -l/' | awk '{print $0 " " $0}' | \
#sed -e 's/grep/echo -n -e/' -e 's/" new_/  /' -e 's/_genesuprpwaytotals_sortd\.txt/  "/' -e 's/ | wc -l/ ;/' \
#> for_neat_tbl_allcan_g_s_contrbns.sh

sort -k2,2 get_allcan_gene_suprpway_contrbns.sh | grep -v "echo" | sed -e 's/$/ | wc -l/' | awk '{print $0 " " $0}' | \
sed -e 's/grep/echo -n -e/' -e 's/" new_/  /' -e 's/_genesuprpwaytotals_sortd\.txt/  "/' -e 's/ | wc -l/ ;/' | \
sed -e 's/Metabolism"/Metabolism \("/' > for_neat_tbl_allcan_g_s_contrbns.sh

#the last awk cmd, below, prepends the last field of each line, does a reverse numerical sort, then uses cut to remove the added field:
sh for_neat_tbl_allcan_g_s_contrbns.sh | awk '{print $NF,$0}' | sed -e 's/Metabolism of RNA/Metabolism_of_RNA/' -e 's/Metabolism of proteins/Metabolism_of_proteins/' | sort -k2,2 -k1,1rn | cut -f2- -d' ' > info_for_neat_tbl.txt

#from info_for_neat_tbl.txt, you get foll informn; 
Chromatin organization  coadread  31  (Chrom org ends on line 31)
DNA Repair  coadread  40  (DNA Repair ends on line 31 + 40 = 71)
DNA Replication  brca  2  (DNA Replication ends on line 71 + 2 = 73)
Cell Cycle  brca  40                                       (113)
Cell-Cell communication  coadread  10                      (123)
Extracellular matrix organization  luad  5                 (128)
Organelle biogenesis and maintenance  coadread  5          (133)
Transport of small molecules  coadread  6                  (139)
Autophagy  brca  7                                         (146)
Protein localization  brca  2                              (148)
Vesicle-mediated transport  brca  13                       (161)
Reproduction  luad  17                                     (178)
Developmental Biology  skcm  58                            (236)
Muscle contraction  laml  2                                (238)
Neuronal System  skcm  12                                  (250)
Sensory Perception  coadread  3                            (253)
Circadian Clock  gbm  5                                    (258)
Metabolism  brca  27                                       (285)
Metabolism_of_RNA  brca  11                                (296)
Metabolism_of_proteins  coadread  61                       (357)
Hemostasis  luad  30                                       (387)
Immune System  skcm  68                                    (455)
Programmed Cell Death  coadread  12                        (467)
Cellular responses to stimuli  skcm  35                    (502)
Signal Transduction  skcm  122                             (624)
Gene expression  coadread  106                             (730)
Disease  skcm  116                                         (846)

cp new_kirc_genesuprpwaytotals_sortd.txt neattbl_kirc_genesuprpwaytotals_sortd.txt
vi neattbl_kirc_genesuprpwaytotals_sortd.txt
#inserted blank lines so that, for e.g., for Chromatin organization, there are are total of 31 lines,
#and DNA Repair ends at 31+40=71 lines; etc..
cp new_coadread_genesuprpwaytotals_sortd.txt neattbl_coadread_genesuprpwaytotals_sortd.txt
vi neattbl_coadread_genesuprpwaytotals_sortd.txt
cp new_brca_genesuprpwaytotals_sortd.txt neattbl_brca_genesuprpwaytotals_sortd.txt
vi neattbl_brca_genesuprpwaytotals_sortd.txt
cp new_gbm_genesuprpwaytotals_sortd.txt neattbl_gbm_genesuprpwaytotals_sortd.txt
vi neattbl_gbm_genesuprpwaytotals_sortd.txt
cp new_hnsc_genesuprpwaytotals_sortd.txt neattbl_hnsc_genesuprpwaytotals_sortd.txt
vi neattbl_hnsc_genesuprpwaytotals_sortd.txt
cp new_luad_genesuprpwaytotals_sortd.txt neattbl_luad_genesuprpwaytotals_sortd.txt
vi neattbl_luad_genesuprpwaytotals_sortd.txt
cp new_skcm_genesuprpwaytotals_sortd.txt neattbl_skcm_genesuprpwaytotals_sortd.txt
vi neattbl_skcm_genesuprpwaytotals_sortd.txt
cp new_laml_genesuprpwaytotals_sortd.txt neattbl_laml_genesuprpwaytotals_sortd.txt
vi neattbl_laml_genesuprpwaytotals_sortd.txt

#The output files neattbl_*_genesuprpwaytotals_sortd.txt were tabulated in:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways\pway_fingerprint_matrix\
#totalfiles\new_totalfiles\new_totals.xlsx, sheets = neattbl_gsp_totals, neattbl_edited_gsp_totals

--------------------------------------------------

#DECIDED NOT TO TAKE THE FOLL APPROACH;

#foll cmd lists the genes in Chrom org suprpway which occur in more than one cancer; the ($3 >= 1.0)
#expression below ensures that only the genes contributing a score of >= 1.0 are considered; this cutoff 
#of 1.0 was obtained by looking at the values in the xl table; removing this expression will include ALL 
#genes contributing to the suprpway, making it difficult to make out which genes are the big contributors;
#foll cmd is for seeing on screen;
grep "Chromatin organization" neattbl_*.txt | sed -e 's/neattbl_//' -e 's/_genesuprpwaytotals_sortd\.txt:/ /' | \
awk -F" " '{print $1 "  " $2 "  " $NF}' | sort -k1,1 -k3,3gr | awk -F" " '($3 >= 1.0){print $1 "  " $2 "  " $NF}' | \
sed -e 's/_(/  (/' | awk -F"  " '{print $2 "  " $3 "  " $4 "  " $1}' | sort -k1,1 -k3,3gr
#foll cmd lists the main genes and the number of cancers each gene occurs in; 
echo "Main drivers in Chromatin organization\tn(cancers)" > main_genes_in_each_suprpway.txt
grep "Chromatin organization" neattbl_*.txt | sed -e 's/neattbl_//' -e 's/_genesuprpwaytotals_sortd\.txt:/ /' | \
awk -F" " '{print $1 "  " $2 "  " $NF}' | sort -k1,1 -k3,3gr | awk -F" " '($3 >= 1.0){print $1 "  " $2 "  " $NF}' | \
sed -e 's/_(/  (/' | awk -F"  " '{print $2 "  " $3 "  " $4 "  " $1}' | sort -k1,1 -k3,3gr | awk -F"  " '{print $1}' | \
sort | uniq -c | sort -k1,1r | awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

#BOTH, THE XL TABLE AND THE ABOVE COMMANDS ARE USEFUL;
#The above commands are useful to get to know which are the MAIN genes in a suprpway, and are repeating in multiple cancers;
#but the xl table tells you in descending order, the EXTENT to which each gene is contributing; also, it gives the COMPLETE
#LIST of Chrom org genes; 

##foll cmd lists ALL genes, WITHOUT THE ($3 >= 1.0) RESTRICTION, and indicates the number of cancers each gene occurs in;  
##grep "Chromatin organization" neattbl_*.txt | sed -e 's/neattbl_//' -e 's/_genesuprpwaytotals_sortd\.txt:/ /' | awk -F" " '{print $1 "  " $2 "  " $NF}' | sort -k1,1 -k3,3gr | awk -F" " '{print $1 "  " $2 "  " $NF}' | sed -e 's/_(/  (/' | awk -F"  " '{print $2 "  " $3 "  " $4 "  " $1}' | sort -k1,1 -k3,3gr | awk -F"  " '{print $1}' | sort | uniq -c | sort -k1,1r

--------------------------------------------------

#Decided not to take the above approach; 
#Instead, decided to MANUALLY select the important genes from the xl table; 

vi inp_maingenes_chromatin_organizn.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file, 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways\pway_fingerprint_matrix\totalfiles\new_totalfiles.xlsx
#sheet = neattbl_edited_gsp_totals;  
#:1,$s/_/\t/
echo "Main drivers in Chromatin organization\tn(cancers)" > main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_chromatin_organizn.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_dna_repair.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in DNA Repair\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_dna_repair.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_dna_replicn.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in DNA Replication\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_dna_replicn.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_cell_cycle.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Cell Cycle\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_cell_cycle.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_cell_cell_communcn.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Cell-Cell communication\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_cell_cell_communcn.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_extracell_mtx_organizn.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Extracellular matrix organization\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_extracell_mtx_organizn.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_organelle_biogen_maintnce.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Organelle biogenesis and maintenance\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_organelle_biogen_maintnce.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_transport_small_molec.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Transport of small molecules\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_transport_small_molec.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_autophagy.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Autophagy\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_autophagy.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_protein_localizn.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Protein localization\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_protein_localizn.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_vesicle_mediatd_transp.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Vesicle-mediated transport\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_vesicle_mediatd_transp.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_reproductn.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Reproduction\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_reproductn.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_devlpmntal_biol.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Developmental Biology\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_devlpmntal_biol.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_muscle_contrcn.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Muscle contraction\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_muscle_contrcn.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_neuronal_systm.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Neuronal System\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_neuronal_systm.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_sensory_percpn.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Sensory Perception\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_sensory_percpn.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_circadn_clock.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Circadian Clock\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_circadn_clock.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_metabolism.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Metabolism\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_metabolism.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_metabolism_rna.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Metabolism of RNA\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_metabolism_rna.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_metabolism_protns.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Metabolism of proteins\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_metabolism_protns.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_hemostasis.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Hemostasis\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_hemostasis.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_immune_sys.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Immune System\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_immune_sys.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_prog_cell_death.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Programmed Cell Death\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_prog_cell_death.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_cellular_resp_stimuli.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Cellular responses to stimuli\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_cellular_resp_stimuli.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_signal_transd.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Signal Transduction\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_signal_transd.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_gene_exprssn.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Gene expression\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_gene_exprssn.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

vi inp_maingenes_disease.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Disease\tn(cancers)" >> main_genes_in_each_suprpway.txt
sort -k1,1r inp_maingenes_disease.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> main_genes_in_each_suprpway.txt

#you need some idea which genes have the highest score in the suprpway; 
cp main_genes_in_each_suprpway.txt main_genes_topmarked_in_each_suprpway.txt
vi main_genes_topmarked_in_each_suprpway.txt
vi inp_maingenes_all_for_topmarking.txt
#i esc !! 
#ls -1 inp_maingenes_*.txt
#arranged the inp file names in the order in which the suprpways appear in the xl sheet,   
#neattbl_edited_gsp_totals; next, used cat to list out the contents of each input file; e.g.,  
#cat inp_maingenes_chromatin_organizn.txt
#after getting all the inp_maingenes files into this file, made a copy of this file 
#(inp_maingenes_all_for_topmarking.txt) and called it xtr_inp_maingenes_all_for_topmarking.txt; 
#edited the file (inp_maingenes_all_for_topmarking.txt) to retain only the first (topmost) gene 
#for each suprpway for each cancer; also retained the second or third, etc., values, if they appeared large; 

#used foll two files to complete marking of the topmost genes in each suprpway;  
vi main_genes_topmarked_in_each_suprpway.txt
vi inp_maingenes_all_for_topmarking.txt
#Took file main_genes_topmarked_in_each_suprpway.txt and displayed it in xl;  

vi main_genes_topmarked_in_each_suprpway.txt
#:1,$s/  \*/\t*/

-------------------------------------------------

#You have to create a table where, for each cancer, suprpways are arranged in descending order of scores;
#lines 1864 to 1878, above, are relevant;

#created the foll file to get, for each cancer, suprpways and corresponding gene contributions in decreasing order;
cp get_allcan_gene_suprpway_contrbns.sh get2_allcan_gene_suprpway_contrbns.sh
vi get2_allcan_gene_suprpway_contrbns.sh 
#replace "Metabolism" with "Metabolism (R-HSA-"; otherwise, for search term "Metabolism", "Metabolism of RNA" and 
#"Metabolism of proteins" will be pulled out; 

sh get2_allcan_gene_suprpway_contrbns.sh | \
awk -F"\t" '{IFS=OFS="\t"}{print $2 OFS $1 OFS $3}' > allcan_gene_suprpway_contrbns.txt

#Taking allcan_gene_suprpway_contrbns.txt to xl;  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways\pway_fingerprint_matrix\totalfiles\new_totalfiles
#sheet = allcan_gene_suprpway_contrbns

#to identify the genes for which networks have to be created the foll 2 files have to be used:

#manually, by cut and paste from the above xl sheet (allcan_gene_suprpway_contrbns), creating the file, 
#main_genes_in_each_can_suprpway.txt; in this file, for each cancer and each suprpway in the cancer, 
#only those genes whose scores look significant (by eye) in the xl sheet have been cut and pasted;  
#the aim is to identify genes for which creating networks might yield interesting informn.  
#done for: brca
#likewise, for coadread, copied from above xl sheet, those genes whose scores looked significant (and  
#which have been marked in red), and pasted them into main_genes_in_each_can_suprpway.txt; 
#done for: gbm, hnsc, kirc, laml, luad, skcm

#foll cmd removes (R-HSA-...) from suprpway name;
sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)/\t\1/' main_genes_in_each_can_suprpway.txt | awk -F"\t" '{IFS=OFS="\t"}(NF==3){print $0}(NF==4){print $1 OFS $3 OFS $4}' > main_genes_xl_can_suprpway.txt

#as main_genes_xl_can_suprpway.txt has been created manually, it is necessary to check if you have included 
#all suprpways for each cancer in the xl table; foll cmds help to check; 
vi allcan_gene_suprpway_contrbns.txt 
#get line nos for each cancer; e.g., 2 to 782 for BRCA
sed -n '2,782p' allcan_gene_suprpway_contrbns.txt | cut -f1,1 | sort -k1,1 | uniq | wc -l
#26
nl main_genes_xl_can_suprpway.txt | more
#get line nos for each cancer; e.g., 2 to 98 for BRCA
sed -n '2,98p' main_genes_xl_can_suprpway.txt | cut -f1,1 | sort -k1,1 | uniq | wc -l
#26
#line nos for COADREAD, 785,1593
sed -n '785,1593p' allcan_gene_suprpway_contrbns.txt | cut -f1,1 | sort -k1,1 | uniq | wc -l
#26
#line nos for COADREAD in the above xl file: 100,212
sed -n '100,212p' main_genes_xl_can_suprpway.txt | cut -f1,1 | sort -k1,1 | uniq | wc -l
#26
#line nos for GBM, 1596,2090
sed -n '1596,2090p' allcan_gene_suprpway_contrbns.txt | cut -f1,1 | sort -k1,1 | uniq | wc -l
#24
#line nos for GBM in the above xl file: 214,277
sed -n '214,277p' main_genes_xl_can_suprpway.txt | cut -f1,1 | sort -k1,1 | uniq | wc -l
#24
#line nos for HNSC, 2093,2736
sed -n '2093,2736p' allcan_gene_suprpway_contrbns.txt | cut -f1,1 | sort -k1,1 | uniq | wc -l
#23
#line nos for HNSC in the above xl file: 279,345
sed -n '279,345p' main_genes_xl_can_suprpway.txt | cut -f1,1 | sort -k1,1 | uniq | wc -l
#23
#line nos for KIRC, 2739,3057
sed -n '2739,3057p' allcan_gene_suprpway_contrbns.txt | cut -f1,1 | sort -k1,1 | uniq | wc -l
#22
#line nos for KIRC in the above xl file: 347,394
sed -n '347,394p' main_genes_xl_can_suprpway.txt | cut -f1,1 | sort -k1,1 | uniq | wc -l
#22
#line nos for LAML, 3060,3369
sed -n '3060,3369p' allcan_gene_suprpway_contrbns.txt | cut -f1,1 | sort -k1,1 | uniq | wc -l
#25
#line nos for LAML in the above xl file: 396,456
sed -n '396,456p' main_genes_xl_can_suprpway.txt | cut -f1,1 | sort -k1,1 | uniq | wc -l
#25
#line nos for LUAD, 3372,4128
sed -n '3372,4128p' allcan_gene_suprpway_contrbns.txt | cut -f1,1 | sort -k1,1 | uniq | wc -l
#25
#line nos for LUAD in the above xl file: 458,527
sed -n '458,527p' main_genes_xl_can_suprpway.txt | cut -f1,1 | sort -k1,1 | uniq | wc -l
#25
#line nos for SKCM, 4131,4940
sed -n '4131,4940p' allcan_gene_suprpway_contrbns.txt | cut -f1,1 | sort -k1,1 | uniq | wc -l
#25
#line nos for SKCM in the above xl file: 529,597
sed -n '529,597p' main_genes_xl_can_suprpway.txt | cut -f1,1 | sort -k1,1 | uniq | wc -l
#25

****use above to be created file to select genes for getting networks/clusters; 

############################################################

# MASTERFILE11 generates corrected versions of some of the files generated previously, 
#using MASTERFILES 9 and 10;   

#11) MASTERFILE11 = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/cmd9_corrections_pwayfprint_tbls.sh 

#commands below are based on those in: 
#/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/cmd4_forwriteup_modified_13may2023.sh

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections

grep " ||" ../srch*.sh > set_of_hiers_to_be_changed.txt

vi set_of_hiers_to_be_changed.txt
#the srch_bmomim files and srch_oncokb files, with the string " ||" are listed below; editing each of these files 
#and changing " ||" to "||"; 
srch_bmomim_Cell_Cycle.sh
srch_bmomim_Disease.sh
srch_bmomim_DNA_Repair.sh
srch_bmomim_Gene_expression_Transcription.sh
srch_bmomim_Hemostasis.sh
srch_bmomim_Immune_System.sh
srch_bmomim_Programmed_Cell_Death.sh
srch_bmomim_Signal_Transduction.sh
srch_oncokb_Cell_Cycle.sh
srch_oncokb_Disease.sh
srch_oncokb_DNA_Repair.sh
srch_oncokb_Gene_expression_Transcription.sh
srch_oncokb_Hemostasis.sh
srch_oncokb_Immune_System.sh
srch_oncokb_Programmed_Cell_Death.sh
srch_oncokb_Signal_Transduction.sh

cp ../srch_bmomim_Cell_Cycle.sh srchnew_bmomim_Cell_Cycle.sh
cp ../srch_bmomim_Disease.sh srchnew_bmomim_Disease.sh
cp ../srch_bmomim_DNA_Repair.sh srchnew_bmomim_DNA_Repair.sh
cp ../srch_bmomim_Gene_expression_Transcription.sh srchnew_bmomim_Gene_expression_Transcription.sh
cp ../srch_bmomim_Hemostasis.sh srchnew_bmomim_Hemostasis.sh
cp ../srch_bmomim_Immune_System.sh srchnew_bmomim_Immune_System.sh
cp ../srch_bmomim_Programmed_Cell_Death.sh srchnew_bmomim_Programmed_Cell_Death.sh
cp ../srch_bmomim_Signal_Transduction.sh srchnew_bmomim_Signal_Transduction.sh

cp ../srch_oncokb_Cell_Cycle.sh srchnew_oncokb_Cell_Cycle.sh
cp ../srch_oncokb_Disease.sh srchnew_oncokb_Disease.sh
cp ../srch_oncokb_DNA_Repair.sh srchnew_oncokb_DNA_Repair.sh
cp ../srch_oncokb_Gene_expression_Transcription.sh srchnew_oncokb_Gene_expression_Transcription.sh
cp ../srch_oncokb_Hemostasis.sh srchnew_oncokb_Hemostasis.sh
cp ../srch_oncokb_Immune_System.sh srchnew_oncokb_Immune_System.sh
cp ../srch_oncokb_Programmed_Cell_Death.sh srchnew_oncokb_Programmed_Cell_Death.sh
cp ../srch_oncokb_Signal_Transduction.sh srchnew_oncokb_Signal_Transduction.sh

#edited each of above files and made foll replacement;
vi srchnew_bmomim_Cell_Cycle.sh
#:1,$s/ ||/||/

#in foll directory:
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
#gave foll cmds;

sh corrections/srchnew_bmomim_Cell_Cycle.sh > corrections/tmpbmomim_Cell_Cycle.txt
sh corrections/srchnew_bmomim_Disease.sh > corrections/tmpbmomim_Disease.txt
sh corrections/srchnew_bmomim_DNA_Repair.sh > corrections/tmpbmomim_DNA_Repair.txt
sh corrections/srchnew_bmomim_Gene_expression_Transcription.sh > corrections/tmpbmomim_Gene_expression_Transcription.txt
sh corrections/srchnew_bmomim_Hemostasis.sh > corrections/tmpbmomim_Hemostasis.txt
sh corrections/srchnew_bmomim_Immune_System.sh > corrections/tmpbmomim_Immune_System.txt
sh corrections/srchnew_bmomim_Programmed_Cell_Death.sh > corrections/tmpbmomim_Programmed_Cell_Death.txt
sh corrections/srchnew_bmomim_Signal_Transduction.sh > corrections/tmpbmomim_Signal_Transduction.txt
sh corrections/srchnew_oncokb_Cell_Cycle.sh > corrections/tmponcokb_Cell_Cycle.txt
sh corrections/srchnew_oncokb_Disease.sh > corrections/tmponcokb_Disease.txt
sh corrections/srchnew_oncokb_DNA_Repair.sh > corrections/tmponcokb_DNA_Repair.txt
sh corrections/srchnew_oncokb_Gene_expression_Transcription.sh > corrections/tmponcokb_Gene_expression.txt
sh corrections/srchnew_oncokb_Hemostasis.sh > corrections/tmponcokb_Hemostasis.txt
sh corrections/srchnew_oncokb_Immune_System.sh > corrections/tmponcokb_Immune_System.txt
sh corrections/srchnew_oncokb_Programmed_Cell_Death.sh > corrections/tmponcokb_Programmed_Cell_Death.txt
sh corrections/srchnew_oncokb_Signal_Transduction.sh > corrections/tmponcokb_Signal_Transduction.txt

sh srch_bmomim_Cell_Cycle.sh > corrections/oldbmomim_Cell_Cycle.txt
sh srch_bmomim_Disease.sh > corrections/oldbmomim_Disease.txt
sh srch_bmomim_DNA_Repair.sh > corrections/oldbmomim_DNA_Repair.txt
sh srch_bmomim_Gene_expression_Transcription.sh > corrections/oldbmomim_Gene_expression_Transcription.txt
sh srch_bmomim_Hemostasis.sh > corrections/oldbmomim_Hemostasis.txt
sh srch_bmomim_Immune_System.sh > corrections/oldbmomim_Immune_System.txt
sh srch_bmomim_Programmed_Cell_Death.sh > corrections/oldbmomim_Programmed_Cell_Death.txt
sh srch_bmomim_Signal_Transduction.sh > corrections/oldbmomim_Signal_Transduction.txt
sh srch_oncokb_Cell_Cycle.sh > corrections/oldoncokb_Cell_Cycle.txt
sh srch_oncokb_Disease.sh > corrections/oldoncokb_Disease.txt
sh srch_oncokb_DNA_Repair.sh > corrections/oldoncokb_DNA_Repair.txt
sh srch_oncokb_Gene_expression_Transcription.sh > corrections/oldoncokb_Gene_expression.txt
sh srch_oncokb_Hemostasis.sh > corrections/oldoncokb_Hemostasis.txt
sh srch_oncokb_Immune_System.sh > corrections/oldoncokb_Immune_System.txt
sh srch_oncokb_Programmed_Cell_Death.sh > corrections/oldoncokb_Programmed_Cell_Death.txt
sh srch_oncokb_Signal_Transduction.sh > corrections/oldoncokb_Signal_Transduction.txt

#foll are different between old and new; for below files, differences are found;
diff tmpbmomim_DNA_Repair.txt oldbmomim_DNA_Repair.txt
diff tmpbmomim_Hemostasis.txt oldbmomim_Hemostasis.txt
diff tmpbmomim_Signal_Transduction.txt oldbmomim_Signal_Transduction.txt
diff tmpbmomim_Immune_System.txt oldbmomim_Immune_System.txt

diff tmponcokb_Cell_Cycle.txt oldoncokb_Cell_Cycle.txt
diff tmponcokb_Disease.txt oldoncokb_Disease.txt
diff tmponcokb_DNA_Repair.txt oldoncokb_DNA_Repair.txt
diff tmponcokb_Gene_expression.txt oldoncokb_Gene_expression.txt
diff tmponcokb_Hemostasis.txt oldoncokb_Hemostasis.txt
diff tmponcokb_Immune_System.txt oldoncokb_Immune_System.txt
diff tmponcokb_Programmed_Cell_Death.txt oldoncokb_Programmed_Cell_Death.txt
diff tmponcokb_Signal_Transduction.txt oldoncokb_Signal_Transduction.txt

--------------------------------------------------
#trying to do corrections for Hemostasis;
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup

--------------------------------------------------
#to solve GNAS problem, you have to edit: 
#/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pways_for_each_oncokb862_gene.txt 
#to remove duplicate GNAS lines;

#foll file:
#/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pways_for_each_oncokb862_gene.txt 
#is used in script below (corrections/srchnew_oncokb_Hemostasis.sh); edit this above file to remove duplicate GNAS lines;
cp pways_for_each_oncokb862_gene.txt corrections/gnasonce_pways_for_each_oncokb862_gene.txt

#trying to remove duplicate GNAS lines once and for all, for all top-level pways that GNAS participates in; 
#GNAS participates in the top-level pways of: Disease, Hemostasis, Metabolism, Signal Transduction, Transport of small molecules

#taking the help of foll file; 
cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/gene_pway_matrix/pways_for_each_gene.txt corrections/gnaslines1.txt

#edited the file to retain only gnas lines;
vi corrections/gnaslines1.txt
sort corrections/gnaslines1.txt | uniq -c > gnaslines1_uniq.txt 

cp corrections/gnasonce_pways_for_each_oncokb862_gene.txt corrections/ttnew
#with the help of gnaslines1_uniq.txt, edited the two sets of GNAS lines in ttnew to retain only one set;
#after editing, there are 36 GNAS lines in ttnew, versus 72 GNAS lines in gnasonce_pways_for_each_oncokb862_gene.txt
grep "^GNAS" corrections/gnasonce_pways_for_each_oncokb862_gene.txt | wc -l
#72
grep "^GNAS" corrections/ttnew | wc -l
#36
cp corrections/ttnew corrections/gnasonce_pways_for_each_oncokb862_gene.txt
--------------------------------------------------

#trying to do corrections for Hemostasis;
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup

vi corrections/srchnew_oncokb_Hemostasis.sh
#:1,$s/pways_for_each/corrections\/gnasonce_pways_for_each/

sh corrections/srchnew_oncokb_Hemostasis.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > corrections/temp1.txt

cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/toplevelpways/Hemostasis_R_HSA_109582.txt corrections/edited_Hemostasis_R_HSA_109582.txt
vi corrections/edited_Hemostasis_R_HSA_109582.txt
#:1,$s/"//g

awk '($0 ~ /^R-HSA-/)' corrections/edited_Hemostasis_R_HSA_109582.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' -e 's/  |/ |/g' > corrections/temp2.sh

vi corrections/temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq

#for foll cmds, pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections
sh temp2.sh > corectd_fortabuln_hier_oncokb_Hemostasis.txt

echo -n "\nAll oncokb or bmomim genes in top-level pathway: Hemostasis |" >> corectd_fortabuln_hier_oncokb_Hemostasis.txt

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_oncokb_Hemostasis.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> corrections/corectd_fortabuln_hier_oncokb_Hemostasis.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' corrections/corectd_fortabuln_hier_oncokb_Hemostasis.txt > corrections/temp3.txt
cp corrections/temp3.txt corrections/corectd_fortabuln_hier_oncokb_Hemostasis.txt

#generating files for bmomim part; 
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_bmomim_Hemostasis.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > corrections/temp1.txt

awk '($0 ~ /^R-HSA-/)' corrections/edited_Hemostasis_R_HSA_109582.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' -e 's/  |/ |/g' > corrections/temp2.sh

vi corrections/temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq

#for foll cmds, pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections
sh temp2.sh > corectd_fortabuln_hier_bmomim_Hemostasis.txt

echo -n "\nAll oncokb or bmomim genes in top-level pathway: Hemostasis |" >> corectd_fortabuln_hier_bmomim_Hemostasis.txt

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_bmomim_Hemostasis.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> corrections/corectd_fortabuln_hier_bmomim_Hemostasis.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' corrections/corectd_fortabuln_hier_bmomim_Hemostasis.txt > corrections/temp3.txt
cp corrections/temp3.txt corrections/corectd_fortabuln_hier_bmomim_Hemostasis.txt

diff --side-by-side --suppress-common-lines --width=2000 corrections/corectd_fortabuln_hier_bmomim_Hemostasis.txt fortabuln_hier_bmomim_Hemostasis.txt
diff --side-by-side --suppress-common-lines --width=2000 corrections/corectd_fortabuln_hier_oncokb_Hemostasis.txt fortabuln_hier_oncokb_Hemostasis.txt
--------------------------------------------------

#trying to do corrections for DNA Repair;
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
vi corrections/srchnew_oncokb_DNA_Repair.sh
#:1,$s/pways_for_each/corrections\/gnasonce_pways_for_each/

sh corrections/srchnew_oncokb_DNA_Repair.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > corrections/temp1.txt

cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/toplevelpways/DNA_Repair_R_HSA_73894.txt corrections/edited_DNA_Repair_R_HSA_73894.txt
vi corrections/edited_DNA_Repair_R_HSA_73894.txt
#:1,$s/"//g

awk '($0 ~ /^R-HSA-/)' corrections/edited_DNA_Repair_R_HSA_73894.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' -e 's/  |/ |/g' > corrections/temp2.sh

vi corrections/temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq

#for foll cmds, pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections
sh temp2.sh > corectd_fortabuln_hier_oncokb_DNA_Repair.txt

echo -n "\nAll oncokb or bmomim genes in top-level pathway: DNA_Repair |" >> corectd_fortabuln_hier_oncokb_DNA_Repair.txt

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_oncokb_DNA_Repair.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> corrections/corectd_fortabuln_hier_oncokb_DNA_Repair.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' corrections/corectd_fortabuln_hier_oncokb_DNA_Repair.txt > corrections/temp3.txt
cp corrections/temp3.txt corrections/corectd_fortabuln_hier_oncokb_DNA_Repair.txt

#generating files for bmomim part; 
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_bmomim_DNA_Repair.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > corrections/temp1.txt

awk '($0 ~ /^R-HSA-/)' corrections/edited_DNA_Repair_R_HSA_73894.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' -e 's/  |/ |/g' > corrections/temp2.sh

vi corrections/temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq

#for foll cmds, pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections
sh temp2.sh > corectd_fortabuln_hier_bmomim_DNA_Repair.txt

echo -n "\nAll oncokb or bmomim genes in top-level pathway: DNA_Repair |" >> corectd_fortabuln_hier_bmomim_DNA_Repair.txt

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_bmomim_DNA_Repair.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> corrections/corectd_fortabuln_hier_bmomim_DNA_Repair.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' corrections/corectd_fortabuln_hier_bmomim_DNA_Repair.txt > corrections/temp3.txt
cp corrections/temp3.txt corrections/corectd_fortabuln_hier_bmomim_DNA_Repair.txt

diff --side-by-side --suppress-common-lines --width=2000 corrections/corectd_fortabuln_hier_bmomim_DNA_Repair.txt fortabuln_hier_bmomim_DNA_Repair.txt
diff --side-by-side --suppress-common-lines --width=2000 corrections/corectd_fortabuln_hier_oncokb_DNA_Repair.txt fortabuln_hier_oncokb_DNA_Repair.txt
--------------------------------------------------

#trying to do corrections for Cell Cycle;
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
vi corrections/srchnew_oncokb_Cell_Cycle.sh
#:1,$s/pways_for_each/corrections\/gnasonce_pways_for_each/

sh corrections/srchnew_oncokb_Cell_Cycle.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > corrections/temp1.txt

cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/toplevelpways/Cell_Cycle_R_HSA_1640170.txt corrections/edited_Cell_Cycle_R_HSA_1640170.txt
vi corrections/edited_Cell_Cycle_R_HSA_1640170.txt
#:1,$s/"//g

awk '($0 ~ /^R-HSA-/)' corrections/edited_Cell_Cycle_R_HSA_1640170.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' -e 's/  |/ |/g' > corrections/temp2.sh

vi corrections/temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq

#for foll cmds, pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections
sh temp2.sh > corectd_fortabuln_hier_oncokb_Cell_Cycle.txt

echo -n "\nAll oncokb or bmomim genes in top-level pathway: Cell_Cycle |" >> corectd_fortabuln_hier_oncokb_Cell_Cycle.txt

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_oncokb_Cell_Cycle.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> corrections/corectd_fortabuln_hier_oncokb_Cell_Cycle.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' corrections/corectd_fortabuln_hier_oncokb_Cell_Cycle.txt > corrections/temp3.txt
cp corrections/temp3.txt corrections/corectd_fortabuln_hier_oncokb_Cell_Cycle.txt

#generating files for bmomim part; 
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_bmomim_Cell_Cycle.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > corrections/temp1.txt

awk '($0 ~ /^R-HSA-/)' corrections/edited_Cell_Cycle_R_HSA_1640170.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' -e 's/  |/ |/g' > corrections/temp2.sh

vi corrections/temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq

#for foll cmds, pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections
sh temp2.sh > corectd_fortabuln_hier_bmomim_Cell_Cycle.txt

echo -n "\nAll oncokb or bmomim genes in top-level pathway: Cell_Cycle |" >> corectd_fortabuln_hier_bmomim_Cell_Cycle.txt

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_bmomim_Cell_Cycle.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> corrections/corectd_fortabuln_hier_bmomim_Cell_Cycle.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' corrections/corectd_fortabuln_hier_bmomim_Cell_Cycle.txt > corrections/temp3.txt
cp corrections/temp3.txt corrections/corectd_fortabuln_hier_bmomim_Cell_Cycle.txt

diff --side-by-side --suppress-common-lines --width=3000 corrections/corectd_fortabuln_hier_bmomim_Cell_Cycle.txt fortabuln_hier_bmomim_Cell_Cycle.txt
diff --side-by-side --suppress-common-lines --width=3000 corrections/corectd_fortabuln_hier_oncokb_Cell_Cycle.txt fortabuln_hier_oncokb_Cell_Cycle.txt
--------------------------------------------------

#trying to do corrections for Signal Transduction;
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
vi corrections/srchnew_oncokb_Signal_Transduction.sh
#:1,$s/pways_for_each/corrections\/gnasonce_pways_for_each/

sh corrections/srchnew_oncokb_Signal_Transduction.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > corrections/temp1.txt

cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/toplevelpways/Signal_Transduction_R_HSA_162582.txt corrections/edited_Signal_Transduction_R_HSA_162582.txt
vi corrections/edited_Signal_Transduction_R_HSA_162582.txt
#:1,$s/"//g

awk '($0 ~ /^R-HSA-/)' corrections/edited_Signal_Transduction_R_HSA_162582.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' -e 's/  |/ |/g' > corrections/temp2.sh

vi corrections/temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq

#for foll cmds, pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections
sh temp2.sh > corectd_fortabuln_hier_oncokb_Signal_Transduction.txt

echo -n "\nAll oncokb or bmomim genes in top-level pathway: Signal_Transduction |" >> corectd_fortabuln_hier_oncokb_Signal_Transduction.txt

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_oncokb_Signal_Transduction.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> corrections/corectd_fortabuln_hier_oncokb_Signal_Transduction.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' corrections/corectd_fortabuln_hier_oncokb_Signal_Transduction.txt > corrections/temp3.txt
cp corrections/temp3.txt corrections/corectd_fortabuln_hier_oncokb_Signal_Transduction.txt

#generating files for bmomim part; 
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_bmomim_Signal_Transduction.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > corrections/temp1.txt

awk '($0 ~ /^R-HSA-/)' corrections/edited_Signal_Transduction_R_HSA_162582.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' -e 's/  |/ |/g' > corrections/temp2.sh

vi corrections/temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq

#for foll cmds, pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections
sh temp2.sh > corectd_fortabuln_hier_bmomim_Signal_Transduction.txt

echo -n "\nAll oncokb or bmomim genes in top-level pathway: Signal_Transduction |" >> corectd_fortabuln_hier_bmomim_Signal_Transduction.txt

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_bmomim_Signal_Transduction.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> corrections/corectd_fortabuln_hier_bmomim_Signal_Transduction.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' corrections/corectd_fortabuln_hier_bmomim_Signal_Transduction.txt > corrections/temp3.txt
cp corrections/temp3.txt corrections/corectd_fortabuln_hier_bmomim_Signal_Transduction.txt

diff --side-by-side --suppress-common-lines --width=102000 corrections/corectd_fortabuln_hier_bmomim_Signal_Transduction.txt fortabuln_hier_bmomim_Signal_Transduction.txt
diff --side-by-side --suppress-common-lines --width=10200 corrections/corectd_fortabuln_hier_oncokb_Signal_Transduction.txt fortabuln_hier_oncokb_Signal_Transduction.txt
--------------------------------------------------

#trying to do corrections for Immune System;
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
vi corrections/srchnew_oncokb_Immune_System.sh
#:1,$s/pways_for_each/corrections\/gnasonce_pways_for_each/

sh corrections/srchnew_oncokb_Immune_System.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > corrections/temp1.txt

cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/toplevelpways/Immune_System_R_HSA_168256.txt corrections/edited_Immune_System_R_HSA_168256.txt
vi corrections/edited_Immune_System_R_HSA_168256.txt
#:1,$s/"//g

awk '($0 ~ /^R-HSA-/)' corrections/edited_Immune_System_R_HSA_168256.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' -e 's/  |/ |/g' > corrections/temp2.sh

vi corrections/temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq

#for foll cmds, pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections
sh temp2.sh > corectd_fortabuln_hier_oncokb_Immune_System.txt

echo -n "\nAll oncokb or bmomim genes in top-level pathway: Immune_System |" >> corectd_fortabuln_hier_oncokb_Immune_System.txt

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_oncokb_Immune_System.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> corrections/corectd_fortabuln_hier_oncokb_Immune_System.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' corrections/corectd_fortabuln_hier_oncokb_Immune_System.txt > corrections/temp3.txt
cp corrections/temp3.txt corrections/corectd_fortabuln_hier_oncokb_Immune_System.txt

#generating files for bmomim part; 
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_bmomim_Immune_System.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > corrections/temp1.txt

awk '($0 ~ /^R-HSA-/)' corrections/edited_Immune_System_R_HSA_168256.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' -e 's/  |/ |/g' > corrections/temp2.sh

vi corrections/temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq

#for foll cmds, pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections
sh temp2.sh > corectd_fortabuln_hier_bmomim_Immune_System.txt

echo -n "\nAll oncokb or bmomim genes in top-level pathway: Immune_System |" >> corectd_fortabuln_hier_bmomim_Immune_System.txt

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_bmomim_Immune_System.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> corrections/corectd_fortabuln_hier_bmomim_Immune_System.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' corrections/corectd_fortabuln_hier_bmomim_Immune_System.txt > corrections/temp3.txt
cp corrections/temp3.txt corrections/corectd_fortabuln_hier_bmomim_Immune_System.txt

diff --side-by-side --suppress-common-lines --width=5200 corrections/corectd_fortabuln_hier_bmomim_Immune_System.txt fortabuln_hier_bmomim_Immune_System.txt
diff --side-by-side --suppress-common-lines --width=5200 corrections/corectd_fortabuln_hier_oncokb_Immune_System.txt fortabuln_hier_oncokb_Immune_System.txt
--------------------------------------------------

#trying to do corrections for Gene_expression_Transcription;
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
vi corrections/srchnew_oncokb_Gene_expression_Transcription.sh
#:1,$s/pways_for_each/corrections\/gnasonce_pways_for_each/

sh corrections/srchnew_oncokb_Gene_expression_Transcription.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > corrections/temp1.txt

cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/toplevelpways/Gene_expression_Transcription_R_HSA_74160.txt corrections/edited_Gene_expression_Transcription_R_HSA_74160.txt
vi corrections/edited_Gene_expression_Transcription_R_HSA_74160.txt
#:1,$s/"//g

awk '($0 ~ /^R-HSA-/)' corrections/edited_Gene_expression_Transcription_R_HSA_74160.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' -e 's/  |/ |/g' > corrections/temp2.sh

vi corrections/temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq

#for foll cmds, pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections
sh temp2.sh > corectd_fortabuln_hier_oncokb_Gene_expression_Transcription.txt

echo -n "\nAll oncokb or bmomim genes in top-level pathway: Gene_expression_Transcription |" >> corectd_fortabuln_hier_oncokb_Gene_expression_Transcription.txt

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_oncokb_Gene_expression_Transcription.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> corrections/corectd_fortabuln_hier_oncokb_Gene_expression_Transcription.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' corrections/corectd_fortabuln_hier_oncokb_Gene_expression_Transcription.txt > corrections/temp3.txt
cp corrections/temp3.txt corrections/corectd_fortabuln_hier_oncokb_Gene_expression_Transcription.txt

#generating files for bmomim part; 
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_bmomim_Gene_expression_Transcription.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > corrections/temp1.txt

awk '($0 ~ /^R-HSA-/)' corrections/edited_Gene_expression_Transcription_R_HSA_74160.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' -e 's/  |/ |/g' > corrections/temp2.sh

vi corrections/temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq

#for foll cmds, pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections
sh temp2.sh > corectd_fortabuln_hier_bmomim_Gene_expression_Transcription.txt

echo -n "\nAll oncokb or bmomim genes in top-level pathway: Gene_expression_Transcription |" >> corectd_fortabuln_hier_bmomim_Gene_expression_Transcription.txt

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_bmomim_Gene_expression_Transcription.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> corrections/corectd_fortabuln_hier_bmomim_Gene_expression_Transcription.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' corrections/corectd_fortabuln_hier_bmomim_Gene_expression_Transcription.txt > corrections/temp3.txt
cp corrections/temp3.txt corrections/corectd_fortabuln_hier_bmomim_Gene_expression_Transcription.txt

diff --side-by-side --suppress-common-lines --width=6000 corrections/corectd_fortabuln_hier_bmomim_Gene_expression_Transcription.txt fortabuln_hier_bmomim_Gene_expression_Transcription.txt
diff --side-by-side --suppress-common-lines --width=6000 corrections/corectd_fortabuln_hier_oncokb_Gene_expression_Transcription.txt fortabuln_hier_oncokb_Gene_expression_Transcription.txt
--------------------------------------------------

#trying to do corrections for Programmed_Cell_Death;
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
vi corrections/srchnew_oncokb_Programmed_Cell_Death.sh
#:1,$s/pways_for_each/corrections\/gnasonce_pways_for_each/

sh corrections/srchnew_oncokb_Programmed_Cell_Death.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > corrections/temp1.txt

cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/toplevelpways/Programmed_Cell_Death_R_HSA_5357801.txt corrections/edited_Programmed_Cell_Death_R_HSA_5357801.txt
vi corrections/edited_Programmed_Cell_Death_R_HSA_5357801.txt
#:1,$s/"//g

awk '($0 ~ /^R-HSA-/)' corrections/edited_Programmed_Cell_Death_R_HSA_5357801.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' -e 's/  |/ |/g' > corrections/temp2.sh

vi corrections/temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq

#for foll cmds, pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections
sh temp2.sh > corectd_fortabuln_hier_oncokb_Programmed_Cell_Death.txt

echo -n "\nAll oncokb or bmomim genes in top-level pathway: Programmed_Cell_Death |" >> corectd_fortabuln_hier_oncokb_Programmed_Cell_Death.txt

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_oncokb_Programmed_Cell_Death.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> corrections/corectd_fortabuln_hier_oncokb_Programmed_Cell_Death.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' corrections/corectd_fortabuln_hier_oncokb_Programmed_Cell_Death.txt > corrections/temp3.txt
cp corrections/temp3.txt corrections/corectd_fortabuln_hier_oncokb_Programmed_Cell_Death.txt

#generating files for bmomim part; 
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_bmomim_Programmed_Cell_Death.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > corrections/temp1.txt

awk '($0 ~ /^R-HSA-/)' corrections/edited_Programmed_Cell_Death_R_HSA_5357801.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' -e 's/  |/ |/g' > corrections/temp2.sh

vi corrections/temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq

#for foll cmds, pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections
sh temp2.sh > corectd_fortabuln_hier_bmomim_Programmed_Cell_Death.txt

echo -n "\nAll oncokb or bmomim genes in top-level pathway: Programmed_Cell_Death |" >> corectd_fortabuln_hier_bmomim_Programmed_Cell_Death.txt

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_bmomim_Programmed_Cell_Death.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> corrections/corectd_fortabuln_hier_bmomim_Programmed_Cell_Death.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' corrections/corectd_fortabuln_hier_bmomim_Programmed_Cell_Death.txt > corrections/temp3.txt
cp corrections/temp3.txt corrections/corectd_fortabuln_hier_bmomim_Programmed_Cell_Death.txt

diff --side-by-side --suppress-common-lines --width=6000 corrections/corectd_fortabuln_hier_bmomim_Programmed_Cell_Death.txt fortabuln_hier_bmomim_Programmed_Cell_Death.txt
diff --side-by-side --suppress-common-lines --width=6000 corrections/corectd_fortabuln_hier_oncokb_Programmed_Cell_Death.txt fortabuln_hier_oncokb_Programmed_Cell_Death.txt
--------------------------------------------------

#trying to do corrections for Disease;
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
vi corrections/srchnew_oncokb_Disease.sh
#:1,$s/pways_for_each/corrections\/gnasonce_pways_for_each/

sh corrections/srchnew_oncokb_Disease.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > corrections/temp1.txt

cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/toplevelpways/Disease_R_HSA_1643685.txt corrections/edited_Disease_R_HSA_1643685.txt
vi corrections/edited_Disease_R_HSA_1643685.txt
#:1,$s/"//g

awk '($0 ~ /^R-HSA-/)' corrections/edited_Disease_R_HSA_1643685.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' -e 's/  |/ |/g' > corrections/temp2.sh

vi corrections/temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq

#for foll cmds, pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections
sh temp2.sh > corectd_fortabuln_hier_oncokb_Disease.txt

echo -n "\nAll oncokb or bmomim genes in top-level pathway: Disease |" >> corectd_fortabuln_hier_oncokb_Disease.txt

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_oncokb_Disease.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> corrections/corectd_fortabuln_hier_oncokb_Disease.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' corrections/corectd_fortabuln_hier_oncokb_Disease.txt > corrections/temp3.txt
cp corrections/temp3.txt corrections/corectd_fortabuln_hier_oncokb_Disease.txt

#generating files for bmomim part; 
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_bmomim_Disease.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > corrections/temp1.txt

awk '($0 ~ /^R-HSA-/)' corrections/edited_Disease_R_HSA_1643685.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' -e 's/  |/ |/g' > corrections/temp2.sh

vi corrections/temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq

#for foll cmds, pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections
sh temp2.sh > corectd_fortabuln_hier_bmomim_Disease.txt

echo -n "\nAll oncokb or bmomim genes in top-level pathway: Disease |" >> corectd_fortabuln_hier_bmomim_Disease.txt

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_bmomim_Disease.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> corrections/corectd_fortabuln_hier_bmomim_Disease.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' corrections/corectd_fortabuln_hier_bmomim_Disease.txt > corrections/temp3.txt
cp corrections/temp3.txt corrections/corectd_fortabuln_hier_bmomim_Disease.txt

diff --side-by-side --suppress-common-lines --width=20000 corrections/corectd_fortabuln_hier_bmomim_Disease.txt fortabuln_hier_bmomim_Disease.txt
diff --side-by-side --suppress-common-lines --width=20000 corrections/corectd_fortabuln_hier_oncokb_Disease.txt fortabuln_hier_oncokb_Disease.txt

#downloaded the corectd_fortabuln_hier set of files to windows:
D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1
--------------------------------------------------

#correcting for GNAS in Metabolism top-level pway;
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections

cp ../srch_oncokb_Metabolism.sh srchnew_oncokb_Metabolism.sh

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
vi corrections/srchnew_oncokb_Metabolism.sh 
#:1,$s/pways_for_each/corrections\/gnasonce_pways_for_each/

sh corrections/srchnew_oncokb_Metabolism.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > corrections/temp1.txt

cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/toplevelpways/Metabolism_R_HSA_1430728.txt corrections/edited_Metabolism_R_HSA_1430728.txt
vi corrections/edited_Metabolism_R_HSA_1430728.txt
#:1,$s/"//g

awk '($0 ~ /^R-HSA-/)' corrections/edited_Metabolism_R_HSA_1430728.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' -e 's/  |/ |/g' > corrections/temp2.sh

vi corrections/temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq

#for foll cmds, pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections
sh temp2.sh > corectd_fortabuln_hier_oncokb_Metabolism.txt

echo -n "\nAll oncokb or bmomim genes in top-level pathway: Metabolism |" >> corectd_fortabuln_hier_oncokb_Metabolism.txt

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_oncokb_Metabolism.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> corrections/corectd_fortabuln_hier_oncokb_Metabolism.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' corrections/corectd_fortabuln_hier_oncokb_Metabolism.txt > corrections/temp3.txt
cp corrections/temp3.txt corrections/corectd_fortabuln_hier_oncokb_Metabolism.txt

diff --side-by-side --suppress-common-lines --width=6000 corrections/corectd_fortabuln_hier_oncokb_Metabolism.txt fortabuln_hier_oncokb_Metabolism.txt

--------------------------------------------------

#correcting for GNAS in Transport of small molecules top-level pway;
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections

cp ../srch_oncokb_Transport_of_small_molecules.sh srchnew_oncokb_Transport_of_small_molecules.sh

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
vi corrections/srchnew_oncokb_Transport_of_small_molecules.sh
#:1,$s/pways_for_each/corrections\/gnasonce_pways_for_each/

sh corrections/srchnew_oncokb_Transport_of_small_molecules.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $2 " (" $1 ")\t" $3}' | awk -F"\t" '{kountb++; genenm[kountb]=$1; hier[kountb]=$2; a[$2]++} END { for (i in a) {printf i " |(" a[i] "), "; for (j=1; j<=kountb; j++) if (i==hier[j]){ printf genenm[j] ", "} print ""} }' > corrections/temp1.txt

cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/toplevelpways/Transport_of_small_molecules_R_HSA_382551.txt corrections/edited_Transport_of_small_molecules_R_HSA_382551.txt
vi corrections/edited_Transport_of_small_molecules_R_HSA_382551.txt
#:1,$s/"//g

awk '($0 ~ /^R-HSA-/)' corrections/edited_Transport_of_small_molecules_R_HSA_382551.txt | sort | sed -e 's/\(R-HSA-[0-9]\{5,8\}\),/\1|/g' -e 's/,\(R-HSA-[0-9]\{5,8\}\)/|\1/g' | awk -F"|" '{IFS=OFS="|"}{$(NF-1)=""; $NF=""; print $0}' | sort | uniq | sed -e 's/||/ |(/' -e 's/  |/ |/g' > corrections/temp2.sh

vi corrections/temp2.sh
#:1,$s/^/grep "/
#:1,$s/$/" temp1.txt || echo ""/
#:wq

#for foll cmds, pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/corrections
sh temp2.sh > corectd_fortabuln_hier_oncokb_Transport_of_small_molecules.txt

echo -n "\nAll oncokb or bmomim genes in top-level pathway: Transport_of_small_molecules |" >> corectd_fortabuln_hier_oncokb_Transport_of_small_molecules.txt

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh corrections/srchnew_oncokb_Transport_of_small_molecules.sh | sed -e 's/||/\t/' | awk -F"\t" '{print $1}' | sed -e 's/|/\t/' | sort -k1,1 | uniq -c | sed -e 's/^ \{2,8\}//' -e 's/ /\t/' | awk -F"\t" '{IFS=OFS="\t"}{print $1, $2}' | awk -F"\t" '{IFS=OFS="\t"}{a[$2] += $1} END {for (i in a) {k++; print a[i], i} print k, "num_of_genes"}' | awk -F"\t" '{print $2 "(" $1 ")"}' | sed -z 's/\n/, /g' | sed -e '$a\' >> corrections/corectd_fortabuln_hier_oncokb_Transport_of_small_molecules.txt
#foll cmd writes the fortabuln file from NF to 1; this helps during xl tabulation;
awk -F"|" '{IFS=OFS="|"}{{for ( i=NF ; i >=1 ; i-- ) printf $i OFS} print""}' corrections/corectd_fortabuln_hier_oncokb_Transport_of_small_molecules.txt > corrections/temp3.txt
cp corrections/temp3.txt corrections/corectd_fortabuln_hier_oncokb_Transport_of_small_molecules.txt

diff --side-by-side --suppress-common-lines --width=6000 corrections/corectd_fortabuln_hier_oncokb_Transport_of_small_molecules.txt fortabuln_hier_oncokb_Transport_of_small_molecules.txt

--------------------------------------------------
--------------------------------------------------

#correcting the pie charts; cmds below based on lines 3263-3442 of the foll cmd file: 
#/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/cmd4_forwriteup_modified_13may2023.sh

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/piecorrections

cp ../oncokb_fortabuln_suprpwaylst.sh ./corct_oncokb_fortabuln_suprpwaylst.sh
cp ../oncokb_forsorting_suprpwaylst.sh ./corct_oncokb_forsorting_suprpwaylst.sh
cp ../cmd_fortabuln_suprpwaygenes.sh ./corct_cmd_fortabuln_suprpwaygenes.sh
cp ../cmd_forsorting_suprpwaygenes.sh ./corct_cmd_forsorting_suprpwaygenes.sh

#for foll corectd_fortabuln_hier_oncokb_ files, 
corectd_fortabuln_hier_oncokb_Cell_Cycle.txt
corectd_fortabuln_hier_oncokb_Disease.txt
corectd_fortabuln_hier_oncokb_DNA_Repair.txt
corectd_fortabuln_hier_oncokb_Gene_expression_Transcription.txt
corectd_fortabuln_hier_oncokb_Hemostasis.txt
corectd_fortabuln_hier_oncokb_Immune_System.txt
corectd_fortabuln_hier_oncokb_Programmed_Cell_Death.txt
corectd_fortabuln_hier_oncokb_Signal_Transduction.txt
#introduced the new path in the foll two files; 
#left the path for the remaining fortabuln_hier_oncokb files the same;
vi corct_oncokb_fortabuln_suprpwaylst.sh
vi corct_oncokb_forsorting_suprpwaylst.sh

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh piecorrections/corct_oncokb_fortabuln_suprpwaylst.sh | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' -e 's/ /\t/' -e 's/, /\t/' | sort -k2,2nr > piecorrections/corct_suprpway_oncokb_genes.txt
#all cmds below give identical outputs;
sh piecorrections/corct_oncokb_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | uniq -f 2 -D | uniq -f 2 | wc -l
#566      [previously 563, now 566 genes]
sh piecorrections/corct_oncokb_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | uniq -f 2 -d | wc -l
566
sh piecorrections/corct_oncokb_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | uniq -f 2 -c | sort -k1,1rn | awk -F" " '($1 > 1)' | wc -l
566
#foll cmd is simple and familiar; i.e., it does not use uniq -f 2, -D, -d, etc.
#sh piecorrections/corct_oncokb_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | cut -f3,3 | sort | uniq -c | sort -k1,1nr | awk -F" " '($1 > 1)' | wc -l
566

#-------------------------------------------------
#making GNAS-related corrections in oncokb pie charts; 

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/piecorrections

#for foll corectd_fortabuln_hier_oncokb_ files, 
../corrections/corectd_fortabuln_hier_oncokb_Disease.txt
../corrections/corectd_fortabuln_hier_oncokb_Hemostasis.txt
../corrections/corectd_fortabuln_hier_oncokb_Signal_Transduction.txt
../corrections/corectd_fortabuln_hier_oncokb_Transport_of_small_molecules.txt
../corrections/corectd_fortabuln_hier_oncokb_Metabolism.txt
#introduced the new path in the foll two files; 
#left the path for the remaining fortabuln_hier_oncokb files the same;
vi corct_oncokb_fortabuln_suprpwaylst.sh
vi corct_oncokb_forsorting_suprpwaylst.sh

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh piecorrections/corct_oncokb_fortabuln_suprpwaylst.sh | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' -e 's/ /\t/' -e 's/, /\t/' | sort -k2,2nr > piecorrections/corct_suprpway_oncokb_genes.txt
#all cmds below give identical outputs;
sh piecorrections/corct_oncokb_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | uniq -f 2 -D | uniq -f 2 | wc -l
#566      [previously 563, now 566 genes]
sh piecorrections/corct_oncokb_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | uniq -f 2 -d | wc -l
566
sh piecorrections/corct_oncokb_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | uniq -f 2 -c | sort -k1,1rn | awk -F" " '($1 > 1)' | wc -l
566

#Taking this new GNAS corrected file, corct_suprpway_oncokb_genes.txt, to windows and opening it in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl10_pways_genes_in_superpways.xlsx;
#-------------------------------------------------

#correcting the pie charts for bmomim genes; 

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/piecorrections

cp ../bmomim_fortabuln_suprpwaylst.sh ./corct_bmomim_fortabuln_suprpwaylst.sh
cp ../bmomim_forsorting_suprpwaylst.sh ./corct_bmomim_forsorting_suprpwaylst.sh
#cp ../cmd_fortabuln_suprpwaygenes.sh ./corct_cmd_fortabuln_suprpwaygenes.sh
#cp ../cmd_forsorting_suprpwaygenes.sh ./corct_cmd_forsorting_suprpwaygenes.sh

#for foll corectd_fortabuln_hier_bmomim_ files, 
corectd_fortabuln_hier_bmomim_Cell_Cycle.txt
corectd_fortabuln_hier_bmomim_Disease.txt
corectd_fortabuln_hier_bmomim_DNA_Repair.txt
corectd_fortabuln_hier_bmomim_Gene_expression_Transcription.txt
corectd_fortabuln_hier_bmomim_Hemostasis.txt
corectd_fortabuln_hier_bmomim_Immune_System.txt
corectd_fortabuln_hier_bmomim_Programmed_Cell_Death.txt
corectd_fortabuln_hier_bmomim_Signal_Transduction.txt
#introduced the new path in the foll two files; 
#left the path for the remaining fortabuln_hier_oncokb files the same;
vi corct_bmomim_fortabuln_suprpwaylst.sh
vi corct_bmomim_forsorting_suprpwaylst.sh

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup
sh piecorrections/corct_bmomim_fortabuln_suprpwaylst.sh | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' -e 's/ /\t/' -e 's/, /\t/' | sort -k2,2nr > piecorrections/corct_suprpway_bmomim_genes.txt
#all cmds below give identical outputs;
sh piecorrections/corct_bmomim_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | uniq -f 2 -D | uniq -f 2 | wc -l
#166      [previously 563, now 566 genes]
sh piecorrections/corct_bmomim_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | uniq -f 2 -d | wc -l
#166
sh piecorrections/corct_bmomim_forsorting_suprpwaylst.sh | grep -v "=" | sed -e 's/\([A-Za-z]\) \([A-Za-z]\)/\1_\2/g' | sort -k3,3 | uniq -f 2 -c | sort -k1,1rn | awk -F" " '($1 > 1)' | wc -l
#166

#Taking corct_suprpway_oncokb_genes.txt and corct_suprpway_bmomim_genes.txt to windows; 
#opening it in xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl10_pways_genes_in_superpways.xlsx
#sheet names = suprpway_oncokb_genes, suprpway_bmomim_genes; used these sheets to generate the pie charts shown in 
#ppt file: D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\tbls_figs.pptx

-------------------------------------------------

#trying to correct pway fingerprint; 

#starting from line 3444 of: 
#/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/cmd4_forwriteup_modified_13may2023.sh

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup

#the fix to the GNAS problem has also been included below; 

paste -d" " tree_Autophagy.txt fortabuln_hier_oncokb_Autophagy.txt > pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Cell_Cell_communication.txt fortabuln_hier_oncokb_Cell_Cell_communication.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt

paste -d" " tree_Cell_Cycle.txt corrections/corectd_fortabuln_hier_oncokb_Cell_Cycle.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt

paste -d" " tree_Cellular_responses_to_stimuli.txt fortabuln_hier_oncokb_Cellular_responses_to_stimuli.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Chromatin_organization.txt fortabuln_hier_oncokb_Chromatin_organization.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Circadian_Clock.txt fortabuln_hier_oncokb_Circadian_Clock.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Developmental_Biology.txt fortabuln_hier_oncokb_Developmental_Biology.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Digestion_and_absorption.txt fortabuln_hier_oncokb_Digestion_and_absorption.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt

paste -d" " tree_Disease.txt corrections/corectd_fortabuln_hier_oncokb_Disease.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_DNA_Repair.txt corrections/corectd_fortabuln_hier_oncokb_DNA_Repair.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt

paste -d" " tree_DNA_Replication.txt fortabuln_hier_oncokb_DNA_Replication.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Extracellular_matrix_organization.txt fortabuln_hier_oncokb_Extracellular_matrix_organization.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt

paste -d" " tree_Gene_expression_Transcription.txt corrections/corectd_fortabuln_hier_oncokb_Gene_expression_Transcription.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Hemostasis.txt corrections/corectd_fortabuln_hier_oncokb_Hemostasis.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Immune_System.txt corrections/corectd_fortabuln_hier_oncokb_Immune_System.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt

paste -d" " tree_Metabolism_of_proteins.txt fortabuln_hier_oncokb_Metabolism_of_proteins.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Metabolism_of_RNA.txt fortabuln_hier_oncokb_Metabolism_of_RNA.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Metabolism.txt corrections/corectd_fortabuln_hier_oncokb_Metabolism.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Muscle_contraction.txt fortabuln_hier_oncokb_Muscle_contraction.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Neuronal_System.txt fortabuln_hier_oncokb_Neuronal_System.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Organelle_biogenesis_and_maintenance.txt fortabuln_hier_oncokb_Organelle_biogenesis_and_maintenance.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt

paste -d" " tree_Programmed_Cell_Death.txt corrections/corectd_fortabuln_hier_oncokb_Programmed_Cell_Death.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt

paste -d" " tree_Protein_localization.txt fortabuln_hier_oncokb_Protein_localization.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Reproduction.txt fortabuln_hier_oncokb_Reproduction.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Sensory_Perception.txt fortabuln_hier_oncokb_Sensory_Perception.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt

paste -d" " tree_Signal_Transduction.txt corrections/corectd_fortabuln_hier_oncokb_Signal_Transduction.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt

paste -d" " tree_Transport_of_small_molecules.txt corrections/corectd_fortabuln_hier_oncokb_Transport_of_small_molecules.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt
paste -d" " tree_Vesicle_mediated_transport.txt fortabuln_hier_oncokb_Vesicle_mediated_transport.txt >> pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt

awk '!($0 ~ /^ $/)' pfpcorrections/corct_all_suprpway_trees_oncokb_genes.txt | grep -v "All oncokb" | awk -F"\\), " '{IFS=OFS="), "}{{for (i=1; i<NF; i++) printf $i OFS} printf "\n"}' | grep -v ^$ > pfpcorrections/corct_cols1_2_all_suprpway_trees_oncokb_genes.txt

#checking old and new;
#wc -l pfpcorrections/corct_cols1_2_all_suprpway_trees_oncokb_genes.txt gene_pway_fingerprint/cols1_2_all_suprpway_trees_oncokb_genes.txt
#1299 pfpcorrections/corct_cols1_2_all_suprpway_trees_oncokb_genes.txt
#1285 gene_pway_fingerprint/cols1_2_all_suprpway_trees_oncokb_genes.txt
#diff pfpcorrections/corct_cols1_2_all_suprpway_trees_oncokb_genes.txt gene_pway_fingerprint/cols1_2_all_suprpway_trees_oncokb_genes.txt | grep "<" | wc -l
#25
vi pfpcorrections/corct_cols1_2_all_suprpway_trees_oncokb_genes.txt

#--------------------------------------------------
#KIRC

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup

cp gene_pway_fingerprint/prep_kirc_fingerprint_onlyhier.sh pfpcorrections/corct_prep_kirc_fingerprint_onlyhier.sh
vi pfpcorrections/corct_prep_kirc_fingerprint_onlyhier.sh
#:1,$s/cols1_2_all_suprpway_trees_oncokb_genes\.txt/corct_cols1_2_all_suprpway_trees_oncokb_genes\.txt/

cp gene_pway_fingerprint/prep_addnl_kirc_fingerprint_onlyhier.sh pfpcorrections/corct_prep_addnl_kirc_fingerprint_onlyhier.sh
vi pfpcorrections/corct_prep_addnl_kirc_fingerprint_onlyhier.sh
#:1,$s/cols1_2_all_suprpway_trees_oncokb_genes\.txt/corct_cols1_2_all_suprpway_trees_oncokb_genes\.txt/

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections
sh corct_prep_kirc_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh corct_prep_addnl_kirc_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

#line 3647, 3792, 3836
mv junk4.txt corct_rncount_hier_kirc_genes.txt

diff corct_rncount_hier_kirc_genes.txt ../gene_pway_fingerprint/rncount_hier_kirc_genes.txt | grep "<" | wc -l
#6

cp ../gene_pway_fingerprint/prep_kirc_infile_gene_pway_fingerprint.sh corct_prep_kirc_infile_gene_pway_fingerprint.sh
vi corct_prep_kirc_infile_gene_pway_fingerprint.sh
#:1,$s/rncount_/corct_rncount_/

#foll is a necessary file;
/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/all_reactome_hierarchies.txt

sh corct_prep_kirc_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > corct_gene_wise_hierarchies_kirc.txt

#running matrix program;
perl ../gene_pway_fingerprint/gene_pway_fingerprint_mtx.pl ../gene_pway_fingerprint/all_reactome_hierarchies.txt corct_gene_wise_hierarchies_kirc.txt corct_kirc_genes_pway_fingerprint_mtx.out

#have to make format of output file suitable for xl;
vi corct_kirc_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#Took this file to xl file;

#for checking;
diff corct_brca_genes_pway_fingerprint_mtx.out ../gene_pway_fingerprint/brca_genes_pway_fingerprint_mtx.out
#--------------------------------------------------

#BRCA

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup

cp gene_pway_fingerprint/prep_brca_fingerprint_onlyhier.sh pfpcorrections/corct_prep_brca_fingerprint_onlyhier.sh
vi pfpcorrections/corct_prep_brca_fingerprint_onlyhier.sh
#:1,$s/cols1_2_all_suprpway_trees_oncokb_genes\.txt/corct_cols1_2_all_suprpway_trees_oncokb_genes\.txt/

cp gene_pway_fingerprint/prep_addnl_brca_fingerprint_onlyhier.sh pfpcorrections/corct_prep_addnl_brca_fingerprint_onlyhier.sh
vi pfpcorrections/corct_prep_addnl_brca_fingerprint_onlyhier.sh
#:1,$s/cols1_2_all_suprpway_trees_oncokb_genes\.txt/corct_cols1_2_all_suprpway_trees_oncokb_genes\.txt/

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections
sh corct_prep_brca_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh corct_prep_addnl_brca_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

#line 3647, 3792, 3836
mv junk4.txt corct_rncount_hier_brca_genes.txt

diff corct_rncount_hier_brca_genes.txt ../gene_pway_fingerprint/rncount_hier_brca_genes.txt | grep "<" | wc -l
#25

cp ../gene_pway_fingerprint/prep_brca_infile_gene_pway_fingerprint.sh corct_prep_brca_infile_gene_pway_fingerprint.sh
vi corct_prep_brca_infile_gene_pway_fingerprint.sh
#:1,$s/rncount_/corct_rncount_/

#foll is a necessary file;
/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/all_reactome_hierarchies.txt

sh corct_prep_brca_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > corct_gene_wise_hierarchies_brca.txt

#running matrix program;
perl ../gene_pway_fingerprint/gene_pway_fingerprint_mtx.pl ../gene_pway_fingerprint/all_reactome_hierarchies.txt corct_gene_wise_hierarchies_brca.txt corct_brca_genes_pway_fingerprint_mtx.out

#have to make format of output file suitable for xl;
vi corct_brca_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#Took this file to xl file;

#for checking;
diff corct_brca_genes_pway_fingerprint_mtx.out ../gene_pway_fingerprint/brca_genes_pway_fingerprint_mtx.out
diff corct_rncount_hier_brca_genes.txt ../gene_pway_fingerprint/rncount_hier_brca_genes.txt | more
diff --side-by-side --suppress-common-lines --width=2000 corrections/corectd_fortabuln_hier_oncokb_Cell_Cycle.txt fortabuln_hier_oncokb_Cell_Cycle.txt

#--------------------------------------------------

#COADREAD

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup

cp gene_pway_fingerprint/prep_coadread_fingerprint_onlyhier.sh pfpcorrections/corct_prep_coadread_fingerprint_onlyhier.sh
vi pfpcorrections/corct_prep_coadread_fingerprint_onlyhier.sh
#:1,$s/cols1_2_all_suprpway_trees_oncokb_genes\.txt/corct_cols1_2_all_suprpway_trees_oncokb_genes\.txt/

cp gene_pway_fingerprint/prep_addnl_coadread_fingerprint_onlyhier.sh pfpcorrections/corct_prep_addnl_coadread_fingerprint_onlyhier.sh
vi pfpcorrections/corct_prep_addnl_coadread_fingerprint_onlyhier.sh
#:1,$s/cols1_2_all_suprpway_trees_oncokb_genes\.txt/corct_cols1_2_all_suprpway_trees_oncokb_genes\.txt/

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections
sh corct_prep_coadread_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh corct_prep_addnl_coadread_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

#line 3647, 3792, 3836
mv junk4.txt corct_rncount_hier_coadread_genes.txt

diff corct_rncount_hier_coadread_genes.txt ../gene_pway_fingerprint/rncount_hier_coadread_genes.txt | grep "<" | wc -l
#23

cp ../gene_pway_fingerprint/prep_coadread_infile_gene_pway_fingerprint.sh corct_prep_coadread_infile_gene_pway_fingerprint.sh
vi corct_prep_coadread_infile_gene_pway_fingerprint.sh
#:1,$s/rncount_/corct_rncount_/

#foll is a necessary file;
/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/all_reactome_hierarchies.txt

sh corct_prep_coadread_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > corct_gene_wise_hierarchies_coadread.txt

#running matrix program;
perl ../gene_pway_fingerprint/gene_pway_fingerprint_mtx.pl ../gene_pway_fingerprint/all_reactome_hierarchies.txt corct_gene_wise_hierarchies_coadread.txt corct_coadread_genes_pway_fingerprint_mtx.out

#have to make format of output file suitable for xl;
vi corct_coadread_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#Took this file to xl file;

#for checking;
diff corct_coadread_genes_pway_fingerprint_mtx.out ../gene_pway_fingerprint/coadread_genes_pway_fingerprint_mtx.out
diff corct_rncount_hier_coadread_genes.txt ../gene_pway_fingerprint/rncount_hier_coadread_genes.txt | more

#--------------------------------------------------

#HNSC

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup

cp gene_pway_fingerprint/prep_hnsc_fingerprint_onlyhier.sh pfpcorrections/corct_prep_hnsc_fingerprint_onlyhier.sh
vi pfpcorrections/corct_prep_hnsc_fingerprint_onlyhier.sh
#:1,$s/cols1_2_all_suprpway_trees_oncokb_genes\.txt/corct_cols1_2_all_suprpway_trees_oncokb_genes\.txt/

cp gene_pway_fingerprint/prep_addnl_hnsc_fingerprint_onlyhier.sh pfpcorrections/corct_prep_addnl_hnsc_fingerprint_onlyhier.sh
vi pfpcorrections/corct_prep_addnl_hnsc_fingerprint_onlyhier.sh
#:1,$s/cols1_2_all_suprpway_trees_oncokb_genes\.txt/corct_cols1_2_all_suprpway_trees_oncokb_genes\.txt/

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections
sh corct_prep_hnsc_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh corct_prep_addnl_hnsc_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

#line 3647, 3792, 3836
mv junk4.txt corct_rncount_hier_hnsc_genes.txt

diff corct_rncount_hier_hnsc_genes.txt ../gene_pway_fingerprint/rncount_hier_hnsc_genes.txt | grep "<" | wc -l
#8

cp ../gene_pway_fingerprint/prep_hnsc_infile_gene_pway_fingerprint.sh corct_prep_hnsc_infile_gene_pway_fingerprint.sh
vi corct_prep_hnsc_infile_gene_pway_fingerprint.sh
#:1,$s/rncount_/corct_rncount_/

#foll is a necessary file;
/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/all_reactome_hierarchies.txt

sh corct_prep_hnsc_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > corct_gene_wise_hierarchies_hnsc.txt

#running matrix program;
perl ../gene_pway_fingerprint/gene_pway_fingerprint_mtx.pl ../gene_pway_fingerprint/all_reactome_hierarchies.txt corct_gene_wise_hierarchies_hnsc.txt corct_hnsc_genes_pway_fingerprint_mtx.out

#have to make format of output file suitable for xl;
vi corct_hnsc_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#Took this file to xl file;

#for checking;
diff corct_hnsc_genes_pway_fingerprint_mtx.out ../gene_pway_fingerprint/hnsc_genes_pway_fingerprint_mtx.out
diff corct_rncount_hier_hnsc_genes.txt ../gene_pway_fingerprint/rncount_hier_hnsc_genes.txt | more

#--------------------------------------------------

#GBM

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup

cp gene_pway_fingerprint/prep_gbm_fingerprint_onlyhier.sh pfpcorrections/corct_prep_gbm_fingerprint_onlyhier.sh
vi pfpcorrections/corct_prep_gbm_fingerprint_onlyhier.sh
#:1,$s/cols1_2_all_suprpway_trees_oncokb_genes\.txt/corct_cols1_2_all_suprpway_trees_oncokb_genes\.txt/

cp gene_pway_fingerprint/prep_addnl_gbm_fingerprint_onlyhier.sh pfpcorrections/corct_prep_addnl_gbm_fingerprint_onlyhier.sh
vi pfpcorrections/corct_prep_addnl_gbm_fingerprint_onlyhier.sh
#:1,$s/cols1_2_all_suprpway_trees_oncokb_genes\.txt/corct_cols1_2_all_suprpway_trees_oncokb_genes\.txt/

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections
sh corct_prep_gbm_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh corct_prep_addnl_gbm_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

#line 3647, 3792, 3836
mv junk4.txt corct_rncount_hier_gbm_genes.txt

diff corct_rncount_hier_gbm_genes.txt ../gene_pway_fingerprint/rncount_hier_gbm_genes.txt | grep "<" | wc -l
#10

cp ../gene_pway_fingerprint/prep_gbm_infile_gene_pway_fingerprint.sh corct_prep_gbm_infile_gene_pway_fingerprint.sh
vi corct_prep_gbm_infile_gene_pway_fingerprint.sh
#:1,$s/rncount_/corct_rncount_/

#foll is a necessary file;
/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/all_reactome_hierarchies.txt

sh corct_prep_gbm_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > corct_gene_wise_hierarchies_gbm.txt

#running matrix program;
perl ../gene_pway_fingerprint/gene_pway_fingerprint_mtx.pl ../gene_pway_fingerprint/all_reactome_hierarchies.txt corct_gene_wise_hierarchies_gbm.txt corct_gbm_genes_pway_fingerprint_mtx.out

#have to make format of output file suitable for xl;
vi corct_gbm_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#Took this file to xl file;

#for checking;
diff corct_gbm_genes_pway_fingerprint_mtx.out ../gene_pway_fingerprint/gbm_genes_pway_fingerprint_mtx.out

#--------------------------------------------------

#LUAD

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup

cp gene_pway_fingerprint/prep_luad_fingerprint_onlyhier.sh pfpcorrections/corct_prep_luad_fingerprint_onlyhier.sh
vi pfpcorrections/corct_prep_luad_fingerprint_onlyhier.sh
#:1,$s/cols1_2_all_suprpway_trees_oncokb_genes\.txt/corct_cols1_2_all_suprpway_trees_oncokb_genes\.txt/

cp gene_pway_fingerprint/prep_addnl_luad_fingerprint_onlyhier.sh pfpcorrections/corct_prep_addnl_luad_fingerprint_onlyhier.sh
vi pfpcorrections/corct_prep_addnl_luad_fingerprint_onlyhier.sh
#:1,$s/cols1_2_all_suprpway_trees_oncokb_genes\.txt/corct_cols1_2_all_suprpway_trees_oncokb_genes\.txt/

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections
sh corct_prep_luad_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh corct_prep_addnl_luad_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

#line 3647, 3792, 3836
mv junk4.txt corct_rncount_hier_luad_genes.txt

diff corct_rncount_hier_luad_genes.txt ../gene_pway_fingerprint/rncount_hier_luad_genes.txt | grep "<" | wc -l
#22

cp ../gene_pway_fingerprint/prep_luad_infile_gene_pway_fingerprint.sh corct_prep_luad_infile_gene_pway_fingerprint.sh
vi corct_prep_luad_infile_gene_pway_fingerprint.sh
#:1,$s/rncount_/corct_rncount_/

#foll is a necessary file;
/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/all_reactome_hierarchies.txt

sh corct_prep_luad_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > corct_gene_wise_hierarchies_luad.txt

#running matrix program;
perl ../gene_pway_fingerprint/gene_pway_fingerprint_mtx.pl ../gene_pway_fingerprint/all_reactome_hierarchies.txt corct_gene_wise_hierarchies_luad.txt corct_luad_genes_pway_fingerprint_mtx.out

#have to make format of output file suitable for xl;
vi corct_luad_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#Took this file to xl file;

#for checking;
diff corct_luad_genes_pway_fingerprint_mtx.out ../gene_pway_fingerprint/luad_genes_pway_fingerprint_mtx.out

#--------------------------------------------------

#SKCM

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup

cp gene_pway_fingerprint/prep_skcm_fingerprint_onlyhier.sh pfpcorrections/corct_prep_skcm_fingerprint_onlyhier.sh
vi pfpcorrections/corct_prep_skcm_fingerprint_onlyhier.sh
#:1,$s/cols1_2_all_suprpway_trees_oncokb_genes\.txt/corct_cols1_2_all_suprpway_trees_oncokb_genes\.txt/

cp gene_pway_fingerprint/prep_addnl_skcm_fingerprint_onlyhier.sh pfpcorrections/corct_prep_addnl_skcm_fingerprint_onlyhier.sh
vi pfpcorrections/corct_prep_addnl_skcm_fingerprint_onlyhier.sh
#:1,$s/cols1_2_all_suprpway_trees_oncokb_genes\.txt/corct_cols1_2_all_suprpway_trees_oncokb_genes\.txt/

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections
sh corct_prep_skcm_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh corct_prep_addnl_skcm_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

#line 3647, 3792, 3836
mv junk4.txt corct_rncount_hier_skcm_genes.txt

diff corct_rncount_hier_skcm_genes.txt ../gene_pway_fingerprint/rncount_hier_skcm_genes.txt | grep "<" | wc -l
#29

cp ../gene_pway_fingerprint/prep_skcm_infile_gene_pway_fingerprint.sh corct_prep_skcm_infile_gene_pway_fingerprint.sh
vi corct_prep_skcm_infile_gene_pway_fingerprint.sh
#:1,$s/rncount_/corct_rncount_/

#foll is a necessary file;
/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/all_reactome_hierarchies.txt

sh corct_prep_skcm_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > corct_gene_wise_hierarchies_skcm.txt

#running matrix program;
perl ../gene_pway_fingerprint/gene_pway_fingerprint_mtx.pl ../gene_pway_fingerprint/all_reactome_hierarchies.txt corct_gene_wise_hierarchies_skcm.txt corct_skcm_genes_pway_fingerprint_mtx.out

#have to make format of output file suitable for xl;
vi corct_skcm_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#Took this file to xl file;

#for checking;
diff corct_skcm_genes_pway_fingerprint_mtx.out ../gene_pway_fingerprint/skcm_genes_pway_fingerprint_mtx.out

#--------------------------------------------------

#LAML

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup

cp gene_pway_fingerprint/prep_laml_fingerprint_onlyhier.sh pfpcorrections/corct_prep_laml_fingerprint_onlyhier.sh
vi pfpcorrections/corct_prep_laml_fingerprint_onlyhier.sh
#:1,$s/cols1_2_all_suprpway_trees_oncokb_genes\.txt/corct_cols1_2_all_suprpway_trees_oncokb_genes\.txt/

cp gene_pway_fingerprint/prep_addnl_laml_fingerprint_onlyhier.sh pfpcorrections/corct_prep_addnl_laml_fingerprint_onlyhier.sh
vi pfpcorrections/corct_prep_addnl_laml_fingerprint_onlyhier.sh
#:1,$s/cols1_2_all_suprpway_trees_oncokb_genes\.txt/corct_cols1_2_all_suprpway_trees_oncokb_genes\.txt/

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections
sh corct_prep_laml_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh corct_prep_addnl_laml_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

#line 3647, 3792, 3836
mv junk4.txt corct_rncount_hier_laml_genes.txt

diff corct_rncount_hier_laml_genes.txt ../gene_pway_fingerprint/rncount_hier_laml_genes.txt | grep "<" | wc -l
#6

cp ../gene_pway_fingerprint/prep_laml_infile_gene_pway_fingerprint.sh corct_prep_laml_infile_gene_pway_fingerprint.sh
vi corct_prep_laml_infile_gene_pway_fingerprint.sh
#:1,$s/rncount_/corct_rncount_/

#foll is a necessary file;
/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/all_reactome_hierarchies.txt

sh corct_prep_laml_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > corct_gene_wise_hierarchies_laml.txt

#running matrix program;
perl ../gene_pway_fingerprint/gene_pway_fingerprint_mtx.pl ../gene_pway_fingerprint/all_reactome_hierarchies.txt corct_gene_wise_hierarchies_laml.txt corct_laml_genes_pway_fingerprint_mtx.out

#have to make format of output file suitable for xl;
vi corct_laml_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#Took this file to xl file;

#for checking;
diff corct_laml_genes_pway_fingerprint_mtx.out ../gene_pway_fingerprint/laml_genes_pway_fingerprint_mtx.out

#--------------------------------------------------

#trying to correct pway fingerprint of bmomim part; 

#from line 563 of: /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/cmd5_counting.sh

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup

paste -d" " tree_Autophagy.txt fortabuln_hier_bmomim_Autophagy.txt > pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt
paste -d" " tree_Cell_Cell_communication.txt fortabuln_hier_bmomim_Cell_Cell_communication.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt

paste -d" " tree_Cell_Cycle.txt corrections/corectd_fortabuln_hier_bmomim_Cell_Cycle.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt

paste -d" " tree_Cellular_responses_to_stimuli.txt fortabuln_hier_bmomim_Cellular_responses_to_stimuli.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt
paste -d" " tree_Chromatin_organization.txt fortabuln_hier_bmomim_Chromatin_organization.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt
paste -d" " tree_Circadian_Clock.txt fortabuln_hier_bmomim_Circadian_Clock.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt
paste -d" " tree_Developmental_Biology.txt fortabuln_hier_bmomim_Developmental_Biology.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt
paste -d" " tree_Digestion_and_absorption.txt fortabuln_hier_bmomim_Digestion_and_absorption.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt

paste -d" " tree_Disease.txt corrections/corectd_fortabuln_hier_bmomim_Disease.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt
paste -d" " tree_DNA_Repair.txt corrections/corectd_fortabuln_hier_bmomim_DNA_Repair.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt

paste -d" " tree_DNA_Replication.txt fortabuln_hier_bmomim_DNA_Replication.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt
paste -d" " tree_Extracellular_matrix_organization.txt fortabuln_hier_bmomim_Extracellular_matrix_organization.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt

paste -d" " tree_Gene_expression_Transcription.txt corrections/corectd_fortabuln_hier_bmomim_Gene_expression_Transcription.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt
paste -d" " tree_Hemostasis.txt corrections/corectd_fortabuln_hier_bmomim_Hemostasis.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt
paste -d" " tree_Immune_System.txt corrections/corectd_fortabuln_hier_bmomim_Immune_System.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt

paste -d" " tree_Metabolism_of_proteins.txt fortabuln_hier_bmomim_Metabolism_of_proteins.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt
paste -d" " tree_Metabolism_of_RNA.txt fortabuln_hier_bmomim_Metabolism_of_RNA.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt
paste -d" " tree_Metabolism.txt fortabuln_hier_bmomim_Metabolism.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt
paste -d" " tree_Muscle_contraction.txt fortabuln_hier_bmomim_Muscle_contraction.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt
paste -d" " tree_Neuronal_System.txt fortabuln_hier_bmomim_Neuronal_System.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt
paste -d" " tree_Organelle_biogenesis_and_maintenance.txt fortabuln_hier_bmomim_Organelle_biogenesis_and_maintenance.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt

paste -d" " tree_Programmed_Cell_Death.txt corrections/corectd_fortabuln_hier_bmomim_Programmed_Cell_Death.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt

paste -d" " tree_Protein_localization.txt fortabuln_hier_bmomim_Protein_localization.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt
paste -d" " tree_Reproduction.txt fortabuln_hier_bmomim_Reproduction.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt
paste -d" " tree_Sensory_Perception.txt fortabuln_hier_bmomim_Sensory_Perception.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt

paste -d" " tree_Signal_Transduction.txt corrections/corectd_fortabuln_hier_bmomim_Signal_Transduction.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt

paste -d" " tree_Transport_of_small_molecules.txt fortabuln_hier_bmomim_Transport_of_small_molecules.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt
paste -d" " tree_Vesicle_mediated_transport.txt fortabuln_hier_bmomim_Vesicle_mediated_transport.txt >> pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt

awk '!($0 ~ /^ $/)' pfpcorrections/corct_all_suprpway_trees_bmomim_genes.txt | grep -v "All bmomim" | awk -F"\\), " '{IFS=OFS="), "}{{for (i=1; i<NF; i++) printf $i OFS} printf "\n"}' | grep -v ^$ > pfpcorrections/corct_cols1_2_all_suprpway_trees_bmomim_genes.txt

#checking old and new;
#wc -l pfpcorrections/corct_cols1_2_all_suprpway_trees_bmomim_genes.txt gene_pway_fingerprint/bmomim_fingerprint/cols1_2_all_suprpway_trees_bmomim_genes.txt
#  587 pfpcorrections/corct_cols1_2_all_suprpway_trees_bmomim_genes.txt
#  554 gene_pway_fingerprint/bmomim_fingerprint/cols1_2_all_suprpway_trees_bmomim_genes.txt
#diff pfpcorrections/corct_cols1_2_all_suprpway_trees_bmomim_genes.txt gene_pway_fingerprint/bmomim_fingerprint/cols1_2_all_suprpway_trees_bmomim_genes.txt | grep "<" | wc -l
#33
vi pfpcorrections/corct_cols1_2_all_suprpway_trees_bmomim_genes.txt

#--------------------------------------------------

#bmomim

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup

cp gene_pway_fingerprint/bmomim_fingerprint/prep_bmomim_fingerprint_onlyhier.sh pfpcorrections/corct_prep_bmomim_fingerprint_onlyhier.sh
vi pfpcorrections/corct_prep_bmomim_fingerprint_onlyhier.sh
#:1,$s/cols1_2_all_suprpway_trees_bmomim_genes\.txt/corct_cols1_2_all_suprpway_trees_bmomim_genes\.txt/

cp gene_pway_fingerprint/bmomim_fingerprint/prep_addnl_bmomim_fingerprint_onlyhier.sh pfpcorrections/corct_prep_addnl_bmomim_fingerprint_onlyhier.sh
vi pfpcorrections/corct_prep_addnl_bmomim_fingerprint_onlyhier.sh
#:1,$s/cols1_2_all_suprpway_trees_bmomim_genes\.txt/corct_cols1_2_all_suprpway_trees_bmomim_genes\.txt/

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections
sh corct_prep_bmomim_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh corct_prep_addnl_bmomim_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

mv junk4.txt corct_rncount_hier_bmomim_genes.txt

diff corct_rncount_hier_bmomim_genes.txt ../gene_pway_fingerprint/bmomim_fingerprint/rncount_hier_bmomim_genes.txt | grep "<" | wc -l
#12

cp ../gene_pway_fingerprint/bmomim_fingerprint/prep_bmomim_infile_gene_pway_fingerprint.sh corct_prep_bmomim_infile_gene_pway_fingerprint.sh
vi corct_prep_bmomim_infile_gene_pway_fingerprint.sh
#:1,$s/rncount_/corct_rncount_/

#foll is a necessary file;
/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/all_reactome_hierarchies.txt

sh corct_prep_bmomim_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > corct_gene_wise_hierarchies_bmomim.txt

#running matrix program;
perl ../gene_pway_fingerprint/gene_pway_fingerprint_mtx.pl ../gene_pway_fingerprint/all_reactome_hierarchies.txt corct_gene_wise_hierarchies_bmomim.txt corct_bmomim_genes_pway_fingerprint_mtx.out

#have to make format of output file suitable for xl;
vi corct_bmomim_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#Took this file to xl file;

#for checking;
diff corct_bmomim_genes_pway_fingerprint_mtx.out ../gene_pway_fingerprint/bmomim_fingerprint/bmomim_genes_pway_fingerprint_mtx.out

#--------------------------------------------------

#trying to get corrected gene-pathway-fprint for each gene in each cancer;
#line 4816, /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/cmd4_forwriteup_modified_13may2023.sh

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections

#KIRC;

#for each gene in a cancer, only hierarchies in which the gene participates in are listed; also, cancer genes
#which co-occur in each hierarchy are listed;
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
corct_kirc_genes_pway_fingerprint_mtx.out > crct_kirc_interim1.txt

#to the above file, the foll cmd adds a col indicating the minimum superpway name;
awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' crct_kirc_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > crct_kirc_interim2.txt

#copy kirc_interim2.txt created above;
cp crct_kirc_interim2.txt crct_kirc_interim2at.txt

#replaced tabs with @; tab as field-separator DOES NOT WORK with unix sort;
vi crct_kirc_interim2at.txt
#:1,$s/\t/@/g

#sort in ASCENDING order; k1=gene; k2=minimal suprpway name; k4=n reactions in hierarchy gene participates in;
sort --field-separator='@' -k1,1 -k2,2 -k4,4g crct_kirc_interim2at.txt | sed -s 's/@/\t/g' > crct_kirc_interim3.txt

awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' crct_kirc_interim3.txt > crct_kirc_interim4.txt

#replacing tab in above file to @; sorting: k1=gene, k7gr=DUMMY value of largest number of rns gene participates
#in in hierarchy; k2=minimal suprpway name; k12gr=TRUE number of rns gene participates in in hierarchy;
sed -e 's/\t/@/g' crct_kirc_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > crct_kirc_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' crct_kirc_interim5.txt > crct_kirc_fprint1.txt

sed -e 's/\t/@/g' crct_kirc_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > crct_kirc_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' crct_kirc_fprint2.txt > crct_kirc_genewise_pway_fprint.txt


awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
../gene_pway_fingerprint/finprnt/kirc_orig_genlst.txt crct_kirc_genewise_pway_fprint.txt > crct_kirc_ordrd_genewise_pway_fprint.txt

#check by putting into xl
diff crct_kirc_ordrd_genewise_pway_fprint.txt ../gene_pway_fingerprint/finprnt/kirc_ordrd_genewise_pway_fprint.txt | wc -l
#66

#checked, but put in fair form into xl; 

#-------------------------------------------------

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections

#BRCA;

#for each gene in a cancer, only hierarchies in which the gene participates in are listed; also, cancer genes
#which co-occur in each hierarchy are listed;
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
corct_brca_genes_pway_fingerprint_mtx.out > crct_brca_interim1.txt

#to the above file, the foll cmd adds a col indicating the minimum superpway name;
awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' crct_brca_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > crct_brca_interim2.txt

#copy brca_interim2.txt created above;
cp crct_brca_interim2.txt crct_brca_interim2at.txt

#replaced tabs with @; tab as field-separator DOES NOT WORK with unix sort;
vi crct_brca_interim2at.txt
#:1,$s/\t/@/g

#sort in ASCENDING order; k1=gene; k2=minimal suprpway name; k4=n reactions in hierarchy gene participates in;
sort --field-separator='@' -k1,1 -k2,2 -k4,4g crct_brca_interim2at.txt | sed -s 's/@/\t/g' > crct_brca_interim3.txt

awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' crct_brca_interim3.txt > crct_brca_interim4.txt

#replacing tab in above file to @; sorting: k1=gene, k7gr=DUMMY value of largest number of rns gene participates
#in in hierarchy; k2=minimal suprpway name; k12gr=TRUE number of rns gene participates in in hierarchy;
sed -e 's/\t/@/g' crct_brca_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > crct_brca_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' crct_brca_interim5.txt > crct_brca_fprint1.txt

sed -e 's/\t/@/g' crct_brca_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > crct_brca_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' crct_brca_fprint2.txt > crct_brca_genewise_pway_fprint.txt


awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
../gene_pway_fingerprint/finprnt/brca_orig_genlst.txt crct_brca_genewise_pway_fprint.txt > crct_brca_ordrd_genewise_pway_fprint.txt

diff crct_brca_ordrd_genewise_pway_fprint.txt ../gene_pway_fingerprint/finprnt/brca_ordrd_genewise_pway_fprint.txt | wc -l
#72

#check by putting into xl

#-------------------------------------------------

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections

#COADREAD;

#for each gene in a cancer, only hierarchies in which the gene participates in are listed; also, cancer genes
#which co-occur in each hierarchy are listed;
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
corct_coadread_genes_pway_fingerprint_mtx.out > crct_coadread_interim1.txt

#to the above file, the foll cmd adds a col indicating the minimum superpway name;
awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' crct_coadread_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > crct_coadread_interim2.txt

#copy coadread_interim2.txt created above;
cp crct_coadread_interim2.txt crct_coadread_interim2at.txt

#replaced tabs with @; tab as field-separator DOES NOT WORK with unix sort;
vi crct_coadread_interim2at.txt
#:1,$s/\t/@/g

#sort in ASCENDING order; k1=gene; k2=minimal suprpway name; k4=n reactions in hierarchy gene participates in;
sort --field-separator='@' -k1,1 -k2,2 -k4,4g crct_coadread_interim2at.txt | sed -s 's/@/\t/g' > crct_coadread_interim3.txt

awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' crct_coadread_interim3.txt > crct_coadread_interim4.txt

#replacing tab in above file to @; sorting: k1=gene, k7gr=DUMMY value of largest number of rns gene participates
#in in hierarchy; k2=minimal suprpway name; k12gr=TRUE number of rns gene participates in in hierarchy;
sed -e 's/\t/@/g' crct_coadread_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > crct_coadread_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' crct_coadread_interim5.txt > crct_coadread_fprint1.txt

sed -e 's/\t/@/g' crct_coadread_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > crct_coadread_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' crct_coadread_fprint2.txt > crct_coadread_genewise_pway_fprint.txt


awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
../gene_pway_fingerprint/finprnt/coadread_orig_genlst.txt crct_coadread_genewise_pway_fprint.txt > crct_coadread_ordrd_genewise_pway_fprint.txt

diff crct_coadread_ordrd_genewise_pway_fprint.txt ../gene_pway_fingerprint/finprnt/coadread_ordrd_genewise_pway_fprint.txt | wc -l
#72

#check by putting into xl

#-------------------------------------------------

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections

#HNSC;

#for each gene in a cancer, only hierarchies in which the gene participates in are listed; also, cancer genes
#which co-occur in each hierarchy are listed;
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
corct_hnsc_genes_pway_fingerprint_mtx.out > crct_hnsc_interim1.txt

#to the above file, the foll cmd adds a col indicating the minimum superpway name;
awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' crct_hnsc_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > crct_hnsc_interim2.txt

#copy hnsc_interim2.txt created above;
cp crct_hnsc_interim2.txt crct_hnsc_interim2at.txt

#replaced tabs with @; tab as field-separator DOES NOT WORK with unix sort;
vi crct_hnsc_interim2at.txt
#:1,$s/\t/@/g

#sort in ASCENDING order; k1=gene; k2=minimal suprpway name; k4=n reactions in hierarchy gene participates in;
sort --field-separator='@' -k1,1 -k2,2 -k4,4g crct_hnsc_interim2at.txt | sed -s 's/@/\t/g' > crct_hnsc_interim3.txt

awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' crct_hnsc_interim3.txt > crct_hnsc_interim4.txt

#replacing tab in above file to @; sorting: k1=gene, k7gr=DUMMY value of largest number of rns gene participates
#in in hierarchy; k2=minimal suprpway name; k12gr=TRUE number of rns gene participates in in hierarchy;
sed -e 's/\t/@/g' crct_hnsc_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > crct_hnsc_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' crct_hnsc_interim5.txt > crct_hnsc_fprint1.txt

sed -e 's/\t/@/g' crct_hnsc_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > crct_hnsc_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' crct_hnsc_fprint2.txt > crct_hnsc_genewise_pway_fprint.txt


awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
../gene_pway_fingerprint/finprnt/hnsc_orig_genlst.txt crct_hnsc_genewise_pway_fprint.txt > crct_hnsc_ordrd_genewise_pway_fprint.txt

diff crct_hnsc_ordrd_genewise_pway_fprint.txt ../gene_pway_fingerprint/finprnt/hnsc_ordrd_genewise_pway_fprint.txt | wc -l
#70

#check by putting into xl

#-------------------------------------------------

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections

#SKCM;

#for each gene in a cancer, only hierarchies in which the gene participates in are listed; also, cancer genes
#which co-occur in each hierarchy are listed;
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
corct_skcm_genes_pway_fingerprint_mtx.out > crct_skcm_interim1.txt

#to the above file, the foll cmd adds a col indicating the minimum superpway name;
awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' crct_skcm_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > crct_skcm_interim2.txt

#copy skcm_interim2.txt created above;
cp crct_skcm_interim2.txt crct_skcm_interim2at.txt

#replaced tabs with @; tab as field-separator DOES NOT WORK with unix sort;
vi crct_skcm_interim2at.txt
#:1,$s/\t/@/g

#sort in ASCENDING order; k1=gene; k2=minimal suprpway name; k4=n reactions in hierarchy gene participates in;
sort --field-separator='@' -k1,1 -k2,2 -k4,4g crct_skcm_interim2at.txt | sed -s 's/@/\t/g' > crct_skcm_interim3.txt

awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' crct_skcm_interim3.txt > crct_skcm_interim4.txt

#replacing tab in above file to @; sorting: k1=gene, k7gr=DUMMY value of largest number of rns gene participates
#in in hierarchy; k2=minimal suprpway name; k12gr=TRUE number of rns gene participates in in hierarchy;
sed -e 's/\t/@/g' crct_skcm_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > crct_skcm_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' crct_skcm_interim5.txt > crct_skcm_fprint1.txt

sed -e 's/\t/@/g' crct_skcm_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > crct_skcm_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' crct_skcm_fprint2.txt > crct_skcm_genewise_pway_fprint.txt


awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
../gene_pway_fingerprint/finprnt/skcm_orig_genlst.txt crct_skcm_genewise_pway_fprint.txt > crct_skcm_ordrd_genewise_pway_fprint.txt

diff crct_skcm_ordrd_genewise_pway_fprint.txt ../gene_pway_fingerprint/finprnt/skcm_ordrd_genewise_pway_fprint.txt | wc -l
#126

#check by putting into xl

#-------------------------------------------------

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections

#LUAD;

#for each gene in a cancer, only hierarchies in which the gene participates in are listed; also, cancer genes
#which co-occur in each hierarchy are listed;
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
corct_luad_genes_pway_fingerprint_mtx.out > crct_luad_interim1.txt

#to the above file, the foll cmd adds a col indicating the minimum superpway name;
awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' crct_luad_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > crct_luad_interim2.txt

#copy luad_interim2.txt created above;
cp crct_luad_interim2.txt crct_luad_interim2at.txt

#replaced tabs with @; tab as field-separator DOES NOT WORK with unix sort;
vi crct_luad_interim2at.txt
#:1,$s/\t/@/g

#sort in ASCENDING order; k1=gene; k2=minimal suprpway name; k4=n reactions in hierarchy gene participates in;
sort --field-separator='@' -k1,1 -k2,2 -k4,4g crct_luad_interim2at.txt | sed -s 's/@/\t/g' > crct_luad_interim3.txt

awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' crct_luad_interim3.txt > crct_luad_interim4.txt

#replacing tab in above file to @; sorting: k1=gene, k7gr=DUMMY value of largest number of rns gene participates
#in in hierarchy; k2=minimal suprpway name; k12gr=TRUE number of rns gene participates in in hierarchy;
sed -e 's/\t/@/g' crct_luad_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > crct_luad_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' crct_luad_interim5.txt > crct_luad_fprint1.txt

sed -e 's/\t/@/g' crct_luad_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > crct_luad_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' crct_luad_fprint2.txt > crct_luad_genewise_pway_fprint.txt


awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
../gene_pway_fingerprint/finprnt/luad_orig_genlst.txt crct_luad_genewise_pway_fprint.txt > crct_luad_ordrd_genewise_pway_fprint.txt

diff crct_luad_ordrd_genewise_pway_fprint.txt ../gene_pway_fingerprint/finprnt/luad_ordrd_genewise_pway_fprint.txt | wc -l
#120

#check by putting into xl

#-------------------------------------------------

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections

#GBM;

#for each gene in a cancer, only hierarchies in which the gene participates in are listed; also, cancer genes
#which co-occur in each hierarchy are listed;
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
corct_gbm_genes_pway_fingerprint_mtx.out > crct_gbm_interim1.txt

#to the above file, the foll cmd adds a col indicating the minimum superpway name;
awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' crct_gbm_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > crct_gbm_interim2.txt

#copy gbm_interim2.txt created above;
cp crct_gbm_interim2.txt crct_gbm_interim2at.txt

#replaced tabs with @; tab as field-separator DOES NOT WORK with unix sort;
vi crct_gbm_interim2at.txt
#:1,$s/\t/@/g

#sort in ASCENDING order; k1=gene; k2=minimal suprpway name; k4=n reactions in hierarchy gene participates in;
sort --field-separator='@' -k1,1 -k2,2 -k4,4g crct_gbm_interim2at.txt | sed -s 's/@/\t/g' > crct_gbm_interim3.txt

awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' crct_gbm_interim3.txt > crct_gbm_interim4.txt

#replacing tab in above file to @; sorting: k1=gene, k7gr=DUMMY value of largest number of rns gene participates
#in in hierarchy; k2=minimal suprpway name; k12gr=TRUE number of rns gene participates in in hierarchy;
sed -e 's/\t/@/g' crct_gbm_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > crct_gbm_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' crct_gbm_interim5.txt > crct_gbm_fprint1.txt

sed -e 's/\t/@/g' crct_gbm_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > crct_gbm_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' crct_gbm_fprint2.txt > crct_gbm_genewise_pway_fprint.txt


awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
../gene_pway_fingerprint/finprnt/gbm_orig_genlst.txt crct_gbm_genewise_pway_fprint.txt > crct_gbm_ordrd_genewise_pway_fprint.txt

diff crct_gbm_ordrd_genewise_pway_fprint.txt ../gene_pway_fingerprint/finprnt/gbm_ordrd_genewise_pway_fprint.txt | wc -l
#52

#check by putting into xl

#-------------------------------------------------

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections

#LAML;

#for each gene in a cancer, only hierarchies in which the gene participates in are listed; also, cancer genes
#which co-occur in each hierarchy are listed;
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
corct_laml_genes_pway_fingerprint_mtx.out > crct_laml_interim1.txt

#to the above file, the foll cmd adds a col indicating the minimum superpway name;
awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' crct_laml_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > crct_laml_interim2.txt

#copy laml_interim2.txt created above;
cp crct_laml_interim2.txt crct_laml_interim2at.txt

#replaced tabs with @; tab as field-separator DOES NOT WORK with unix sort;
vi crct_laml_interim2at.txt
#:1,$s/\t/@/g

#sort in ASCENDING order; k1=gene; k2=minimal suprpway name; k4=n reactions in hierarchy gene participates in;
sort --field-separator='@' -k1,1 -k2,2 -k4,4g crct_laml_interim2at.txt | sed -s 's/@/\t/g' > crct_laml_interim3.txt

awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' crct_laml_interim3.txt > crct_laml_interim4.txt

#replacing tab in above file to @; sorting: k1=gene, k7gr=DUMMY value of largest number of rns gene participates
#in in hierarchy; k2=minimal suprpway name; k12gr=TRUE number of rns gene participates in in hierarchy;
sed -e 's/\t/@/g' crct_laml_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > crct_laml_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' crct_laml_interim5.txt > crct_laml_fprint1.txt

sed -e 's/\t/@/g' crct_laml_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > crct_laml_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' crct_laml_fprint2.txt > crct_laml_genewise_pway_fprint.txt


awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
../gene_pway_fingerprint/finprnt/laml_orig_genlst.txt crct_laml_genewise_pway_fprint.txt > crct_laml_ordrd_genewise_pway_fprint.txt

diff crct_laml_ordrd_genewise_pway_fprint.txt ../gene_pway_fingerprint/finprnt/laml_ordrd_genewise_pway_fprint.txt | wc -l
#88

#check by putting into xl

#-------------------------------------------------

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections

#bmomim;

#for each gene in a cancer, only hierarchies in which the gene participates in are listed; also, cancer genes
#which co-occur in each hierarchy are listed;
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
corct_bmomim_genes_pway_fingerprint_mtx.out > crct_bmomim_interim1.txt

#to the above file, the foll cmd adds a col indicating the minimum superpway name;
awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' crct_bmomim_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > crct_bmomim_interim2.txt

#copy bmomim_interim2.txt created above;
cp crct_bmomim_interim2.txt crct_bmomim_interim2at.txt

#replaced tabs with @; tab as field-separator DOES NOT WORK with unix sort;
vi crct_bmomim_interim2at.txt
#:1,$s/\t/@/g

#sort in ASCENDING order; k1=gene; k2=minimal suprpway name; k4=n reactions in hierarchy gene participates in;
sort --field-separator='@' -k1,1 -k2,2 -k4,4g crct_bmomim_interim2at.txt | sed -s 's/@/\t/g' > crct_bmomim_interim3.txt

awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' crct_bmomim_interim3.txt > crct_bmomim_interim4.txt

#replacing tab in above file to @; sorting: k1=gene, k7gr=DUMMY value of largest number of rns gene participates
#in in hierarchy; k2=minimal suprpway name; k12gr=TRUE number of rns gene participates in in hierarchy;
sed -e 's/\t/@/g' crct_bmomim_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > crct_bmomim_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' crct_bmomim_interim5.txt > crct_bmomim_fprint1.txt

sed -e 's/\t/@/g' crct_bmomim_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > crct_bmomim_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' crct_bmomim_fprint2.txt > crct_bmomim_genewise_pway_fprint.txt


awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
../gene_pway_fingerprint/bmomim_fingerprint/bmomim_orig_genlst.txt crct_bmomim_genewise_pway_fprint.txt > crct_bmomim_ordrd_genewise_pway_fprint.txt

diff crct_bmomim_ordrd_genewise_pway_fprint.txt ../gene_pway_fingerprint/bmomim_fingerprint/bmomim_ordrd_genewise_pway_fprint.txt | wc -l
#84

#check by putting into xl

#taking all crct_*_ordrd_genewise_pway_fprint.txt to windows: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl13_pway_fingerprint.xlsx 

#-------------------------------------------------

#redoing the counting part;
#no cbio mutations for bmomim genes; hence no counting;

#pwd=/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections

cp crct_laml_ordrd_genewise_pway_fprint.txt crct_modified_laml_ordrd_genewise_pway_fprint.txt
vi crct_modified_laml_ordrd_genewise_pway_fprint.txt
#:1,$s/\t\t$/\t/

cp crct_brca_ordrd_genewise_pway_fprint.txt crct_modified_brca_ordrd_genewise_pway_fprint.txt
vi crct_modified_brca_ordrd_genewise_pway_fprint.txt
#:1,$s/\t\t$/\t/

cp crct_coadread_ordrd_genewise_pway_fprint.txt crct_modified_coadread_ordrd_genewise_pway_fprint.txt
vi crct_modified_coadread_ordrd_genewise_pway_fprint.txt
#:1,$s/\t\t$/\t/

cp crct_gbm_ordrd_genewise_pway_fprint.txt crct_modified_gbm_ordrd_genewise_pway_fprint.txt
vi crct_modified_gbm_ordrd_genewise_pway_fprint.txt
#:1,$s/\t\t$/\t/

cp crct_hnsc_ordrd_genewise_pway_fprint.txt crct_modified_hnsc_ordrd_genewise_pway_fprint.txt
vi crct_modified_hnsc_ordrd_genewise_pway_fprint.txt
#:1,$s/\t\t$/\t/

cp crct_kirc_ordrd_genewise_pway_fprint.txt crct_modified_kirc_ordrd_genewise_pway_fprint.txt
vi crct_modified_kirc_ordrd_genewise_pway_fprint.txt
#:1,$s/\t\t$/\t/

cp crct_luad_ordrd_genewise_pway_fprint.txt crct_modified_luad_ordrd_genewise_pway_fprint.txt
vi crct_modified_luad_ordrd_genewise_pway_fprint.txt
#:1,$s/\t\t$/\t/

cp crct_skcm_ordrd_genewise_pway_fprint.txt crct_modified_skcm_ordrd_genewise_pway_fprint.txt
vi crct_modified_skcm_ordrd_genewise_pway_fprint.txt
#:1,$s/\t\t$/\t/

#--------------------------------------------------

#First, ran below script for all cancers;
cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/new_total_suprpway_contrbns.awk copy4crct_new_total_suprpway_contrbns.awk

cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/arrngd_suprpways.txt copy4crct_arrngd_suprpways.txt

#pwd=/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections

vi copy4crct_new_total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
crct_modified_laml_ordrd_genewise_pway_fprint.txt
#replaced first input file name, arrngd_suprpways.txt, with copy4crct_arrngd_suprpways.txt
sh copy4crct_new_total_suprpway_contrbns.awk > right_total_suprpwaycontrbns_laml.txt

vi copy4crct_new_total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
crct_modified_brca_ordrd_genewise_pway_fprint.txt
#first input file should be copy4crct_arrngd_suprpways.txt
sh copy4crct_new_total_suprpway_contrbns.awk > right_total_suprpwaycontrbns_brca.txt

vi copy4crct_new_total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
crct_modified_coadread_ordrd_genewise_pway_fprint.txt
#first input file should be copy4crct_arrngd_suprpways.txt
sh copy4crct_new_total_suprpway_contrbns.awk > right_total_suprpwaycontrbns_coadread.txt

vi copy4crct_new_total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
crct_modified_gbm_ordrd_genewise_pway_fprint.txt
#first input file should be copy4crct_arrngd_suprpways.txt
sh copy4crct_new_total_suprpway_contrbns.awk > right_total_suprpwaycontrbns_gbm.txt

vi copy4crct_new_total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
crct_modified_hnsc_ordrd_genewise_pway_fprint.txt
#first input file should be copy4crct_arrngd_suprpways.txt
sh copy4crct_new_total_suprpway_contrbns.awk > right_total_suprpwaycontrbns_hnsc.txt

vi copy4crct_new_total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
crct_modified_kirc_ordrd_genewise_pway_fprint.txt
#first input file should be copy4crct_arrngd_suprpways.txt
sh copy4crct_new_total_suprpway_contrbns.awk > right_total_suprpwaycontrbns_kirc.txt

vi copy4crct_new_total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
crct_modified_luad_ordrd_genewise_pway_fprint.txt
#first input file should be copy4crct_arrngd_suprpways.txt
sh copy4crct_new_total_suprpway_contrbns.awk > right_total_suprpwaycontrbns_luad.txt

vi copy4crct_new_total_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
crct_modified_skcm_ordrd_genewise_pway_fprint.txt
#first input file should be copy4crct_arrngd_suprpways.txt
sh copy4crct_new_total_suprpway_contrbns.awk > right_total_suprpwaycontrbns_skcm.txt

#--------------------------------------------------

#Next, ran below script for all cancers;
cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/new_total_gene_suprpway_contrbns.awk copy4crct_new_total_gene_suprpway_contrbns.awk

#edited the file to uncomment the second-last print statement; 
vi copy4crct_new_total_gene_suprpway_contrbns.awk
#also, replaced existing second input file name with the foll file name: 
crct_modified_laml_ordrd_genewise_pway_fprint.txt
#replaced arrngd_suprpways.txt with copy4crct_arrngd_suprpways.txt
sh copy4crct_new_total_gene_suprpway_contrbns.awk > right_total_genesuprpwaycontrbns_laml.txt

vi copy4crct_new_total_gene_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
crct_modified_brca_ordrd_genewise_pway_fprint.txt
sh copy4crct_new_total_gene_suprpway_contrbns.awk > right_total_genesuprpwaycontrbns_brca.txt

vi copy4crct_new_total_gene_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
crct_modified_coadread_ordrd_genewise_pway_fprint.txt
sh copy4crct_new_total_gene_suprpway_contrbns.awk > right_total_genesuprpwaycontrbns_coadread.txt

vi copy4crct_new_total_gene_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
crct_modified_gbm_ordrd_genewise_pway_fprint.txt
sh copy4crct_new_total_gene_suprpway_contrbns.awk > right_total_genesuprpwaycontrbns_gbm.txt

vi copy4crct_new_total_gene_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
crct_modified_hnsc_ordrd_genewise_pway_fprint.txt
sh copy4crct_new_total_gene_suprpway_contrbns.awk > right_total_genesuprpwaycontrbns_hnsc.txt

vi copy4crct_new_total_gene_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
crct_modified_kirc_ordrd_genewise_pway_fprint.txt
sh copy4crct_new_total_gene_suprpway_contrbns.awk > right_total_genesuprpwaycontrbns_kirc.txt

vi copy4crct_new_total_gene_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
crct_modified_luad_ordrd_genewise_pway_fprint.txt
sh copy4crct_new_total_gene_suprpway_contrbns.awk > right_total_genesuprpwaycontrbns_luad.txt

vi copy4crct_new_total_gene_suprpway_contrbns.awk
#replaced existing second input file name with the foll file name: 
crct_modified_skcm_ordrd_genewise_pway_fprint.txt
sh copy4crct_new_total_gene_suprpway_contrbns.awk > right_total_genesuprpwaycontrbns_skcm.txt

#--------------------------------------------------

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections

#LAML
#only the third part of each total file needs to be sorted; so edited each total file to retain
#only the third part;   
cp right_total_suprpwaycontrbns_laml.txt right_forsort_suprpwaycontrbns_laml.txt
vi right_forsort_suprpwaycontrbns_laml.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' right_forsort_suprpwaycontrbns_laml.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > right_laml_suprpwaytotals_sortd.txt

diff right_laml_suprpwaytotals_sortd.txt ../gene_pway_fingerprint/finprnt/totldir/new_laml_suprpwaytotals_sortd.txt

cp right_total_genesuprpwaycontrbns_laml.txt right_forsort_genesuprpwaycontrbns_laml.txt
vi right_forsort_genesuprpwaycontrbns_laml.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' right_forsort_genesuprpwaycontrbns_laml.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > right_forsort2_genesuprpwaycontrbns_laml.txt

#Rearranging laml_genesuprpwaytotals_sortd.txt
cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/totldir/arrngd_ordr_suprway.sh copy4crct_arrngd_ordr_suprway.sh
sh copy4crct_arrngd_ordr_suprway.sh right_forsort2_genesuprpwaycontrbns_laml.txt > right_laml_genesuprpwaytotals_sortd.txt

diff right_laml_genesuprpwaytotals_sortd.txt ../gene_pway_fingerprint/finprnt/totldir/new_laml_genesuprpwaytotals_sortd.txt

#BRCA
#only the third part of each total file needs to be sorted; so edited each total file to retain
#only the third part;   
cp right_total_suprpwaycontrbns_brca.txt right_forsort_suprpwaycontrbns_brca.txt
vi right_forsort_suprpwaycontrbns_brca.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' right_forsort_suprpwaycontrbns_brca.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > right_brca_suprpwaytotals_sortd.txt

diff right_brca_suprpwaytotals_sortd.txt ../gene_pway_fingerprint/finprnt/totldir/new_brca_suprpwaytotals_sortd.txt

cp right_total_genesuprpwaycontrbns_brca.txt right_forsort_genesuprpwaycontrbns_brca.txt
vi right_forsort_genesuprpwaycontrbns_brca.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' right_forsort_genesuprpwaycontrbns_brca.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > right_forsort2_genesuprpwaycontrbns_brca.txt

#Rearranging brca_genesuprpwaytotals_sortd.txt
sh copy4crct_arrngd_ordr_suprway.sh right_forsort2_genesuprpwaycontrbns_brca.txt > right_brca_genesuprpwaytotals_sortd.txt

diff right_brca_genesuprpwaytotals_sortd.txt ../gene_pway_fingerprint/finprnt/totldir/new_brca_genesuprpwaytotals_sortd.txt

#COADREAD
#only the third part of each total file needs to be sorted; so edited each total file to retain
#only the third part;   
cp right_total_suprpwaycontrbns_coadread.txt right_forsort_suprpwaycontrbns_coadread.txt
vi right_forsort_suprpwaycontrbns_coadread.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' right_forsort_suprpwaycontrbns_coadread.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > right_coadread_suprpwaytotals_sortd.txt

diff right_coadread_suprpwaytotals_sortd.txt ../gene_pway_fingerprint/finprnt/totldir/new_coadread_suprpwaytotals_sortd.txt

cp right_total_genesuprpwaycontrbns_coadread.txt right_forsort_genesuprpwaycontrbns_coadread.txt
vi right_forsort_genesuprpwaycontrbns_coadread.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' right_forsort_genesuprpwaycontrbns_coadread.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > right_forsort2_genesuprpwaycontrbns_coadread.txt

#Rearranging coadread_genesuprpwaytotals_sortd.txt
sh copy4crct_arrngd_ordr_suprway.sh right_forsort2_genesuprpwaycontrbns_coadread.txt > right_coadread_genesuprpwaytotals_sortd.txt

diff right_coadread_genesuprpwaytotals_sortd.txt ../gene_pway_fingerprint/finprnt/totldir/new_coadread_genesuprpwaytotals_sortd.txt

#GBM
#only the third part of each total file needs to be sorted; so edited each total file to retain
#only the third part;   
cp right_total_suprpwaycontrbns_gbm.txt right_forsort_suprpwaycontrbns_gbm.txt
vi right_forsort_suprpwaycontrbns_gbm.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' right_forsort_suprpwaycontrbns_gbm.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > right_gbm_suprpwaytotals_sortd.txt

diff right_gbm_suprpwaytotals_sortd.txt ../gene_pway_fingerprint/finprnt/totldir/new_gbm_suprpwaytotals_sortd.txt

cp right_total_genesuprpwaycontrbns_gbm.txt right_forsort_genesuprpwaycontrbns_gbm.txt
vi right_forsort_genesuprpwaycontrbns_gbm.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' right_forsort_genesuprpwaycontrbns_gbm.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > right_forsort2_genesuprpwaycontrbns_gbm.txt

#Rearranging gbm_genesuprpwaytotals_sortd.txt
sh copy4crct_arrngd_ordr_suprway.sh right_forsort2_genesuprpwaycontrbns_gbm.txt > right_gbm_genesuprpwaytotals_sortd.txt

diff right_gbm_genesuprpwaytotals_sortd.txt ../gene_pway_fingerprint/finprnt/totldir/new_gbm_genesuprpwaytotals_sortd.txt

#HNSC
#only the third part of each total file needs to be sorted; so edited each total file to retain
#only the third part;   
cp right_total_suprpwaycontrbns_hnsc.txt right_forsort_suprpwaycontrbns_hnsc.txt
vi right_forsort_suprpwaycontrbns_hnsc.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' right_forsort_suprpwaycontrbns_hnsc.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > right_hnsc_suprpwaytotals_sortd.txt

diff right_hnsc_suprpwaytotals_sortd.txt ../gene_pway_fingerprint/finprnt/totldir/new_hnsc_suprpwaytotals_sortd.txt

cp right_total_genesuprpwaycontrbns_hnsc.txt right_forsort_genesuprpwaycontrbns_hnsc.txt
vi right_forsort_genesuprpwaycontrbns_hnsc.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' right_forsort_genesuprpwaycontrbns_hnsc.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > right_forsort2_genesuprpwaycontrbns_hnsc.txt

#Rearranging hnsc_genesuprpwaytotals_sortd.txt
sh copy4crct_arrngd_ordr_suprway.sh right_forsort2_genesuprpwaycontrbns_hnsc.txt > right_hnsc_genesuprpwaytotals_sortd.txt

diff right_hnsc_genesuprpwaytotals_sortd.txt ../gene_pway_fingerprint/finprnt/totldir/new_hnsc_genesuprpwaytotals_sortd.txt

#KIRC
#only the third part of each total file needs to be sorted; so edited each total file to retain
#only the third part;   
cp right_total_suprpwaycontrbns_kirc.txt right_forsort_suprpwaycontrbns_kirc.txt
vi right_forsort_suprpwaycontrbns_kirc.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' right_forsort_suprpwaycontrbns_kirc.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > right_kirc_suprpwaytotals_sortd.txt

diff right_kirc_suprpwaytotals_sortd.txt ../gene_pway_fingerprint/finprnt/totldir/new_kirc_suprpwaytotals_sortd.txt

cp right_total_genesuprpwaycontrbns_kirc.txt right_forsort_genesuprpwaycontrbns_kirc.txt
vi right_forsort_genesuprpwaycontrbns_kirc.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' right_forsort_genesuprpwaycontrbns_kirc.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > right_forsort2_genesuprpwaycontrbns_kirc.txt

#Rearranging kirc_genesuprpwaytotals_sortd.txt
sh copy4crct_arrngd_ordr_suprway.sh right_forsort2_genesuprpwaycontrbns_kirc.txt > right_kirc_genesuprpwaytotals_sortd.txt

diff right_kirc_genesuprpwaytotals_sortd.txt ../gene_pway_fingerprint/finprnt/totldir/new_kirc_genesuprpwaytotals_sortd.txt

#LUAD
#only the third part of each total file needs to be sorted; so edited each total file to retain
#only the third part;   
cp right_total_suprpwaycontrbns_luad.txt right_forsort_suprpwaycontrbns_luad.txt
vi right_forsort_suprpwaycontrbns_luad.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' right_forsort_suprpwaycontrbns_luad.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > right_luad_suprpwaytotals_sortd.txt

diff right_luad_suprpwaytotals_sortd.txt ../gene_pway_fingerprint/finprnt/totldir/new_luad_suprpwaytotals_sortd.txt

cp right_total_genesuprpwaycontrbns_luad.txt right_forsort_genesuprpwaycontrbns_luad.txt
vi right_forsort_genesuprpwaycontrbns_luad.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' right_forsort_genesuprpwaycontrbns_luad.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > right_forsort2_genesuprpwaycontrbns_luad.txt

#Rearranging luad_genesuprpwaytotals_sortd.txt
sh copy4crct_arrngd_ordr_suprway.sh right_forsort2_genesuprpwaycontrbns_luad.txt > right_luad_genesuprpwaytotals_sortd.txt

diff right_luad_genesuprpwaytotals_sortd.txt ../gene_pway_fingerprint/finprnt/totldir/new_luad_genesuprpwaytotals_sortd.txt

#SKCM
#only the third part of each total file needs to be sorted; so edited each total file to retain
#only the third part;   
cp right_total_suprpwaycontrbns_skcm.txt right_forsort_suprpwaycontrbns_skcm.txt
vi right_forsort_suprpwaycontrbns_skcm.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' right_forsort_suprpwaycontrbns_skcm.txt | \
sed -e 's/\t/@/g' -e 's/ //' | sort --field-separator=@ -k3,3gr | sed -e 's/@/\t/g' > right_skcm_suprpwaytotals_sortd.txt

diff right_skcm_suprpwaytotals_sortd.txt ../gene_pway_fingerprint/finprnt/totldir/new_skcm_suprpwaytotals_sortd.txt

cp right_total_genesuprpwaycontrbns_skcm.txt right_forsort_genesuprpwaycontrbns_skcm.txt
vi right_forsort_genesuprpwaycontrbns_skcm.txt
#deleted first and second set of lines; retained only third set of lines;

awk -F"\t" '{IFS=OFS="\t"}{$3=sprintf("%.2f",$3)}1' right_forsort_genesuprpwaycontrbns_skcm.txt | \
sed -e 's/\t/@/g' | sort --field-separator=@ -k2,2 -k3,3gr | sed -e 's/@/\t/g' > right_forsort2_genesuprpwaycontrbns_skcm.txt

#Rearranging skcm_genesuprpwaytotals_sortd.txt
sh copy4crct_arrngd_ordr_suprway.sh right_forsort2_genesuprpwaycontrbns_skcm.txt > right_skcm_genesuprpwaytotals_sortd.txt

diff right_skcm_genesuprpwaytotals_sortd.txt ../gene_pway_fingerprint/finprnt/totldir/new_skcm_genesuprpwaytotals_sortd.txt


#took the above files (e.g., right_total_genesuprpwaycontrbns_skcm.txt, right_skcm_suprpwaytotals_sortd.txt, right_skcm_genesuprpwaytotals_sortd.txt)
#to windows, and tabulated them in the foll excel file:  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways\pway_fingerprint_matrix\totalfiles\totals.xlsx

--------------------------------------------------

#generating tables after totals tables; 

#generating a table which lists superpways in descending order of superpway totals; 
#and for each superpway, lists the significantly contributing genes;

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections

cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/totldir/get_allcan_gene_suprpway_contrbns.sh ok_get_allcan_gene_suprpway_contrbns.sh

vi ok_get_allcan_gene_suprpway_contrbns.sh
#:1,$s/new_/right_/g

sort -k2,2 ok_get_allcan_gene_suprpway_contrbns.sh | grep -v "echo" | sed -e 's/$/ | wc -l/' | awk '{print $0 " " $0}' | \
sed -e 's/grep/echo -n -e/' -e 's/" right_/  /' -e 's/_genesuprpwaytotals_sortd\.txt/  "/' -e 's/ | wc -l/ ;/' | \
sed -e 's/Metabolism"/Metabolism \("/' > ok_for_neat_tbl_allcan_g_s_contrbns.sh

#for checking; 
head -5 ok_for_neat_tbl_allcan_g_s_contrbns.sh ../gene_pway_fingerprint/finprnt/totldir/for_neat_tbl_allcan_g_s_contrbns.sh

sh ok_for_neat_tbl_allcan_g_s_contrbns.sh | awk '{print $NF,$0}' | sed -e 's/Metabolism of RNA/Metabolism_of_RNA/' -e 's/Metabolism of proteins/Metabolism_of_proteins/' | sort -k2,2 -k1,1rn | cut -f2- -d' ' > ok_info_for_neat_tbl.txt

#from info_for_neat_tbl.txt, you get foll informn; 
Chromatin organization  coadread  31  (Chrom org ends on line 31)
DNA Repair  coadread  40  (DNA Repair ends on line 31 + 40 = 71)
DNA Replication  brca  2  (DNA Replication ends on line 71 + 2 = 73)
Cell Cycle  coadread  41                                   (114)
Cell-Cell communication  coadread  10                      (124)
Extracellular matrix organization  luad  5                 (129)
Organelle biogenesis and maintenance  coadread  5          (134)
Transport of small molecules  coadread  6                  (140)
Autophagy  brca  7                                         (147)
Protein localization  brca  2                              (149)
Vesicle-mediated transport  brca  13                       (162)
Reproduction  luad  17                                     (179)
Developmental Biology  skcm  58                            (237)
Muscle contraction  laml  2                                (239)
Neuronal System  skcm  12                                  (251)
Sensory Perception  coadread  3                            (254)
Circadian Clock  gbm  5                                    (259)
Metabolism  brca  27                                       (286)
Metabolism_of_RNA  brca  11                                (297)
Metabolism_of_proteins  coadread  61                       (358)
Hemostasis  luad  30                                       (388)
Immune System  skcm  69                                    (457)
Programmed Cell Death  brca  13                            (470)
Cellular responses to stimuli  skcm  35                    (505)
Signal Transduction  skcm  122                             (627)
Gene expression  coadread  106                             (733)
Disease  skcm  116                                         (849)

cp right_kirc_genesuprpwaytotals_sortd.txt ok_neattblkirc_genesuprpwaytotals_sortd.txt
vi ok_neattblkirc_genesuprpwaytotals_sortd.txt
#inserted blank lines so that, for e.g., for Chromatin organization, there are are total of 31 lines,
#and DNA Repair ends at 31+40=71 lines; etc..
cp right_coadread_genesuprpwaytotals_sortd.txt ok_neattblcoadread_genesuprpwaytotals_sortd.txt
vi ok_neattblcoadread_genesuprpwaytotals_sortd.txt
cp right_brca_genesuprpwaytotals_sortd.txt ok_neattblbrca_genesuprpwaytotals_sortd.txt
vi ok_neattblbrca_genesuprpwaytotals_sortd.txt
cp right_gbm_genesuprpwaytotals_sortd.txt ok_neattblgbm_genesuprpwaytotals_sortd.txt
vi ok_neattblgbm_genesuprpwaytotals_sortd.txt
cp right_hnsc_genesuprpwaytotals_sortd.txt ok_neattblhnsc_genesuprpwaytotals_sortd.txt
vi ok_neattblhnsc_genesuprpwaytotals_sortd.txt
cp right_luad_genesuprpwaytotals_sortd.txt ok_neattblluad_genesuprpwaytotals_sortd.txt
vi ok_neattblluad_genesuprpwaytotals_sortd.txt
cp right_skcm_genesuprpwaytotals_sortd.txt ok_neattblskcm_genesuprpwaytotals_sortd.txt
vi ok_neattblskcm_genesuprpwaytotals_sortd.txt
cp right_laml_genesuprpwaytotals_sortd.txt ok_neattbllaml_genesuprpwaytotals_sortd.txt
vi ok_neattbllaml_genesuprpwaytotals_sortd.txt


#The output files ok_neattbl_*_genesuprpwaytotals_sortd.txt were tabulated in:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl16_new_totals.xlsx
#sheet = ok_neattbl_edited_gsp_totals

--------------------------------------------------

#Decided to MANUALLY select the important genes from the xl table; 

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections

vi ok_inp_maingenes_chromatin_organizn.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file, 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl16_new_totals.xlsx
#sheet = ok_neattbl_edited_gsp_totals
#:1,$s/_/\t/
echo "Main drivers in Chromatin organization\tn(cancers)" > ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_chromatin_organizn.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_dna_repair.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in DNA Repair\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_dna_repair.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_dna_replicn.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in DNA Replication\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_dna_replicn.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_cell_cycle.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Cell Cycle\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_cell_cycle.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_cell_cell_communcn.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Cell-Cell communication\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_cell_cell_communcn.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_extracell_mtx_organizn.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Extracellular matrix organization\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_extracell_mtx_organizn.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_organelle_biogen_maintnce.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Organelle biogenesis and maintenance\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_organelle_biogen_maintnce.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_transport_small_molec.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Transport of small molecules\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_transport_small_molec.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_autophagy.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Autophagy\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_autophagy.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_protein_localizn.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Protein localization\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_protein_localizn.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_vesicle_mediatd_transp.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Vesicle-mediated transport\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_vesicle_mediatd_transp.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_reproductn.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Reproduction\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_reproductn.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_devlpmntal_biol.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Developmental Biology\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_devlpmntal_biol.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_muscle_contrcn.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Muscle contraction\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_muscle_contrcn.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_neuronal_systm.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Neuronal System\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_neuronal_systm.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_sensory_percpn.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Sensory Perception\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_sensory_percpn.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_circadn_clock.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Circadian Clock\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_circadn_clock.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_metabolism.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Metabolism\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_metabolism.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_metabolism_rna.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Metabolism of RNA\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_metabolism_rna.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_metabolism_protns.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Metabolism of proteins\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_metabolism_protns.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_hemostasis.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Hemostasis\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_hemostasis.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_immune_sys.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Immune System\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_immune_sys.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_prog_cell_death.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Programmed Cell Death\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_prog_cell_death.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_cellular_resp_stimuli.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Cellular responses to stimuli\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_cellular_resp_stimuli.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_signal_transd.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Signal Transduction\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_signal_transd.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_gene_exprssn.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Gene expression\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_gene_exprssn.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

vi ok_inp_maingenes_disease.txt
#copied and pasted the imp genes (marked in red) for the suprpway from xl file 
#:1,$s/_/\t/
echo "Main drivers in Disease\tn(cancers)" >> ok_main_genes_in_each_suprpway.txt
sort -k1,1r ok_inp_maingenes_disease.txt | awk -F"\t" '{print $1}' | uniq -c | sort -k1,1r | \
awk -F" " '{print $2 "\t" $1}' >> ok_main_genes_in_each_suprpway.txt

#you need some idea which genes have the highest score in the suprpway;
cp ok_main_genes_in_each_suprpway.txt ok_main_genes_topmarked_in_each_suprpway.txt
vi ok_main_genes_topmarked_in_each_suprpway.txt
vi ok_inp_maingenes_all_for_topmarking.txt
#i esc !!
#ls -1 ok_inp_maingenes_*.txt
#arranged the ok_inp file names in the order in which the suprpways appear in the xl sheet,
#ok_neattbl_edited_gsp_totals; next, used cat to list out the contents of each input file; e.g.,
#cat ok_inp_maingenes_chromatin_organizn.txt
#after getting all the ok_inp_maingenes files into this file, made a copy of this file
#(ok_inp_maingenes_all_for_topmarking.txt) and called it ok_xtr_inp_maingenes_all_for_topmarking.txt;
cp ok_inp_maingenes_all_for_topmarking.txt ok_xtr_inp_maingenes_all_for_topmarking.txt
vi ok_inp_maingenes_all_for_topmarking.txt
#edited the file (ok_inp_maingenes_all_for_topmarking.txt) to retain only the first (topmost) gene
#for each suprpway for each cancer; also retained the second or third, etc., values, if they appeared large;

#used foll two files to complete marking of the topmost genes in each suprpway;
vi ok_main_genes_topmarked_in_each_suprpway.txt
vi ok_inp_maingenes_all_for_topmarking.txt
#Took file main_genes_topmarked_in_each_suprpway.txt and displayed it in xl;

#Approximately, did the foll to speed things up, and avoid manually making marks all over again in the 
#ok_main_genes_top_marked_in_each_suprpway.txt
#copied OLD ../gene_pway_fingerprint/finprnt/totldir/main_genes_topmarked_in_each_suprpway.txt to pwd as old_topmarked.txt 
#manually compared NEW ok_main_genes_topmarked_in_each_suprpway.txt with old_topmarked.txt; i.e., matched the genes and 
#entered blank lines where necessary in both files;

#did a paste;
paste ok_main_genes_topmarked_in_each_suprpway.txt old_topmarked.txt > junky
awk -F"\t" '{IFS=OFS="\t"}{print $1 OFS $2 OFS $5 OFS $3 OFS $4 OFS $5}' junky > usefulout.txt

#then, in two windows, compared ok_inp_maingenes_all_for_topmarking.txt and usefulout.txt to check and 
#correct usefulout.txt; 

mv ok_main_genes_topmarked_in_each_suprpway.txt sav_ok_main_genes_topmarked_in_each_suprpway.txt
awk -F"\t" '{IFS=OFS="\t"}{print $1 OFS $2 OFS $3}' usefulout.txt > ok_main_genes_topmarked_in_each_suprpway.txt

-------------------------------------------------

#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections


#created the foll file to get, for each cancer, suprpways and corresponding gene contributions in decreasing order;
cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/finprnt/totldir/get_allcan_gene_suprpway_contrbns.sh copy_get_allcan_gene_suprpway_contrbns.sh
cp copy_get_allcan_gene_suprpway_contrbns.sh yes_get2_allcan_gene_suprpway_contrbns.sh
vi yes_get2_allcan_gene_suprpway_contrbns.sh
#:1,$s/"Metabolism" /"Metabolism (R-HSA-" /g
#:1,$s/new_/right_/g
#replace "Metabolism" with "Metabolism (R-HSA-"; otherwise, for search term "Metabolism", "Metabolism of RNA" and 
#"Metabolism of proteins" will be pulled out; 

sh yes_get2_allcan_gene_suprpway_contrbns.sh | \
awk -F"\t" '{IFS=OFS="\t"}{print $2 OFS $1 OFS $3}' > yes_allcan_gene_suprpway_contrbns.txt

#Taking yes_allcan_gene_suprpway_contrbns.txt to xl;  
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl16_new_totals.xlsx
#sheet = yes_allcan_gene_suprpway_contrb

#to identify the genes for which networks have to be created the foll 2 files have to be used:

#manually, by cut and paste from the above xl sheet (yes_allcan_gene_suprpway_contrb), creating the file, 
#yes_main_genes_in_each_can_suprpway.txt; in this file, for each cancer and each suprpway in the cancer, 
#only those genes whose scores look significant (by eye) in the xl sheet have been cut and pasted;  
#the aim is to identify genes for which creating networks might yield interesting informn.  
#done for: brca
#likewise, for coadread, copied from above xl sheet, those genes whose scores looked significant (and  
#which have been marked in red), and pasted them into main_genes_in_each_can_suprpway.txt; 
#done for: gbm, hnsc, kirc, laml, luad, skcm
vi yes_main_genes_in_each_can_suprpway.txt

#foll cmd removes (R-HSA-...) from suprpway name;
sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)/\t\1/' yes_main_genes_in_each_can_suprpway.txt | awk -F"\t" '{IFS=OFS="\t"}(NF==3){print $0}(NF==4){print $1 OFS $3 OFS $4}' > yes_main_genes_xl_can_suprpway.txt

#took yes_main_genes_xl_can_suprpway.txt to windows and opened in:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl16_new_totals.xlsx
#sheet = yes_main_genes_xl_can_suprpway

#from the sheet yes_main_genes_xl_can_suprpway, another sheet (yes_only_main_genes) was created, containing only the 
#highest scoring genes; this list of genes was EXACTLY THE SAME as the one obtained before (i.e., obtained in the 
#original run, and before corrections during writing); hence used the old sheet (sorted21_list_genes_for_net) as such; 

--------------------------------------------------

#generating a matrix of fingerprints for all 861 genes in matrix of genes and reactions; 

############################################################
############################################################
############################################################

# MASTERFILE12 generates pathway fingerprints for all cancer genes, irrespective of whether 
#they are mutated or not;

#12) MASTERFILE12 = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/cmd11_generating_pwayfp_862cangenes.sh

#took help of following files to put together commands below to generate pway fp
#for 859 cancer genes:
#/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/cmd4_forwriteup_modified_13may2023.sh  (generating 
#prep onlyhier files)
#/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/cmd5_counting.sh   (pway fp for bmomim genes)
#/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/cmd9_corrections_pwayfprint_tbls.sh  (latest or correct cmds, post-GNAS
#correction)


#working in the foll area; 
#pwd = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections/fp862

#more /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/list_862_oncokb_genes.txt
cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/list_862_oncokb_genes.txt cg_859.txt
#sorting (below) showed that there are: 2 GNAS, 2 CUX1, 2 CDKN2A entries; hence, there are 862 - 3 = 859 unique genes;
sort /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/list_862_oncokb_genes.txt | uniq -c | sort -nr | more

#deleted 1 GNAS, 1 CUX1, 1 CDKN2A gene lines;
vi cg_859.txt
#manually deleted the above 3 lines;

paste -d"\t" cg_859.txt cg_859.txt > temppairlst.txt

cp /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections/corct_prep_coadread_fingerprint_onlyhier.sh temp_corct_prep_cg859_fingerprint_onlyhier.sh

awk -F"; " '{print $2}' temp_corct_prep_cg859_fingerprint_onlyhier.sh | awk -F"&& " '{print $1}' > temp_suprpway_part.txt
#coadread has 281 genes; cg859 has 859; 859 - 281 = 578 genes; thus, edit temp_suprpway_part.txt, and do 281yy followed 
#by  p,p for each suprpway (i.e., add 281+281 = 562 lines for each suprpway); then, go back to beginning of file, and do 
#16yy followed by p for each suprpway (i.e., add 16 more lines for each suprpway; i.e., add a total of 578 lines for each 
#suprpway); 
vi temp_suprpway_part.txt
#go to 1st line of Autophagy; 281yy, p, p
#/^
#go to 1st line of Cell-Cell communication; 281yy, p, p 
#n
#keep going;
#then, go back to 1st line Autophagy; 16 yy, p
#n
#go to 1st line of Cell-Cell communication; 16yy, p
#n
#keep going; 

vi templeftecho.txt 
#i esc !! cat cg_859.txt
#:1,$s/^/echo -e -n "/
#:1,$s/$/\\t"; /
#:$
#o        #paste foll line;
#echo -e "#--------------------------------------------------"
#:1
#860yy 
#:$ 
#p 
#:$
#p
#paste 27 times;

paste -d" " templeftecho.txt temp_suprpway_part.txt > temp_echoleft_suprpwaypart.txt
vi temp_echoleft_suprpwaypart.txt
#:1,$s/;  awk/; awk/

vi temp_third_part.txt
#i esc !! cat temppairlst.txt 
#:1,$s/^/ \&\& (\$2 \~ \//
#:1,$s/\t/ \\(\/)){print "/
#:1,$s/$/\\t" \$1}' cols1_2_all_suprpway_trees_oncokb_genes.txt; echo "";/
#:$
#o        #adding blank line
#:1
#860yy
#:$
#p
#:$
#p        #repeat 27 times

paste -d" " temp_echoleft_suprpwaypart.txt temp_third_part.txt > corct_prep_cg859_fingerprint_onlyhier.sh
vi corct_prep_cg859_fingerprint_onlyhier.sh
#:1,$s/)   /) /
#:1,$s/(\$2 \~ \//(\$2 \~ \/ /      ###THIS IS AN IMPORTANT CORRECTION (it was incorporated AFTER THE oncokb part ..... 
#:1,$s/cols1_2_all_suprpway_trees_oncokb_genes\.txt/\.\.\/corct_cols1_2_all_suprpway_trees_oncokb_genes\.txt/

cp corct_prep_cg859_fingerprint_onlyhier.sh corct_prep_addnl_cg859_fingerprint_onlyhier.sh

vi corct_prep_addnl_cg859_fingerprint_onlyhier.sh
#:1,$s/\$1}' /"(" \$2}' /
#:1,$s/txt; echo "";/txt | awk -F"\\t|, " '{for \(i=1; i<=NF; i++){if \(\$i \~ \//
#:wq

cp cg_859.txt tmp_duplicate.txt
vi tmp_duplicate.txt
#:$        #go to last line
#o         #insert blank line
#esc
#:1        #go to first line
#860yy
#:$
#p
#repeat to get a total of 28 times, for 28 suprpways;

paste -d"\t" corct_prep_addnl_cg859_fingerprint_onlyhier.sh tmp_duplicate.txt > tmpp.txt
vi tmpp.txt
#:1,$s/\/\t/\//
#:1,$s/$/ \\(\/) print \$i}}'/
#:1,$s/\t \\(\/) print \$i}}'//
#:1,$s/}}'/}}' ; echo "" ;/
#:wq

cp tmpp.txt corct_prep_addnl_cg859_fingerprint_onlyhier.sh

sh corct_prep_cg859_fingerprint_onlyhier.sh | grep -v ^$ > junk1.txt
sh corct_prep_addnl_cg859_fingerprint_onlyhier.sh | grep -v ^$ > junk2.txt

paste -d"\t" junk1.txt junk2.txt > junk3.txt
awk -F"\t" '(NF==5){print $5 "\t" $3 "|"}(NF==3){print $3 "\t" $2 "|"}' junk3.txt > junk4.txt
vi junk4.txt
#:1,$s/\t[0-9]\{1,3\}|/\t|/
#:1,$s/(//
#:1,$s/)\t|/|/
#:1,$s/ /\t/

mv junk4.txt corct_rncount_hier_cg859_genes.txt

#foll is a necessary input file for matrix program;
/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/all_reactome_hierarchies.txt

#second input file for matrix program is created as follows:
cp cg_859.txt cg859_no_mutns.txt 
vi cg859_no_mutns.txt
#:1,$s/$/\t0/

paste -d"\t" cg859_no_mutns.txt cg_859.txt > corct_prep_cg859_infile_gene_pway_fingerprint.sh  
vi corct_prep_cg859_infile_gene_pway_fingerprint.sh
#:1,$s/^/echo "/
#:1,$s/\t/_(/
#:1,$s/\t/)" ; \t/
#:1,$s/\t/awk -F"\\t" '(\$1 \~ \/^/
#:1,$s/$/\$\/) \&\& ((\$2 \~ \/[0-9]\/))' corct_rncount_hier_cg859_genes.txt/

sh corct_prep_cg859_infile_gene_pway_fingerprint.sh | awk -F"\t" '(NF==1){print}(NF==2){print $2}' > corct_gene_wise_hierarchies_cg859.txt

#running matrix program;
perl /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/gene_pway_fingerprint_mtx.pl /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/gene_pway_fingerprint/all_reactome_hierarchies.txt corct_gene_wise_hierarchies_cg859.txt corct_cg859_genes_pway_fingerprint_mtx.out

#have to make format of output file suitable for xl;
vi corct_cg859_genes_pway_fingerprint_mtx.out
#:1,1s/ /\t/g
#:1,1s/\t\t\t\t\t\t\t\t/\t/
#:2,$s/     /\t/g

#Took this file to windows;
D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\corct_cg859_genes_pway_fingerprint_mtx.out

#cg859

#for each gene, only hierarchies in which the gene participates in are listed; also, cancer genes
#which co-occur in each hierarchy are listed;
awk -F"\t" '{IFS=OFS="\t"} { if(max_nf < NF) max_nf=NF; max_nr=NR; for (i=1; i<=NF; i++) mtx[i,NR] = $i} \
END {for (icol=1; icol<max_nf; icol++) {for (jrow=1; jrow<=max_nr; jrow++) \
{if ((jrow==1)&&(icol>1)) genenm_mutn = mtx[icol,jrow]; \
if ((icol>1)&&(jrow>1)&&(mtx[icol,jrow]>0)){printf genenm_mutn OFS mtx[1,jrow] OFS mtx[icol,jrow] OFS; \
krow=jrow; for (kcol=1; kcol<max_nf; kcol++) \
{if ((kcol>1)&&(mtx[kcol,krow]>0))printf mtx[kcol,1] "_" mtx[kcol,krow] OFS;} printf mtx[max_nf,krow] "\n"; }}}}' \
corct_cg859_genes_pway_fingerprint_mtx.out > crct_cg859_interim1.txt

#to the above file, the foll cmd adds a col indicating the minimum superpway name;
awk -F"\t" '{IFS=OFS="\t"}{x=$1; $1=""; print x OFS $2 OFS $0}' crct_cg859_interim1.txt | sed -e 's/\(\t\)[0-9]\{1,3\}|/\1/' -e 's/ \((R-HSA-\)/\t\1/' -e 's/\t\t/\t/g' | awk -F"\t" '{IFS=OFS="\t"}{$3=""; print $0}' | sed 's/\t\t/\t/g' > crct_cg859_interim2.txt

#copy cg859_interim2.txt created above;
cp crct_cg859_interim2.txt crct_cg859_interim2at.txt

#replaced tabs with @; tab as field-separator DOES NOT WORK with unix sort;
vi crct_cg859_interim2at.txt
#:1,$s/\t/@/g

#sort in ASCENDING order; k1=gene; k2=minimal suprpway name; k4=n reactions in hierarchy gene participates in;
sort --field-separator='@' -k1,1 -k2,2 -k4,4g crct_cg859_interim2at.txt | sed -s 's/@/\t/g' > crct_cg859_interim3.txt

awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} {i++; b[i]=$1 OFS $2; c[i]=$0; fullarrsiz=i; key1=$1 OFS $2; \
a[key1]=$4; keyarrsiz=length(a);} END { for (j=1; j<=fullarrsiz; j++) { for (k1 in a) {if ((b[j] == k1))\
{print b[j],"xxx", k1, "yyy", a[k1], "zzz", c[j]}}}}' crct_cg859_interim3.txt > crct_cg859_interim4.txt

#replacing tab in above file to @; sorting: k1=gene, k7gr=DUMMY value of largest number of rns gene participates
#in in hierarchy; k2=minimal suprpway name; k12gr=TRUE number of rns gene participates in in hierarchy;
sed -e 's/\t/@/g' crct_cg859_interim4.txt | sort --field-separator='@' -k1,1 -k7,7gr -k2,2 -k12,12gr |\
sed -e 's/@/\t/g' > crct_cg859_interim5.txt

awk -F"\t" '{IFS=OFS="\t"}{printf $9 OFS; {for (i=11; i<=NF; i++) {printf $i OFS}} print"";}' crct_cg859_interim5.txt > crct_cg859_fprint1.txt

sed -e 's/\t/@/g' crct_cg859_fprint1.txt | sed -e 's/@/\t/' -e 's/@/\t/' -e 's/@/,/g' > crct_cg859_fprint2.txt

awk -FS"\t" 'BEGIN {FS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_asc"} \
{key1_gene=$1; numgenelines[key1_gene]++; ngenes=length(numgenelines); \
p++; lines_in_file_arr[p] = $0; total_lines_in_file = length(lines_in_file_arr);} \
END {for (k1 in numgenelines) {l++; genenm[l]=k1; ngenelines[l]=numgenelines[k1]; } \
for (h=1; h<=ngenes; h++) { \
for (o=1; o<=total_lines_in_file; o++) { \
split (lines_in_file_arr[o], tmparr, "\t"); \
if (tmparr[1] == genenm[h]) { \
i++; b_key2_arr[i] = tmparr[2] OFS tmparr[3];}}} \
nhierlines=length(b_key2_arr); \
{for (n=1; n<=ngenes; n++) printf genenm[n] OFS OFS;} printf "\n"; \
ilines=0; irow=0; \
while (ilines <= nhierlines) { \
m=irow+1; \
for (cols_in_aline=1; cols_in_aline<=ngenes; cols_in_aline++) { \
lineno+=ngenelines[cols_in_aline]; \
{if (m > lineno) {printf OFS OFS; m=m+ngenelines[cols_in_aline]; continue;} \
else {printf b_key2_arr[m] OFS; ilines++;  \
m=m+ngenelines[cols_in_aline]; }} \
} \
print ""; \
irow++; \
lineno=0; \
#print "***" ilines, nhierlines; \
if(ilines == nhierlines){break} \
}}' crct_cg859_fprint2.txt > crct_cg859_genewise_pway_fprint.txt

cp cg859_no_mutns.txt cg859_orig_genlst.txt
vi cg859_orig_genlst.txt
#:1,$s/\t/_(/
#:1,$s/$/)/

awk -F"\t" '{IFS=OFS="\t"} (NR==FNR) {orig_gene_order[NR]=$i; ngenes=length(orig_gene_order);} \
(NR != FNR) {for (j=1; j<=NF; j++) {mtx[j,FNR] = $j; } } \
END { {for (k=1; k<=ngenes; k++) { \
{for (m=1; m<=NF; m++) { for (l=1; l<=FNR; l++) { \
{if ((l==1) && (mtx[m,1] == orig_gene_order[k]))  \
{ newm++; mhitnxt=m+1; new2m=newm+1; } }  \
{if((l>=1) && (mtx[m,1] == orig_gene_order[k]))  \
{rearrngd_mtx[newm,l]=mtx[m,l]; } } \
{if ( (m == mhitnxt) ) { newm=new2m; rearrngd_mtx[newm,l]=mtx[m,l]; } } \
} } mhitnxt=0; } } } \
{ for (irow=1; irow<=FNR; irow++) { for (mcol=1; mcol<=NF; mcol++) { printf rearrngd_mtx[mcol,irow] OFS; }  printf "\n"; } } }' \
cg859_orig_genlst.txt crct_cg859_genewise_pway_fprint.txt > crct_cg859_ordrd_genewise_pway_fprint.txt

#taking crct_cg859_ordrd_genewise_pway_fprint.txt to windows:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\

diff --side-by-side --suppress-common-lines fp_genlst_from_xl_tbl.txt cg859_orig_genlst.txt
                                                              > TET2_(0)
                                                              > TET1_(0)
                                                              > HERPUD1_(0)
                                                              > PER1_(0)
                                                              > TET3_(0)
                                                              > DDX41_(0)

--------------------------------------------------
--------------------------------------------------

############################################################
############################################################
############################################################

# MASTERFILE13 identifies pathway hierarchies common to comorbidity-associated- and cancer genes

#13) MASTERFILE13 = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/cmd8_canmutns_in_omim.sh

#This is the CORRECTED VERSION of sav_supptbl18_can2omim.xlsx; it is for correcting col 3 of supptbl18_can2omim.xlsx
#The original version is sav_supptbl18_can2omim.xlsx

#pwd = /BeagleAttic/users/RaghavanLab/prathima/writing/canmutns_in_omim

cp get_can2omim_hierlines.sh ok_get_can2omim_hierlines.sh

vi ok_get_can2omim_hierlines.sh
#:1,$s/orig_comorb_coadread\.txt/crct_coadread_fprint2.txt/
#:1,$s/orig_comorb_brca\.txt/crct_brca_fprint2.txt/
#:1,$s/orig_comorb_luad\.txt/crct_luad_fprint2.txt/
#:1,$s/orig_comorb_skcm\.txt/crct_skcm_fprint2.txt/
#:1,$s/orig_comorb_laml\.txt/crct_laml_fprint2.txt/
#:1,$s/orig_comorb_gbm\.txt/crct_gbm_fprint2.txt/
#:1,$s/orig_comorb_kirc\.txt/crct_kirc_fprint2.txt/
#:1,$s/orig_comorb_hnsc\.txt/crct_hnsc_fprint2.txt/
#:1,$s/anal_comorbidity/pway_anal\/dir4pwayswrtup\/pfpcorrections/

#the corrected fprint files are in the foll area;
#/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections/crct_bmomim_fprint2.txt
#/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/dir4pwayswrtup/pfpcorrections/crct_skcm_fprint2.txt

sh ok_get_can2omim_hierlines.sh > ok_hierlines_can2omim_genes.txt

wc -l ok_hierlines_can2omim_genes.txt
#1205 
cp ok_hierlines_can2omim_genes.txt ok_first_hierlines_can2omim_genes.txt

vi ok_hierlines_can2omim_genes.txt
:1,$s/_(/\t/
:1,$s/)//
awk -F"\t" '{IFS=OFS="\t"}{print $1 OFS $3 OFS $4}' ok_hierlines_can2omim_genes.txt > temphier.txt
cp temphier.txt ok_hierlines_can2omim_genes.txt
rm temphier.txt

#"Disease" hierarchies have been removed; as ETV6 has only "Disease" hierarchies,
#it gets removed in output below;
awk -F"\t" '{IFS=OFS="\t"} {gsub(/\,/, "\t", $3)} 1' ok_hierlines_can2omim_genes.txt | \
awk -F"\t" '{IFS=OFS="\t"}{print $1 OFS $2 OFS $3}' | \
awk -F"\t" '{IFS=OFS="\t"}{gsub(/\|/, "\t", $2)} 1' | \
awk -F"\t" '{IFS=OFS="\t"}{print $1 OFS $3 OFS $2 OFS $NF}' | \
grep -v "Disease" > ok_no_disease_hierlines_can2omim_genes.txt

cp ok_no_disease_hierlines_can2omim_genes.txt ok_all_most_imp_suprpways_in_fprint.txt
#edited above file to retain the topmost fingerprint pways for each gene, keeping in mind 
#that the second suprpway may be as important as the first one;
#the following genes have 2 important suprpways each: 
#IDH1,IDH2,PIK3CD,RASA1,SMAD3,SMAD4

#compared in 2 windows, ok_all_most_imp_suprpways_in_fprint.txt and all_most_imp_suprpways_in_fprint.txt

#only the second suprpway of MAP2K2 (Developmental Biology) has been edited out of the former file; 

#hence, deleted MAP2K2 Developmental Biology line, and edited the count for Developmental Biology from 
#8 to 6 (last col), in the old windows xl file and made it the new one; foll is the correct table; 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl18_can2omim.xlsx


############################################################
############################################################
############################################################

# MASTERFILE14 generates networks of source and target cancer genes;

#14) MASTERFILE14 = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/cmd12_networks_new.sh

#generating networks

#tables for TP53
pwd = /BeagleAttic/users/RaghavanLab/prathima/writing/gene_networks_2024

vi TP53_inp_gene_intracns_brca.txt
#into this file, copied and pasted from xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl13_pway_fingerprint.xlsx
#the pway and interaction lines for TP53 from brca sheet;
#likewise, created the foll files: 
vi TP53_inp_gene_intracns_coadread.txt
vi TP53_inp_gene_intracns_gbm.txt
vi TP53_inp_gene_intracns_hnsc.txt
vi TP53_inp_gene_intracns_luad.txt
vi TP53_inp_gene_intracns_skcm.txt

#top-level pways in TP53 fp;
TP53 - Gene expression, Cell Cycle, Cellular responses to stimuli, Metabolism of proteins, 
       Programmed Cell Death, Signal Transduction, DNA Repair, Hemostasis, Immune System
#top-level pways of TP53 needed for networks; 
Cell Cycle, Cellular responses to stimuli, Gene expression, Metabolism of proteins, Programmed Cell Death; 
#brca
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_brca.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Cell Cycle/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Cell_Cycle_brca.txt 

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_brca.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Cellular responses to stimuli/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Cellular_responses_to_stimuli_brca.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_brca.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Gene expression/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Gene_expression_brca.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_brca.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Metabolism of proteins/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Metabolism_of_proteins_brca.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_brca.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Programmed Cell Death/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Programmed_Cell_Death_brca.txt

#coadread
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_coadread.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Cell Cycle/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Cell_Cycle_coadread.txt 

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_coadread.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Cellular responses to stimuli/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Cellular_responses_to_stimuli_coadread.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_coadread.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Gene expression/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Gene_expression_coadread.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_coadread.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Metabolism of proteins/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Metabolism_of_proteins_coadread.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_coadread.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Programmed Cell Death/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Programmed_Cell_Death_coadread.txt

#gbm
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_gbm.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Cell Cycle/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Cell_Cycle_gbm.txt 

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_gbm.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Cellular responses to stimuli/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Cellular_responses_to_stimuli_gbm.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_gbm.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Gene expression/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Gene_expression_gbm.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_gbm.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Metabolism of proteins/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Metabolism_of_proteins_gbm.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_gbm.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Programmed Cell Death/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Programmed_Cell_Death_gbm.txt

#hnsc 
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_hnsc.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Cell Cycle/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Cell_Cycle_hnsc.txt 

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_hnsc.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Cellular responses to stimuli/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Cellular_responses_to_stimuli_hnsc.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_hnsc.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Gene expression/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Gene_expression_hnsc.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_hnsc.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Metabolism of proteins/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Metabolism_of_proteins_hnsc.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_hnsc.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Programmed Cell Death/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Programmed_Cell_Death_hnsc.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_hnsc.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Signal Transduction/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Signal_Transduction_hnsc.txt

#luad
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_luad.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Cell Cycle/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Cell_Cycle_luad.txt 

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_luad.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Cellular responses to stimuli/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Cellular_responses_to_stimuli_luad.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_luad.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Gene expression/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Gene_expression_luad.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_luad.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Metabolism of proteins/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Metabolism_of_proteins_luad.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_luad.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Programmed Cell Death/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Programmed_Cell_Death_luad.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_luad.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Signal Transduction/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Signal_Transduction_luad.txt

#skcm
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_skcm.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Cell Cycle/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Cell_Cycle_skcm.txt 

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_skcm.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Cellular responses to stimuli/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Cellular_responses_to_stimuli_skcm.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_skcm.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Gene expression/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Gene_expression_skcm.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_skcm.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Metabolism of proteins/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Metabolism_of_proteins_skcm.txt

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' TP53_inp_gene_intracns_skcm.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Programmed Cell Death/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > TP53_Programmed_Cell_Death_skcm.txt


awk -F"\t" '{IFS=OFS="\t"}(NF==1){genenm=$1} \
(NF>1) {notrearrngd=0; rearrngd=0; for (i=1; i<=NF; i++) {\
if(i==1) {printf $i OFS} \
if((i==2) && ($i == genenm)){printf $i OFS; notrearrngd=1} \
if((i==3) && ($2 == genenm)){printf $i OFS} \
\
if((i==2) && ($i != genenm)) {k=4; storegene[k]=$i; rearrngd=1;} \
if((i==3) && ($2 != genenm)) {k=5; storegene[k]=$i;} \
\
if((i>3) && ($2 == genenm)){printf $i OFS;} \
\
if((i>3) && ($2 != genenm) && ($i ~ /[A-Z]/)) { \
if($i == genenm){storegene[2]=$i}} \
\
if((i>3) && ($2 != genenm) && ($i !~ /[A-Z]/)) { \
if($(i-1) == genenm){storegene[3]=$i}} \
\
if((i>3) && ($2 != genenm) && ($i ~ /[A-Z]/)) { \
if($i != genenm){k++; storegene[k]=$i}} \
\
if((i>3) && ($2 != genenm) && ($i !~ /[A-Z]/)) { \
if($(i-1) != genenm){k++; storegene[k]=$i}} \
\
if((i==NF) && (notrearrngd==1)){print ""} \
if((i==NF) && (rearrngd==1)){ for (j=2; j<=NF; j++) {printf storegene[j] OFS} print ""} \
}}' TP53_Cell_Cycle_brca.txt > rearrngd_TP53_Cell_Cycle_brca.txt

#copied the above awk script to a script file (called rearrng.sh) and ran for all tp53 files as follows:
sh rearrng.sh < TP53_Cell_Cycle_brca.txt > rearrngd_TP53_Cell_Cycle_brca.txt
sh rearrng.sh < TP53_Cellular_responses_to_stimuli_brca.txt > rearrngd_TP53_Cellular_responses_to_stimuli_brca.txt
sh rearrng.sh < TP53_Gene_expression_brca.txt > rearrngd_TP53_Gene_expression_brca.txt
sh rearrng.sh < TP53_Metabolism_of_proteins_brca.txt > rearrngd_TP53_Metabolism_of_proteins_brca.txt
sh rearrng.sh < TP53_Programmed_Cell_Death_brca.txt > rearrngd_TP53_Programmed_Cell_Death_brca.txt

sh rearrng.sh < TP53_Cell_Cycle_coadread.txt > rearrngd_TP53_Cell_Cycle_coadread.txt
sh rearrng.sh < TP53_Cellular_responses_to_stimuli_coadread.txt > rearrngd_TP53_Cellular_responses_to_stimuli_coadread.txt
sh rearrng.sh < TP53_Gene_expression_coadread.txt > rearrngd_TP53_Gene_expression_coadread.txt
sh rearrng.sh < TP53_Metabolism_of_proteins_coadread.txt > rearrngd_TP53_Metabolism_of_proteins_coadread.txt
sh rearrng.sh < TP53_Programmed_Cell_Death_coadread.txt > rearrngd_TP53_Programmed_Cell_Death_coadread.txt

sh rearrng.sh < TP53_Cell_Cycle_gbm.txt > rearrngd_TP53_Cell_Cycle_gbm.txt
sh rearrng.sh < TP53_Cellular_responses_to_stimuli_gbm.txt > rearrngd_TP53_Cellular_responses_to_stimuli_gbm.txt
sh rearrng.sh < TP53_Gene_expression_gbm.txt > rearrngd_TP53_Gene_expression_gbm.txt
sh rearrng.sh < TP53_Metabolism_of_proteins_gbm.txt > rearrngd_TP53_Metabolism_of_proteins_gbm.txt
sh rearrng.sh < TP53_Programmed_Cell_Death_gbm.txt > rearrngd_TP53_Programmed_Cell_Death_gbm.txt

sh rearrng.sh < TP53_Cell_Cycle_hnsc.txt > rearrngd_TP53_Cell_Cycle_hnsc.txt
sh rearrng.sh < TP53_Cellular_responses_to_stimuli_hnsc.txt > rearrngd_TP53_Cellular_responses_to_stimuli_hnsc.txt
sh rearrng.sh < TP53_Gene_expression_hnsc.txt > rearrngd_TP53_Gene_expression_hnsc.txt
sh rearrng.sh < TP53_Metabolism_of_proteins_hnsc.txt > rearrngd_TP53_Metabolism_of_proteins_hnsc.txt
sh rearrng.sh < TP53_Programmed_Cell_Death_hnsc.txt > rearrngd_TP53_Programmed_Cell_Death_hnsc.txt
sh rearrng.sh < TP53_Signal_Transduction_hnsc.txt > rearrngd_TP53_Signal_Transduction_hnsc.txt

sh rearrng.sh < TP53_Cell_Cycle_luad.txt > rearrngd_TP53_Cell_Cycle_luad.txt
sh rearrng.sh < TP53_Cellular_responses_to_stimuli_luad.txt > rearrngd_TP53_Cellular_responses_to_stimuli_luad.txt
sh rearrng.sh < TP53_Gene_expression_luad.txt > rearrngd_TP53_Gene_expression_luad.txt
sh rearrng.sh < TP53_Metabolism_of_proteins_luad.txt > rearrngd_TP53_Metabolism_of_proteins_luad.txt
sh rearrng.sh < TP53_Programmed_Cell_Death_luad.txt > rearrngd_TP53_Programmed_Cell_Death_luad.txt
sh rearrng.sh < TP53_Signal_Transduction_luad.txt > rearrngd_TP53_Signal_Transduction_luad.txt

sh rearrng.sh < TP53_Cell_Cycle_skcm.txt > rearrngd_TP53_Cell_Cycle_skcm.txt
sh rearrng.sh < TP53_Cellular_responses_to_stimuli_skcm.txt > rearrngd_TP53_Cellular_responses_to_stimuli_skcm.txt
sh rearrng.sh < TP53_Gene_expression_skcm.txt > rearrngd_TP53_Gene_expression_skcm.txt
sh rearrng.sh < TP53_Metabolism_of_proteins_skcm.txt > rearrngd_TP53_Metabolism_of_proteins_skcm.txt
sh rearrng.sh < TP53_Programmed_Cell_Death_skcm.txt > rearrngd_TP53_Programmed_Cell_Death_skcm.txt


sed -e 's/\t\t//' -e 's/\t$//' rearrngd_TP53_Cell_Cycle_brca.txt | \
awk -F"\t" '{IFS=OFS="\t"} \
{for (i=1; i<NF; i++) { \
if (i==1) {totlrns=$1;} \
if (i==2) {genenm=$2;} \
if (i==3) {generns=$3;} \
if ((i>3) && !(i%2)) {printf totlrns OFS genenm OFS generns OFS $i OFS} \
if ((i>3) && (i%2)) {print $i} \
} \
}' | sort -k2,2 -k4,4 | awk -F"\t" '{IFS=OFS="\t"} {print $2 OFS $4 OFS $1 OFS $3 OFS $5}' > tmpintermed.txt

awk -F"\t" '{IFS=OFS="\t"}{print $1 OFS $2}' tmpintermed.txt | uniq | wc  -l
#34

#used an associative array to calculate table of edge weights;
awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_desc"}  \
{ k=$1 OFS $2; a[k]++; b[k]+=$3; c[k]+=$4; d[k]+=$5; } \
END { for (i in a) print i, a[i], b[i], c[i], d[i], one_by_denom = ((1/b[i]) * (1/2)), numer = (c[i] + d[i]), wt = one_by_denom * numer}' tmpintermed.txt > wts_TP53_Cell_Cycle_brca.txt 

#combined the above two scripts into one and copied it into a script file (called weights.sh);  
sed -e 's/\t\t//' -e 's/\t$//' rearrngd_TP53_Cell_Cycle_brca.txt | \
awk -F"\t" '{IFS=OFS="\t"} \
{for (i=1; i<NF; i++) { \
if (i==1) {totlrns=$1;} \
if (i==2) {genenm=$2;} \
if (i==3) {generns=$3;} \
if ((i>3) && !(i%2)) {printf totlrns OFS genenm OFS generns OFS $i OFS} \
if ((i>3) && (i%2)) {print $i} \
} \
}' | sort -k2,2 -k4,4 | awk -F"\t" '{IFS=OFS="\t"} {print $2 OFS $4 OFS $1 OFS $3 OFS $5}' | \
awk -F"\t" 'BEGIN {IFS=OFS="\t"; PROCINFO["sorted_in"] = "@ind_str_desc"}  \
{ k=$1 OFS $2; a[k]++; b[k]+=$3; c[k]+=$4; d[k]+=$5; } \
END { for (i in a) print i, a[i], b[i], c[i], d[i], one_by_denom = ((1/b[i]) * (1/2)), numer = (c[i] + d[i]), wt = one_by_denom * numer}' | \
awk -F"\t" '{IFS=OFS="\t"}{print $1 OFS $2 OFS $NF}' > wts_TP53_Cell_Cycle_brca.txt 

#brca, coadread, gbm, hnsc, luad, skcm
#the script may be run for the different files as below;
sh weights.sh rearrngd_TP53_Cell_Cycle_brca.txt > wts_TP53_Cell_Cycle_brca.txt
sh weights.sh rearrngd_TP53_Cellular_responses_to_stimuli_brca.txt > wts_TP53_Cellular_responses_to_stimuli_brca.txt
sh weights.sh rearrngd_TP53_Gene_expression_brca.txt > wts_TP53_Gene_expression_brca.txt
sh weights.sh rearrngd_TP53_Metabolism_of_proteins_brca.txt > wts_TP53_Metabolism_of_proteins_brca.txt
sh weights.sh rearrngd_TP53_Programmed_Cell_Death_brca.txt >  wts_TP53_Programmed_Cell_Death_brca.txt

sh weights.sh rearrngd_TP53_Cell_Cycle_coadread.txt > wts_TP53_Cell_Cycle_coadread.txt
sh weights.sh rearrngd_TP53_Cellular_responses_to_stimuli_coadread.txt > wts_TP53_Cellular_responses_to_stimuli_coadread.txt
sh weights.sh rearrngd_TP53_Gene_expression_coadread.txt > wts_TP53_Gene_expression_coadread.txt
sh weights.sh rearrngd_TP53_Metabolism_of_proteins_coadread.txt > wts_TP53_Metabolism_of_proteins_coadread.txt
sh weights.sh rearrngd_TP53_Programmed_Cell_Death_coadread.txt >  wts_TP53_Programmed_Cell_Death_coadread.txt

sh weights.sh rearrngd_TP53_Cell_Cycle_gbm.txt > wts_TP53_Cell_Cycle_gbm.txt
sh weights.sh rearrngd_TP53_Cellular_responses_to_stimuli_gbm.txt > wts_TP53_Cellular_responses_to_stimuli_gbm.txt
sh weights.sh rearrngd_TP53_Gene_expression_gbm.txt > wts_TP53_Gene_expression_gbm.txt
sh weights.sh rearrngd_TP53_Metabolism_of_proteins_gbm.txt > wts_TP53_Metabolism_of_proteins_gbm.txt
sh weights.sh rearrngd_TP53_Programmed_Cell_Death_gbm.txt >  wts_TP53_Programmed_Cell_Death_gbm.txt

sh weights.sh rearrngd_TP53_Cell_Cycle_hnsc.txt > wts_TP53_Cell_Cycle_hnsc.txt
sh weights.sh rearrngd_TP53_Cellular_responses_to_stimuli_hnsc.txt > wts_TP53_Cellular_responses_to_stimuli_hnsc.txt
sh weights.sh rearrngd_TP53_Gene_expression_hnsc.txt > wts_TP53_Gene_expression_hnsc.txt
sh weights.sh rearrngd_TP53_Metabolism_of_proteins_hnsc.txt > wts_TP53_Metabolism_of_proteins_hnsc.txt
sh weights.sh rearrngd_TP53_Programmed_Cell_Death_hnsc.txt >  wts_TP53_Programmed_Cell_Death_hnsc.txt
sh weights.sh rearrngd_TP53_Signal_Transduction_hnsc.txt >  wts_TP53_Signal_Transduction_hnsc.txt

sh weights.sh rearrngd_TP53_Cell_Cycle_luad.txt > wts_TP53_Cell_Cycle_luad.txt
sh weights.sh rearrngd_TP53_Cellular_responses_to_stimuli_luad.txt > wts_TP53_Cellular_responses_to_stimuli_luad.txt
sh weights.sh rearrngd_TP53_Gene_expression_luad.txt > wts_TP53_Gene_expression_luad.txt
sh weights.sh rearrngd_TP53_Metabolism_of_proteins_luad.txt > wts_TP53_Metabolism_of_proteins_luad.txt
sh weights.sh rearrngd_TP53_Programmed_Cell_Death_luad.txt >  wts_TP53_Programmed_Cell_Death_luad.txt
sh weights.sh rearrngd_TP53_Signal_Transduction_luad.txt >  wts_TP53_Signal_Transduction_luad.txt

sh weights.sh rearrngd_TP53_Cell_Cycle_skcm.txt > wts_TP53_Cell_Cycle_skcm.txt
sh weights.sh rearrngd_TP53_Cellular_responses_to_stimuli_skcm.txt > wts_TP53_Cellular_responses_to_stimuli_skcm.txt
sh weights.sh rearrngd_TP53_Gene_expression_skcm.txt > wts_TP53_Gene_expression_skcm.txt
sh weights.sh rearrngd_TP53_Metabolism_of_proteins_skcm.txt > wts_TP53_Metabolism_of_proteins_skcm.txt
sh weights.sh rearrngd_TP53_Programmed_Cell_Death_skcm.txt >  wts_TP53_Programmed_Cell_Death_skcm.txt

#Instead of Cytoscape networks, trying to get doughnut plots for the wts_TP53 files;
#taking all wts_TP53 files to: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways\gene_networks\doughnuts\gene_network_doughnut_infiles.xlsx

--------------------------------------------------

#tables for KRAS
#pwd = /BeagleAttic/users/RaghavanLab/prathima/writing/gene_networks_2024

vi KRAS_inp_gene_intracns_coadread.txt
#into this file, copied and pasted from xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl13_pway_fingerprint.xlsx
#the pway and interaction lines for KRAS from coadread sheet;
#likewise, created the foll files: 
vi KRAS_inp_gene_intracns_luad.txt

#top-level pways in KRAS fp needed for networks;
#KRAS - Signal Transduction 
#coadread
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' KRAS_inp_gene_intracns_coadread.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Signal Transduction/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > KRAS_Signal_Transduction_coadread.txt 

#luad
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' KRAS_inp_gene_intracns_luad.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Signal Transduction/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > KRAS_Signal_Transduction_luad.txt 

#coadread, luad
sh rearrng.sh < KRAS_Signal_Transduction_coadread.txt > rearrngd_KRAS_Signal_Transduction_coadread.txt
sh rearrng.sh < KRAS_Signal_Transduction_luad.txt > rearrngd_KRAS_Signal_Transduction_luad.txt

#coadread, luad 
sh weights.sh rearrngd_KRAS_Signal_Transduction_coadread.txt > wts_KRAS_Signal_Transduction_coadread.txt
sh weights.sh rearrngd_KRAS_Signal_Transduction_luad.txt > wts_KRAS_Signal_Transduction_luad.txt

#Instead of Cytoscape networks, trying to get doughnut plots for the wts_KRAS files;
#taking all wts_KRAS files to: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways\gene_networks\doughnuts\gene_network_doughnut_infiles.xlsx

--------------------------------------------------

#tables for NF1
pwd = /BeagleAttic/users/RaghavanLab/prathima/writing/gene_networks_2024

vi NF1_inp_gene_intracns_skcm.txt
#into this file, copied and pasted from xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl13_pway_fingerprint.xlsx
#the pway and interaction lines for NF1 from skcm sheet;
#likewise, created the foll files: 
vi NF1_inp_gene_intracns_gbm.txt
vi NF1_inp_gene_intracns_luad.txt

#top-level pways in NF1 fp needed for networks;
NF1 - Signal Transduction 
#skcm
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' NF1_inp_gene_intracns_skcm.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Signal Transduction/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > NF1_Signal_Transduction_skcm.txt 

#gbm
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' NF1_inp_gene_intracns_gbm.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Signal Transduction/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > NF1_Signal_Transduction_gbm.txt 

#luad
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' NF1_inp_gene_intracns_luad.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Signal Transduction/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > NF1_Signal_Transduction_luad.txt 

#skcm, gbm, luad
sh rearrng.sh < NF1_Signal_Transduction_skcm.txt > rearrngd_NF1_Signal_Transduction_skcm.txt
sh rearrng.sh < NF1_Signal_Transduction_gbm.txt > rearrngd_NF1_Signal_Transduction_gbm.txt
sh rearrng.sh < NF1_Signal_Transduction_luad.txt > rearrngd_NF1_Signal_Transduction_luad.txt

#skcm, gbm, luad 
sh weights.sh rearrngd_NF1_Signal_Transduction_skcm.txt > wts_NF1_Signal_Transduction_skcm.txt
sh weights.sh rearrngd_NF1_Signal_Transduction_gbm.txt > wts_NF1_Signal_Transduction_gbm.txt
sh weights.sh rearrngd_NF1_Signal_Transduction_luad.txt > wts_NF1_Signal_Transduction_luad.txt

#trying to get doughnut plots for the wts_NF1 files;
#taking all wts_NF1 files to: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways\gene_networks\doughnuts\gene_network_doughnut_infiles.xlsx

--------------------------------------------------

#tables for EGFR
pwd = /BeagleAttic/users/RaghavanLab/prathima/writing/gene_networks_2024

vi EGFR_inp_gene_intracns_gbm.txt
#into this file, copied and pasted from xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl13_pway_fingerprint.xlsx
#the pway and interaction lines for EGFR from gbm sheet;
#likewise, created the foll files: 
vi EGFR_inp_gene_intracns_luad.txt

#top-level pways in EGFR fp needed for networks;
EGFR - Signal Transduction, Vesicle-mediated Transport 
#gbm 
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' EGFR_inp_gene_intracns_gbm.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Signal Transduction/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > EGFR_Signal_Transduction_gbm.txt 

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' EGFR_inp_gene_intracns_gbm.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Vesicle-mediated transport/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > EGFR_Vesicle_mediated_transport_gbm.txt 

#luad
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' EGFR_inp_gene_intracns_luad.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Signal Transduction/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > EGFR_Signal_Transduction_luad.txt 

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' EGFR_inp_gene_intracns_luad.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Vesicle-mediated transport/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > EGFR_Vesicle_mediated_transport_luad.txt 

#gbm, luad
sh rearrng.sh < EGFR_Signal_Transduction_gbm.txt > rearrngd_EGFR_Signal_Transduction_gbm.txt
sh rearrng.sh < EGFR_Vesicle_mediated_transport_gbm.txt > rearrngd_EGFR_Vesicle_mediated_transport_gbm.txt
sh rearrng.sh < EGFR_Signal_Transduction_luad.txt > rearrngd_EGFR_Signal_Transduction_luad.txt
sh rearrng.sh < EGFR_Vesicle_mediated_transport_luad.txt > rearrngd_EGFR_Vesicle_mediated_transport_luad.txt

#gbm, luad 
sh weights.sh rearrngd_EGFR_Signal_Transduction_gbm.txt > wts_EGFR_Signal_Transduction_gbm.txt
sh weights.sh rearrngd_EGFR_Vesicle_mediated_transport_gbm.txt > wts_EGFR_Vesicle_mediated_transport_gbm.txt
sh weights.sh rearrngd_EGFR_Signal_Transduction_luad.txt > wts_EGFR_Signal_Transduction_luad.txt
sh weights.sh rearrngd_EGFR_Vesicle_mediated_transport_luad.txt > wts_EGFR_Vesicle_mediated_transport_luad.txt

#trying to get doughnut plots for the wts_EGFR files;
#taking all wts_EGFR files to: 
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\pways\gene_networks\doughnuts\gene_network_doughnut_infiles.xlsx

--------------------------------------------------
--------------------------------------------------

#second set: same gene, same cancer, different top-level pways;
#tables for APC
#pwd = /BeagleAttic/users/RaghavanLab/prathima/writing/gene_networks_2024

vi APC_inp_gene_intracns_coadread.txt
#into this file, copied and pasted from xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl13_pway_fingerprint.xlsx
#the pway and interaction lines for APC from coadread sheet;

#top-level pways in APC fp needed for networks;
#APC - Signal Transduction, Metabolism of proteins, Programmed Cell Death
#coadread 
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' APC_inp_gene_intracns_coadread.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Signal Transduction/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > APC_Signal_Transduction_coadread.txt 

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' APC_inp_gene_intracns_coadread.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Metabolism of proteins/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > APC_Metabolism_of_proteins_coadread.txt 

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' APC_inp_gene_intracns_coadread.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Programmed Cell Death/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > APC_Programmed_Cell_Death_coadread.txt 

#coadread
sh rearrng.sh < APC_Signal_Transduction_coadread.txt > rearrngd_APC_Signal_Transduction_coadread.txt
sh rearrng.sh < APC_Metabolism_of_proteins_coadread.txt > rearrngd_APC_Metabolism_of_proteins_coadread.txt
sh rearrng.sh < APC_Programmed_Cell_Death_coadread.txt > rearrngd_APC_Programmed_Cell_Death_coadread.txt

#coadread 
sh weights.sh rearrngd_APC_Signal_Transduction_coadread.txt > wts_APC_Signal_Transduction_coadread.txt
sh weights.sh rearrngd_APC_Metabolism_of_proteins_coadread.txt > wts_APC_Metabolism_of_proteins_coadread.txt
sh weights.sh rearrngd_APC_Programmed_Cell_Death_coadread.txt > wts_APC_Programmed_Cell_Death_coadread.txt

--------------------------------------------------

#tables for ATM
#pwd = /BeagleAttic/users/RaghavanLab/prathima/writing/gene_networks_2024

vi ATM_inp_gene_intracns_coadread.txt
#into this file, copied and pasted from xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl13_pway_fingerprint.xlsx
#the pway and interaction lines for ATM from coadread sheet;

#top-level pways in ATM fp needed for networks;
#ATM - DNA Repair, Reproduction 
#coadread
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' ATM_inp_gene_intracns_coadread.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /DNA Repair/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > ATM_DNA_Repair_coadread.txt 

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' ATM_inp_gene_intracns_coadread.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Reproduction/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > ATM_Reproduction_coadread.txt 

#coadread
sh rearrng.sh < ATM_DNA_Repair_coadread.txt > rearrngd_ATM_DNA_Repair_coadread.txt
sh rearrng.sh < ATM_Reproduction_coadread.txt > rearrngd_ATM_Reproduction_coadread.txt

#coadread 
sh weights.sh rearrngd_ATM_DNA_Repair_coadread.txt > wts_ATM_DNA_Repair_coadread.txt
sh weights.sh rearrngd_ATM_Reproduction_coadread.txt > wts_ATM_Reproduction_coadread.txt

--------------------------------------------------

#tables for PIK3CA
#pwd = /BeagleAttic/users/RaghavanLab/prathima/writing/gene_networks_2024

vi PIK3CA_inp_gene_intracns_brca.txt
#into this file, copied and pasted from xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl13_pway_fingerprint.xlsx
#the pway and interaction lines for PIK3CA from brca sheet;

#top-level pways in PIK3CA fp needed for networks;
#PIK3CA - Signal Transduction, Immune System, Cell-Cell communication, Metabolism
#brca
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' PIK3CA_inp_gene_intracns_brca.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Signal Transduction/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > PIK3CA_Signal_Transduction_brca.txt 

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' PIK3CA_inp_gene_intracns_brca.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Immune System/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > PIK3CA_Immune_System_brca.txt 

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' PIK3CA_inp_gene_intracns_brca.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Cell-Cell communication/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > PIK3CA_Cell_Cell_communication_brca.txt 

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' PIK3CA_inp_gene_intracns_brca.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Metabolism/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > PIK3CA_Metabolism_brca.txt 

#brca
sh rearrng.sh < PIK3CA_Signal_Transduction_brca.txt > rearrngd_PIK3CA_Signal_Transduction_brca.txt
sh rearrng.sh < PIK3CA_Immune_System_brca.txt > rearrngd_PIK3CA_Immune_System_brca.txt
sh rearrng.sh < PIK3CA_Cell_Cell_communication_brca.txt > rearrngd_PIK3CA_Cell_Cell_communication_brca.txt
sh rearrng.sh < PIK3CA_Metabolism_brca.txt > rearrngd_PIK3CA_Metabolism_brca.txt

#brca 
sh weights.sh rearrngd_PIK3CA_Signal_Transduction_brca.txt > wts_PIK3CA_Signal_Transduction_brca.txt
sh weights.sh rearrngd_PIK3CA_Immune_System_brca.txt > wts_PIK3CA_Immune_System_brca.txt
sh weights.sh rearrngd_PIK3CA_Cell_Cell_communication_brca.txt > wts_PIK3CA_Cell_Cell_communication_brca.txt
sh weights.sh rearrngd_PIK3CA_Metabolism_brca.txt > wts_PIK3CA_Metabolism_brca.txt

--------------------------------------------------

#tables for VHL
#pwd = /BeagleAttic/users/RaghavanLab/prathima/writing/gene_networks_2024

vi VHL_inp_gene_intracns_kirc.txt
#into this file, copied and pasted from xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl13_pway_fingerprint.xlsx
#the pway and interaction lines for VHL from kirc sheet;

#top-level pways in VHL fp needed for networks;
#VHL - Cellular responses to stimuli, Immune System, Signal Transduction, Metabolism of proteins
#kirc
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' VHL_inp_gene_intracns_kirc.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Cellular responses to stimuli/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > VHL_Cellular_responses_to_stimuli_kirc.txt 

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' VHL_inp_gene_intracns_kirc.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Immune System/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > VHL_Immune_System_kirc.txt 

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' VHL_inp_gene_intracns_kirc.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Signal Transduction/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > VHL_Signal_Transduction_kirc.txt 

awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' VHL_inp_gene_intracns_kirc.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Metabolism of proteins/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > VHL_Metabolism_of_proteins_kirc.txt 

#kirc
sh rearrng.sh < VHL_Cellular_responses_to_stimuli_kirc.txt > rearrngd_VHL_Cellular_responses_to_stimuli_kirc.txt
sh rearrng.sh < VHL_Immune_System_kirc.txt > rearrngd_VHL_Immune_System_kirc.txt
sh rearrng.sh < VHL_Signal_Transduction_kirc.txt > rearrngd_VHL_Signal_Transduction_kirc.txt
sh rearrng.sh < VHL_Metabolism_of_proteins_kirc.txt > rearrngd_VHL_Metabolism_of_proteins_kirc.txt

#kirc 
sh weights.sh rearrngd_VHL_Cellular_responses_to_stimuli_kirc.txt > wts_VHL_Cellular_responses_to_stimuli_kirc.txt
sh weights.sh rearrngd_VHL_Immune_System_kirc.txt > wts_VHL_Immune_System_kirc.txt
sh weights.sh rearrngd_VHL_Signal_Transduction_kirc.txt > wts_VHL_Signal_Transduction_kirc.txt
sh weights.sh rearrngd_VHL_Metabolism_of_proteins_kirc.txt > wts_VHL_Metabolism_of_proteins_kirc.txt

--------------------------------------------------

#third set: same cancer, same top-level pway, different prominent genes;
#tables for CDH1, PIK3CA - Cell-Cell communication - BRCA; 
#pwd = /BeagleAttic/users/RaghavanLab/prathima/writing/gene_networks_2024

vi CDH1_inp_gene_intracns_brca.txt
#into this file, copied and pasted from xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl13_pway_fingerprint.xlsx
#the pway and interaction lines for CDH1 from brca sheet;

#top-level pways in CDH1 fp needed for networks;
#CDH1 - Cell-Cell communication  
#brca
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' CDH1_inp_gene_intracns_brca.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Cell-Cell communication/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > CDH1_Cell_Cell_communication_brca.txt 

#PIK3CA - Cell-Cell communication is already done above; 

#brca
sh rearrng.sh < CDH1_Cell_Cell_communication_brca.txt > rearrngd_CDH1_Cell_Cell_communication_brca.txt

#brca
sh weights.sh rearrngd_CDH1_Cell_Cell_communication_brca.txt > wts_CDH1_Cell_Cell_communication_brca.txt

--------------------------------------------------

#tables for TP53, APC - Programmed Cell Death - COADREAD;
#both have already been done above; 

#tables for APC, KRAS - Signal Transduction - COADREAD;
#both have already been done above; 

#tables for PTEN, NF1, EGFR - Signal Transduction - GBM;
#tables for NF1, EGFR have been done above;

#table for PTEN - Signal Transduction - GBM; 
#pwd = /BeagleAttic/users/RaghavanLab/prathima/writing/gene_networks_2024

vi PTEN_inp_gene_intracns_gbm.txt
#into this file, copied and pasted from xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl13_pway_fingerprint.xlsx
#the pway and interaction lines for PTEN from gbm sheet;

#top-level pways in PTEN fp needed for networks;
#PTEN - Signal Transduction 
#gbm
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' PTEN_inp_gene_intracns_gbm.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Signal Transduction/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > PTEN_Signal_Transduction_gbm.txt 

#gbm
sh rearrng.sh < PTEN_Signal_Transduction_gbm.txt > rearrngd_PTEN_Signal_Transduction_gbm.txt

#gbm
sh weights.sh rearrngd_PTEN_Signal_Transduction_gbm.txt > wts_PTEN_Signal_Transduction_gbm.txt

--------------------------------------------------

#tables for RUNX1, NPM1 - Gene expression - LAML; 
#pwd = /BeagleAttic/users/RaghavanLab/prathima/writing/gene_networks_2024

vi RUNX1_inp_gene_intracns_laml.txt
#into this file, copied and pasted from xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl13_pway_fingerprint.xlsx
#the pway and interaction lines for RUNX1 from laml sheet;

#top-level pways in RUNX1 fp needed for networks;
#RUNX1 - Gene expression 
#laml
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' RUNX1_inp_gene_intracns_laml.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Gene expression/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > RUNX1_Gene_expression_laml.txt 

#laml
sh rearrng.sh < RUNX1_Gene_expression_laml.txt > rearrngd_RUNX1_Gene_expression_laml.txt

#laml
sh weights.sh rearrngd_RUNX1_Gene_expression_laml.txt > wts_RUNX1_Gene_expression_laml.txt


vi NPM1_inp_gene_intracns_laml.txt
#into this file, copied and pasted from xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl13_pway_fingerprint.xlsx
#the pway and interaction lines for NPM1 from laml sheet;

#top-level pways in NPM1 fp needed for networks;
#NPM1 - Gene expression 
#laml
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' NPM1_inp_gene_intracns_laml.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Gene expression/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > NPM1_Gene_expression_laml.txt 

#laml
sh rearrng.sh < NPM1_Gene_expression_laml.txt > rearrngd_NPM1_Gene_expression_laml.txt

#laml
sh weights.sh rearrngd_NPM1_Gene_expression_laml.txt > wts_NPM1_Gene_expression_laml.txt

--------------------------------------------------

#tables for TP53, KEAP1 - Cellular responses to stimuli - LUAD; 
#pwd = /BeagleAttic/users/RaghavanLab/prathima/writing/gene_networks_2024

#tables for TP53 have been done above;

#tables for KEAP1 - Cellular responses to stimuli - LUAD; 
vi KEAP1_inp_gene_intracns_luad.txt
#into this file, copied and pasted from xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl13_pway_fingerprint.xlsx
#the pway and interaction lines for KEAP1 from luad sheet;

#top-level pways in KEAP1 fp needed for networks;
#KEAP1 - Cellular responses to stimuli - luad
#luad
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' KEAP1_inp_gene_intracns_luad.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Cellular responses to stimuli/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > KEAP1_Cellular_responses_to_stimuli_luad.txt 

#luad
sh rearrng.sh < KEAP1_Cellular_responses_to_stimuli_luad.txt > rearrngd_KEAP1_Cellular_responses_to_stimuli_luad.txt

#luad
sh weights.sh rearrngd_KEAP1_Cellular_responses_to_stimuli_luad.txt > wts_KEAP1_Cellular_responses_to_stimuli_luad.txt

--------------------------------------------------

#tables for KRAS, NF1, EGFR, TP53, STK11 - Signal Transduction - LUAD; 
#pwd = /BeagleAttic/users/RaghavanLab/prathima/writing/gene_networks_2024
#tables for KRAS, NF1, EGFR, TP53 have been done above;

#tables for STK11 - Signal Transduction - LUAD;
vi STK11_inp_gene_intracns_luad.txt
#into this file, copied and pasted from xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl13_pway_fingerprint.xlsx
#the pway and interaction lines for STK11 from luad sheet;

#top-level pways in STK11 fp needed for networks;
#STK11 - Signal Transduction - luad
#luad
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' STK11_inp_gene_intracns_luad.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Signal Transduction/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > STK11_Signal_Transduction_luad.txt 

#luad
sh rearrng.sh < STK11_Signal_Transduction_luad.txt > rearrngd_STK11_Signal_Transduction_luad.txt

#luad
sh weights.sh rearrngd_STK11_Signal_Transduction_luad.txt > wts_STK11_Signal_Transduction_luad.txt

--------------------------------------------------

#tables for BRAF, NF1, NRAS - Signal Transduction - SKCM; 
#pwd = /BeagleAttic/users/RaghavanLab/prathima/writing/gene_networks_2024
#tables for NF1 have been done above;

#tables for BRAF, NRAS - Signal Transduction - SKCM;
vi BRAF_inp_gene_intracns_skcm.txt
#into this file, copied and pasted from xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl13_pway_fingerprint.xlsx
#the pway and interaction lines for BRAF from skcm sheet;

#top-level pways in BRAF fp needed for networks;
#BRAF - Signal Transduction - skcm
#skcm
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' BRAF_inp_gene_intracns_skcm.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Signal Transduction/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > BRAF_Signal_Transduction_skcm.txt 

#skcm
sh rearrng.sh < BRAF_Signal_Transduction_skcm.txt > rearrngd_BRAF_Signal_Transduction_skcm.txt

#skcm
sh weights.sh rearrngd_BRAF_Signal_Transduction_skcm.txt > wts_BRAF_Signal_Transduction_skcm.txt


#tables for NRAS - Signal Transduction - SKCM;
vi NRAS_inp_gene_intracns_skcm.txt
#into this file, copied and pasted from xl file:
#D:\actrec_work\joined_actrec_nov21\proj_in_detail_03_22\new1186files\writeup\ver1\supptbl13_pway_fingerprint.xlsx
#the pway and interaction lines for NRAS from skcm sheet;

#top-level pways in NRAS fp needed for networks;
#NRAS - Signal Transduction - skcm
#skcm
awk -F"[|\t]" '{print $1 "\t" $2 "\t" $NF}' NRAS_inp_gene_intracns_skcm.txt | sed -e 's/ \((R-HSA-[0-9]\{5,9\})\)//' -e 's/_/ /g' | \
sed -e 's/ \(([0-9]\{1,4\}) \)/\t/g' | sed -e 's/,/\t/g' -e 's/\t\t//' | sed -e 's/\( ([0-9]\{1,4\})\)//g' | \
awk -F"\t" '((NF==1) || ($0 ~ /Signal Transduction/))' | awk -F"\t" '{IFS=OFS="\t"}{$2=""; print $0}' | sed -e 's/\t\t/\t/' | \
awk -F"\t" '{IFS=OFS="\t"}{for (i=1; i<=NF; i++) {if(i != 2) {printf $i OFS}} print ""}' | \
sed -e 's/\t\t//' -e 's/\t$//' | awk -F"\t" '(NF!=4) {print $0}' > NRAS_Signal_Transduction_skcm.txt 

#skcm
sh rearrng.sh < NRAS_Signal_Transduction_skcm.txt > rearrngd_NRAS_Signal_Transduction_skcm.txt

#skcm
sh weights.sh rearrngd_NRAS_Signal_Transduction_skcm.txt > wts_NRAS_Signal_Transduction_skcm.txt

--------------------------------------------------

############################################################
############################################################
############################################################

# MASTERFILE15 stores some miscellaneous trial commands;

#15) MASTERFILE15 = /BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/cmd10_misc.sh

#directory for unique_convergences_for_each_gene.txt
#/BeagleAttic/users/RaghavanLab/prathima/cancers_in_detail/pway_anal/gene_pway_matrix/unique_convergences_for_each_gene.txt

#files are in: /BeagleAttic/users/RaghavanLab/prathima/writing/drugs
#to try to find which gene(s) are co-occurring more frequently with a query gene;
#FGFR1, 2, 3, 4
grep "^FGFR1" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^FGFR2" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^FGFR3" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^FGFR4" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more

grep "^ALK" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^BTK" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^MET" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^EGFR" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^ERBB2" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#JAK has many co-occurrences;
grep "^JAK1" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^JAK2" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^JAK3" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^FLT3" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^CSF1R" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^TEK" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#ROS1 not in 1186 set
#TRK, TRKA = NTRK1; Neurotrophic Receptor Tyrosine Kinase 1 or Tropomyosin Receptor Kinase A; two kinds 
#of inhibitors for TRKs; cabozantinib, entrectinib, larotrectinib sulfate;
#TRKB = NTRK2; Neurotrophic Tyrosine Kinase Receptor Type 2 or Tropomyosin-Related Kinase B; 
#NTRK3 = Neurotrophic Receptor Tyrosine Kinase 3;  
grep "^NTRK" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^RET" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#KIT may be good; SRC, LCK drugs may work
grep "^KIT" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#PDGFRA, PDGFRB
grep "^PDGFR" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#ABL1, ABL2; ABI = ABL interactor 1; interactor protein;
grep "^ABL" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#SRC good; KIT drugs may work
grep "^SRC" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#KDR = Kinase Insert Domain Receptor or Vascular Endothelial Growth Factor Receptor 2 or VEGFR2 or VEGFR; 
#VEGFA good; KDR and VEGFA might work; VEGFA = Vascular Endothelial Growth Factor A;
grep "^KDR" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#cabozantinib works with the NTRKs and AXL; 
grep "^AXL" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#LTK = TYK1; TYK1 not in 1186 set; 
#grep "^TYK" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^DDR1" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#there are AKT1, AKT2, AKT3
grep "^AKT1" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^AKT2" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^AKT3" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#PKCalpha; protein kinase c alpha; PRKCA gene; not in 1186 set;
#CCND1, CCND2, CCND3 are in 1186 list; CCND1, CCND2, CCND3 = Cyclin D1, D2, D3; CCNE1 is cyclin e1
grep "^CCND" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#drugs target BRAF V600E; BRAF = B-Raf Proto-Oncogene, Serine/Threonine Kinase; 
#ARAF = A-Raf proto-oncogene, Serine/Threonine Kinase; RAF1 = Raf-1 Proto-Oncogene, Serine/Threonine Kinase
grep "^BRAF" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#grep "^ARAF" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#grep "^RAF1" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^MTOR" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#MAP2K1 = MEK1, MAPKK1; in the 1186 set, there are MAP2K1, MAP2K2, MAP2K4; MAP2K2 = MEK2; MAP2K4 = MEK4; 
#mitogen activated kinase kinase1; kinase kinase 2; kinase kinase 4;
grep "^MAP2K1" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#PI3K = PIK3CA; PIK3CA, PIK3CB, PIK3CG, PIK3CD - phosphatidylinositol-4,5-bisphosphate 3-kinase catalytic subunit 
#alpha, beta, gamma, delta;
#(below 4 lines is for information;
#PIK3C2B, PIK3C2G - Phosphatidylinositol-4-Phosphate 3-Kinase Catalytic Subunit Type 2 Beta, 
#Type 2 Gamma
#PIK3C3, - Phosphatidylinositol 3-Kinase Catalytic Subunit Type 3 
#PIK3R1, PIK3R2, PIK3R3 - Phosphoinositide-3-Kinase Regulatory Subunit 1, Subunit 2, Subunit 3;) 
grep "^PIK3CA" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^PIK3CB" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^PIK3CG" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^PIK3CD" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#AR (androgen receptor)
grep "^AR\b" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#PTCH1 and SMO (Hedgehog-ligand cell surface receptors);
grep "^PTCH1" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#SMO
grep "^SMO" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#KRAS
grep "^KRAS" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#CYP19A1; Aromatase; 
grep "^CYP19A1" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^IDH2" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^IDH1" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#HDAC (histone deacetylase); HDAC1, HDAC4, HDAC7; 
grep "^HDAC" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#EZH2; Enhancer Of Zeste 2 Polycomb Repressive Complex 2 Subunit; histone-lysine N-methyltransferase enzyme
grep "^EZH2" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#aminopeptidase; ANPEP gene; not in 1186 list;
#PARP; PARP1, PARP2; Poly(ADP-Ribose) Polymerase 1; Poly(ADP-Ribose) Polymerase 2; 
grep "^PARP" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#steroid 17alpha-monooxygenase; CYP17A1; Cytochrome P450 Family 17 Subfamily A Member 1; 
grep "^CYP17A1" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#DHFR; Dihydrofolate Reductase; DHFR gene not in 1186 set;  
#grep "^DHFR" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#RFC-1; reduced folate carrier-1; SLC19A1; this gene is not part of 1186 set;
#RXRs (retinoid X receptors) and RAR (retinoic acid receptors); RXRA, RARA;
grep "^RXRA" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
grep "^RARA" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#Telomerase; TERT gene;
grep "^TERT" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#20S proteasome; Proteasome; 26S proteasome; proteasome genes are not in 1186 set; 
#NF-kB; NFKB2 = Nuclear Factor Kappa B Subunit 2; NFKBIE = NFKB Inhibitor Epsilon; NFKBIA = NFKB Inhibitor Alpha;  
grep "^NFKB2" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#Estrogen receptor; ESR1 gene = Estrogen Receptor 1;  
grep "^ESR1" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#somatostatin receptors (SSTR); SSTR1, SSTR2, SSTR5 = Somatostatin Receptor 1, Receptor 2, Receptor 5; 
#SSTR genes are not in 1186 set; 
#CRM1 (chromosome region maintenance 1 protein; gene not in 1186 set; 
#FKBP-12; FKBP1A = FKBP12 = FKBP Prolyl Isomerase 1A; gene not in 1186 set;  
#TNF alpha production,  levels of cytokines VEGF, bFGF
#TNF alpha = TNF = Tumor Necrosis Factor; TNF gene not in 1186 set;
#TNFRSF11A = TNF Receptor Superfamily Member 11a; TNFAIP3 = TNF Alpha Induced Protein 3; TNFRSF14 = TNF Receptor Superfamily Member 14; TNFRSF17 = TNF Receptor Superfamily Member 17; 
#grep "^TNF" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#Bcl-2; BCL2 = BCL2 Apoptosis Regulator; 
#BCL6 = BCL6 Transcription Repressor; BCL10 = BCL10 Immune Signaling Adaptor; BCL9 = BCL9 Transcription Coactivator;
#BCL2L1 = BCL2 Like 1; BCL2L11 = BCL2 Like 11; BCL11A = BCL11 Transcription Factor A; BCL9L = BCL9 Like;
grep "^BCL2" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#CCR4 receptor; CCR4 gene = C-C Motif Chemokine Receptor 4; gene is not in 1186 set; 
#PD-1; gene = PDCD1; Programmed Cell Death 1;  
grep "^PDCD1" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#PD-L1; Programmed Cell Death 1 Ligand 1; gene = CD274; CD274 Molecule;   
grep "^CD274" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#PDCD11 = Programmed Cell Death 11; PDCD1LG2 = Programmed Cell Death 1 Ligand 2;
#grep "^PDCD11" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | more
#grep "^PDCD1LG2" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | more
#VEGFA = Vascular Endothelial Growth Factor A;
grep "^VEGFA" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#CD20 antigen; MS4A1 = Membrane Spanning 4-Domains A1; or CD20 Antigen; MS4A1 gene is not in 1186 set;  
#CD19 antigen; CD19 = CD19 Molecule; or CD19 Antigen; CD19 gene is not in 1186 set;  
#CD3 antigen; 
#The CD3 antigen is a surface structure associated with the T-cell receptor (TCR) to form a complex 
#involved in antigen recognition and signal transduction.
#Cluster of differentiation 3 (CD3) is a multimeric protein complex, known historically as the 
#T3 complex, and is composed of four distinct polypeptide chains; epsilon (ε), gamma (γ), delta (δ) 
#and zeta (ζ), that assemble and function as three pairs of dimers (εγ, εδ, ζζ). The CD3 complex 
#serves as a T cell co-receptor that associates noncovalently with the T cell receptor (TCR). The 
#CD3 protein complex is a defining feature of the T cell lineage, therefore anti-CD3 antibodies 
#can be used effectively as T cell markers
#in the 1186 gene set, CD3D is present as an OMIM gene; CD3D = CD3 Delta Subunit Of T-Cell Receptor Complex
#CD3D may NOT be of interest, as it is an OMIM gene; 
#grep "^CD3D" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#CD22 receptors; CD22 = CD22 Molecule; CD22 Antigen; B-cell receptor CD22; 
grep "^CD22" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#CD33 antigen; CD33 = CD33 Molecule; CD33 Antigen; CD33 is not in 1186 set; 
#CD30 rceptor; TNFRSF8 (TNF Receptor Superfamily Member 8); not in 1186 set;
#Tubulin; TUBB = Tubulin Beta Class I; TUBA1A = Tubulin Alpha 1a; tubulin is not in 1186 set;  
#Nectin-4 (cell adhesion molecule); NECTIN4 = Nectin Cell Adhesion Molecule 4; not in 1186 set; 
#CD79B = CD79b Molecule; 
grep "^CD79B" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#CD38; CD38 Molecule or CD38 Antigen; not in 1186 set;
#CD52; CD52 Molecule; CD52 Antigen (CAMPATH-1 Antigen); Cambridge Pathology 1 Antigen; not in 1186 set; 
#CS1 antigen; gene SLAMF7 = SLAM Family Member 7; CD319 antigen; not in 1186 set; 
#CTLA4; Cytotoxic T-Lymphocyte Associated Protein 4; 
grep "^CTLA4" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#TACSTD2 or TROP2 or EGP-1 (transmembrane calcium signal transducer); TACSTD2 = Tumor Associated Calcium Signal Transducer 2; not in 1186 set;
#Topoisomerase I; gene TOP1 = DNA Topoisomerase I; like CYP19A1, no co-occurrences;
grep "^TOP1" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#BCMA antigen and receptor; gene TNFRSF17 = TNF Receptor Superfamily Member 17; B Cell Maturation Antigen; B-Cell Maturation Factor; like TOP1, no co-occurrences; 
grep "^TNFRSF17" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#RANKL; gene TNFSF11 = TNF Superfamily Member 11; not in 1186 set;  
#GD2 (ganglioside); gene B4GALNT1 = Beta-1,4-N-Acetyl-Galactosaminyltransferase 1; not in 1186 set; 
#IL-6; gene IL6 = Interleukin 6; not in 1186 set; 
#present in 1186 set is gene IL6ST = Interleukin 6 Cytokine Family Signal Transducer;   
#IL2 = Interleukin 2; present in 1186 set; 
#IL-2 receptors; IL2RA = Interleukin 2 Receptor Subunit Alpha; IL2RA not in 1186 set; 
#IL2RG = Interleukin 2 Receptor Subunit Gamma; present in 1186 set, but OMIM gene;  
#IL21R Interleukin 21 Receptor; present in 1186 set; 
grep "^IL2\b" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#grep "^IL2RG" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#grep "^IL21R" unique_convergences_for_each_gene.txt | awk -F"\t" '{IFS=OFS="\t"}{$1="" ; $2="" ; print $0}' | sed 's/\t/\n/g' | grep -v -e "OMIM" -e ^$ | sort | uniq -c | sort -k1,1nr | sed 's/^[ ]\{1,9\}//g' | more
#IL-3 receptor (or CD123); IL3RA = Interleukin 3 Receptor Subunit Alpha; not in 1186 set;  
#Norepinephrine (or noradrenaline); not a gene; 
#Bone tissue; not a gene;

############################################################
############################################################
############################################################

#PERL PROGRAMS

/BeagleAttic/users/RaghavanLab/prathima/43drigenes_to_omim/join_drigenes_omimpheno.pl

#! /usr/bin/perl -w 

#
# This program adds cols 1 (ID), 2 (Gene Name), 3 (Species) from the drigenes_omim_cols123.txt, to each 
# disease line in col4 (OMIM_DISEASE) from file drigenes_omim_col4.txt; the output file generated is 
# drigenes_omimpheno_out.txt; cols 1, 2, 3 refer to cols 1, 2, 3 in the file drigenes43_DAVIDannotn.txt; 
# these have been extracted to the file drigenes_omim_cols123.txt; col4 refers to col4 in 
# drigenes43_DAVIDannotn.txt; this original col4 has been modified (using awk and sed) so that one disease 
# occupies one line; the modified col4 is in the file drigenes_omim_col4.txt; in the output file, the ID, 
# Gene Name and Species for each disease has been added; the same ID, Gene Name and Species may occur
# for more than one disease;
#
# perl join_drigenes_omimpheno.pl drigenes_omim_cols123.txt drigenes_omim_col4.txt drigenes_omimpheno_out.txt


$cols123_infile1 = $ARGV[0];
$col4_infile2 = $ARGV[1];
$outfile = $ARGV[2];


open (COLS123, $cols123_infile1);
open (COL4, $col4_infile2);
open (OUTFILE, ">$outfile");

@cols123 = <COLS123>;
@col4 = <COL4>;

$n_cols123 = scalar @cols123;
$n_col4 = scalar @col4;

$l=2;
for ($i = 1; $i < $n_cols123; $i++)
{

  $linef1 = $cols123[$i]; 
  chomp $linef1;
  @line_c123 = split ("\t", $linef1);
  $line_c1[$i] = $line_c123[0];
  $line_c2[$i] = $line_c123[1];
  $line_c3[$i] = $line_c123[2];

      for ($j = $l; $j < $n_col4; $j++)
      {
         $linef2 = $col4[$j];
         chomp $linef2;

         if( $linef2 !~ /^$/)
         {
         print OUTFILE $line_c1[$i],"\t", $line_c2[$i], "\t", $line_c3[$i], "\t", $linef2, "\n";  
         }
         else
         {
         $l = $j+1;
         print OUTFILE "\n";
         goto NEXT_GENE;
         } 
      }

      NEXT_GENE:

}

exit;

######################################################################
######################################################################

/BeagleAttic/users/RaghavanLab/prathima/luad_drivr_mutns/identifying_mutns_common_to_omim_and_clinv.pl

#! /usr/bin/perl -w

#perl identifying_mutns_common_to_omim_and_clinv.pl 375cbio_mutns_with_rs_cv_ids.txt /scratch/prasannalab/luad_drivr_mutns/omim_allelic_variants/omim_all_av.txt cbio375_rs_mapped_to_omim.txt cbio375_clinv_mapped_to_omim.txt
#
#perl identifying_mutns_common_to_omim_and_clinv.pl test375cbio_mutns_with_rs_cv_ids.txt /scratch/prasannalab/luad_drivr_mutns/omim_allelic_variants/omim_all_av.txt testcbio375_rs_mapped_to_omim.txt testcbio375_clinv_mapped_to_omim.txt

#the program takes as input the 375_cbio_mutations_with_rs_and_cv_ids obtained from previous perl program, srch_cbiomutns_in_clinvar.pl, 
#and the set of 668_omim_variants_in_32_genes (32 driver genes which are found in OMIM); the program creates 2 output files: (i) lists those 
#mutations that are common_in_cbio_and_omim wrt rs ids; i.e., rs_ids of cbio mutns find a match in omim av; (ii) lists those mutations that
#are common_in_cbio_and_omim wrt clinvar ids; i.e., clinvar_ids of cbio mutns find matches in omim av;
#
#first and second loops are similar to previous program (srch_cbiomutns_in_clinvar.pl); the third loop is for comparing rs_ids in cbio mutns
#and omim av; the fourth loop is for comparing clinv ids in cbio mutns and omim av; 


$inf1_cbio375 = $ARGV[0];
$inf2_omim = $ARGV[1];
$outfile1 = $ARGV[2];
$outfile2 = $ARGV[3];

open (INF375CBIO, $inf1_cbio375);
open (INFOMIM, $inf2_omim);
open (OUTFIL1, ">$outfile1");
open (OUTFIL2, ">$outfile2");


#first loop similar to previous program (srch_cbiomutns_in_clinvar.pl); 
#read and split lines of 375cbio_mutns_with_rs_cv_ids file into cols; read the cols into 1-d arrays;  
$i = 0;
foreach $cbio375line (<INF375CBIO>)
{
  chomp $cbio375line;
  @cbioline = split ("\t", $cbio375line);
  if ($cbioline[0] =~ /Gene/) 
     { 
        printf OUTFIL1 "%s\t%s\t%s\t%s\t%s\t%s\t%s\t", $cbioline[0], $cbioline[1], $cbioline[2], $cbioline[7], $cbioline[10], $cbioline[11], $cbioline[4]; 
        printf OUTFIL2 "%s\t%s\t%s\t%s\t%s\t%s\t%s\t", $cbioline[0], $cbioline[1], $cbioline[2], $cbioline[7], $cbioline[10], $cbioline[11], $cbioline[4]; 
        goto SKIP_CBIO_HEADER; 
     }
  $cbio_col1_gene[$i] = $cbioline[0];
  $cbio_col2_hgvsc[$i] = $cbioline[1];
  $cbio_col3_protchng[$i] = $cbioline[2];
  $cbio_col4_name[$i] = $cbioline[7];
  $cbio_col5_rsid[$i] = $cbioline[10];
  $cbio_col6_clinvid[$i] = $cbioline[11];
  $cbio_col7_oncokb[$i] = $cbioline[4];

#IMPORTANT#$ cbio_col6_clinvid[$i] will have to be split; not $cbio_col5_rsid[$i], which is -1 if missing; 

#     print $cbio_col1_gene[$i],"\t",$cbio_col2_hgvsc[$i],"\t",$cbio_col3_protchng[$i],"\t",$cbio_col4_name[$i],"\t",$cbio_col5_rsid[$i],"\t",$cbio_col6_clinvid[$i], "\t", $cbio_col7_oncokb[$i],"\n";
  $i++;
  SKIP_CBIO_HEADER:
}

close INF375CBIO; 

#number of elements in cbio_mutns array; 
  $k_siz_cbioarr = scalar @cbio_col1_gene; 
 

#second loop similar to previous program (srch_cbiomutns_in_clinvar.pl); 
#read and split lines of omim_all_av file into cols; read the cols into 1-d arrays;  
$j = 0;
foreach $line (<INFOMIM>) 
{
   chomp $line;
   @omimline = split ("\t", $line);
   if ($omimline[0] =~ /Gene/) 
    { 
        printf OUTFIL1 "%s\t%s\t%s\t%s\t%s\t%s\n", $omimline[0], $omimline[1], $omimline[2], $omimline[3], $omimline[4], $omimline[6]; 
        printf OUTFIL2 "%s\t%s\t%s\t%s\t%s\t%s\n", $omimline[0], $omimline[1], $omimline[2], $omimline[3], $omimline[4], $omimline[6]; 
        goto SKIP_HEADER_LINE; 
    }
   $omim_av_col1_gene[$j] =  $omimline[0]; 
   $omim_av_col2_number[$j] =  $omimline[1]; 
   $omim_av_col3_phenotype[$j] =  $omimline[2]; 
   $omim_av_col4_mutn[$j] =  $omimline[3]; 
   $omim_av_col5_snp[$j] =  $omimline[4]; 
   $omim_av_col7_clinv[$j] =  $omimline[6]; 
#    print $omim_av_col1_gene[$j],"\t",$omim_av_col2_number[$j],"\t",$omim_av_col3_phenotype[$j],"\t",$omim_av_col4_mutn[$j],"\t",$omim_av_col5_snp[$j],"\t",$omim_av_col7_clinv[$j],"\n";
 
#IMPORTANT# $omim_av_col5_snp[$j] and $omim_av_col7_clinv[$j] will have to be split; either col can also be blank
  
   $j++;
   SKIP_HEADER_LINE:
 }
 
 close INFOMIM;
 
#number of elements in clinvar_variants array; 
   $l_siz_omimarr = scalar @omim_av_col1_gene; 
 

#this third loop compares rs_ids of cbio mutns and omim av; 
#IMPORTANT# $cbio_col5_rsid[$i] does not need to be split because it is a single entry col; however, the col is -1 if the rs_id is missing; 
#IMPORTANT# $omim_av_col5_snp[$j] has to be split; the col can also be blank;
#the loop goes through the cbio_mutns array; if the rsid of a cbio mutn is -1, the mutn is skipped; otherwise, the omim_av array is entered;
#if an omim_av does not have an rs_id, i.e., the snp col has 0 length, the av is skipped; if the rs_id exists and has a length,
#and if the cbio_mutn gene and omim_av gene are same, the omim_av_snp col is split into an array on ","; the number of elements in the omim_snp 
#array is stored in a variable; a loop through the array containing omim_av rs_ids is then started; if the omim_av_snp_id contains the 
#cbio_mutn_rsid, the cbio_mutn and omim_av are printed in the first output file; 
#
#Searching for dbsnp rs id from cbio file, in omim av file;
for ($m = 0; $m < $k_siz_cbioarr; $m++)
{
 
    if ($cbio_col5_rsid[$m] eq -1) { goto NO_CBIO_RSID; }
    
       for ($n = 0; $n < $l_siz_omimarr; $n++)
       {
 
       @omim_splt_snp = ();
       if (! length $omim_av_col5_snp[$n] ) { goto OMIM_RSID_NULL; }

          if ($cbio_col1_gene[$m] eq $omim_av_col1_gene[$n])
          {
          @omim_splt_snp = split (/,/, $omim_av_col5_snp[$n]);
          $count_omim_av_col5_snp_splt = scalar @omim_splt_snp;
 
              for ($m2 = 0; $m2 < $count_omim_av_col5_snp_splt; $m2++)
              {
                 if ($omim_splt_snp[$m2] =~ m/$cbio_col5_rsid[$m]/) 
                 {
                  printf OUTFIL1 "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n", $cbio_col1_gene[$m],$cbio_col2_hgvsc[$m],$cbio_col3_protchng[$m],$cbio_col4_name[$m],$cbio_col5_rsid[$m],$cbio_col6_clinvid[$m],$cbio_col7_oncokb[$m],$omim_av_col1_gene[$n],$omim_av_col2_number[$n],$omim_av_col3_phenotype[$n],$omim_av_col4_mutn[$n],$omim_av_col5_snp[$n],$omim_av_col7_clinv[$n];
                 }
              }
 
         }

      OMIM_RSID_NULL:
       }

    NO_CBIO_RSID:
}


#this fourth loop compares clinv_ids of cbio_mutns and omim_av; 
#IMPORTANT#  $cbio_col6_clinvid[$m] will have to be split; the col is never empty;
#IMPORTANT#  $omim_av_col7_clinv[$n] will have to be split; the col can be empty;
#the loop goes through the cbio_mutns array; cbio_clinvid is split into an array on "|"; the number of elements in the array is counted;
#a loop is started to go through each cbio_clinvid; for each cbio_clinvid of a cbio_mutn, the omim_av array is entered; if the cbio_mutn_gene
#is the same as the omim_av_gene, the length of omim_av_clinv_id col is checked; if the length is 0 the omim_av is skipped; if the 
#omim_av_clinv_id col is not empty and contains clinvids, the omim_av_clinv_id col is split on ","; the number of elements in the array,
#or the number of clinv_ids for the omim_av is counted and stored in a variable; a loop through the array of omim_av_clinv_ids is opened;
#EACH clinvid of EACH cbio_mutn is compared with EACH clinvid of EACH omim_av, provided the gene names of cbio_mutn and omim_av match; 
#EVERYTIME there is a match, the cbio_mutn and omim_av are printed in the second output file; as a result, the SAME MUTATION CAN OCCUR 
#SEVERAL TIMES in the output file;  hence, the UNIQ COMMAND OF UNIX HAS TO BE RUN ON THE SECOND OUTPUT FILE, after this program has been run;  
#
#Searching for clinvar id from cbio file, in omim av file;
for ($m = 0; $m < $k_siz_cbioarr; $m++)
{
    @cbio_splt_clinid = split (/\|/, $cbio_col6_clinvid[$m]);
    $count_cbio_col6_clinvid_splt = scalar @cbio_splt_clinid; 
#      print "xxxxxxxxx\t", $count_cbio_col6_clinvid_splt, "\t", "@cbio_splt_clinid", "\n";
#    $rep_prnt = $m;

#IMPORTANT#  $cbio_col6_clinvid[$m] is never empty;
#IMPORTANT#  $omim_av_col7_clinv[$n] can be empty;

     for ($m3 = 0; $m3 < $count_cbio_col6_clinvid_splt; $m3++)
     {
       
         for ($n = 0; $n < $l_siz_omimarr; $n++)
         {

             if ($cbio_col1_gene[$m] eq $omim_av_col1_gene[$n])  
             {
 
                if (! length $omim_av_col7_clinv[$n] ) {  goto OMIM_CLINID_NULL;  }
                @omim_splt_clinv = ();
                @omim_splt_clinv = split (",", $omim_av_col7_clinv[$n]);
                $count_omim_av_col7_clinv_splt = scalar @omim_splt_clinv; 
 
                   for ($m2 = 0; $m2 < $count_omim_av_col7_clinv_splt; $m2++)
                   {

                       if ($cbio_splt_clinid[$m3] eq $omim_splt_clinv[$m2])
                       {
                       printf OUTFIL2 "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n", $cbio_col1_gene[$m],$cbio_col2_hgvsc[$m],$cbio_col3_protchng[$m],$cbio_col4_name[$m],$cbio_col5_rsid[$m],$cbio_col6_clinvid[$m],$cbio_col7_oncokb[$m],$omim_av_col1_gene[$n],$omim_av_col2_number[$n],$omim_av_col3_phenotype[$n],$omim_av_col4_mutn[$n],$omim_av_col5_snp[$n],$omim_av_col7_clinv[$n];
#last var diff         printf OUTFIL2 "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n", $cbio_col1_gene[$m],$cbio_col2_hgvsc[$m],$cbio_col3_protchng[$m],$cbio_col4_name[$m],$cbio_col5_rsid[$m],$cbio_col6_clinvid[$m],$cbio_col7_oncokb[$m],$omim_av_col1_gene[$n],$omim_av_col2_number[$n],$omim_av_col3_phenotype[$n],$omim_av_col4_mutn[$n],$omim_av_col5_snp[$n],$omim_splt_clinv[$m2];
                       }
                   }
             }
             else { goto OMIM_CLINID_NULL; }

         OMIM_CLINID_NULL:
         }

     } 

}

exit;

######################################################################
######################################################################

/BeagleAttic/users/RaghavanLab/prathima/luad_drivr_mutns/srch_cbiomutns_in_clinvar.pl

#! /usr/bin/perl -w

#perl srch_cbiomutns_in_clinvar.pl infil_mutns808_assessmt_cv_oncokb.txt variant_summary_GRCh37.txt outfil_cbio_and_clinvar.txt
#the first input file to the program is: infil_assessmt_cv_oncokb.txt; this file contains the cbio driver mutns in
#32 driver genes; the five cols in this file are split and read into 5 1-d arrays (e.g., cbio_col1_gene, cbio_col2_hgvsc, etc.).
#the input file is then closed;
#The second input file is variant_summary_GRCh37.txt; this file contains only the GRCh37 entries extracted from 
#variant_summary.txt (which contains ClinVar variants; size of variant_summary.txt = 930M); 7 cols in this file are
#of interest (e.g., dbsnp ID, clinvar ID, NM_ ID, etc.); split the cols in the file and read the 7 useful cols into
#7 1-d arrays (e.g.,  cv_col1_alleleid, cv_col2_mutype, cv_col3_mutname, etc.); then closed the input file;
#Used the hgvsc (enst) mutation description from cbio, and the nm mutation description from clinvar; used the c.602G>A part
#of enst mutation from cbio; searched for this in the nm mutation description in clinvar; USED THE PATTERN OPERATOR
#TO SEARCH FOR A MATCH of the enst mutn in the larger nm mutation string; did not use the ~~ (smart match) operator;
#if the enst mutation occurs in the nm mutation string, print the cbio and clinvar cols; if there is no match,
#print only the cbio cols; no match means that the mutation does not occur in clinvar, and does not have clinvar
#and dbsnp IDs;

##test command:  perl srch_cbiomutns_in_clinvar.pl tstcbio.txt tstclinvar.txt outfil_cbio_and_clinvar.txt

$infil1_cbio = $ARGV[0];
$infil2_clinv = $ARGV[1];
$outfil = $ARGV[2];

open (INFCBIO, $infil1_cbio);
open (INFCLINV, $infil2_clinv);
open (OUTFIL, ">$outfil");


#read and split lines of cbiomutn file into cols; read the cols into 1-d arrays;  
$i = 0;
foreach $cbiomutnline (<INFCBIO>)
{
  chomp $cbiomutnline;
  @cbioline = split ("\t", $cbiomutnline);
  if ($cbioline[0] =~ /Gene/) 
     { 
        printf OUTFIL "%s\t%s\t%s\t%s\t%s\t", $cbioline[0], $cbioline[1], $cbioline[2], $cbioline[3], $cbioline[4]; 
        goto SKIP_CBIO_HEADER; 
     }
  $cbio_col1_gene[$i] = $cbioline[0];
  $cbio_col2_hgvsc[$i] = $cbioline[1];
  $cbio_col3_protchng[$i] = $cbioline[2];
  $cbio_col4_clinv[$i] = $cbioline[3];
  $cbio_col5_oncokb[$i] = $cbioline[4];
#     print $cbio_col1_gene[$i],"\t",$cbio_col2_hgvsc[$i],"\t",$cbio_col3_protchng[$i],"\t",$cbio_col4_clinv[$i],"\t",$cbio_col5_oncokb[$i];
  $i++;
  SKIP_CBIO_HEADER:
}

close INFCBIO; 

#number of elements in cbio_mutns array; 
  $k_siz_cbioarr = scalar @cbio_col1_gene; 



#read and split lines of clinvar file into cols; read the cols into 1-d arrays;  
$j = 0;
foreach $line (<INFCLINV>) 
{
  chomp $line;
  @cvline = split ("\t", $line);
  if ($cvline[0] =~ /#AlleleID/) 
     { 
        printf OUTFIL "%s\t%s\t%s\t%s\t%s\t%s\t%s\n", $cvline[0], $cvline[1], $cvline[2], $cvline[4], $cvline[6], $cvline[9], $cvline[11]; 
        goto SKIP_HEADER_LINE; 
     }
  $cv_col1_alleleid[$j] =  $cvline[0]; 
  $cv_col2_mutype[$j] =  $cvline[1]; 
  $cv_col3_mutname[$j] =  $cvline[2]; 
  $cv_col5_genesymbl[$j] =  $cvline[4]; 
  $cv_col7_clinsignificance[$j] =  $cvline[6]; 
  $cv_col10_rsdbsnp[$j] =  $cvline[9]; 
  $cv_col12_rcvclinvar[$j] =  $cvline[11]; 
#     print $cv_col1_alleleid[$j],"\t",$cv_col2_mutype[$j],"\t",$cv_col3_mutname[$j],"\t",$cv_col5_genesymbl[$j],"\t",$cv_col7_clinsignificance[$j],"\t",$cv_col10_rsdbsnp[$j],"\t",$cv_col12_rcvclinvar[$j],"\n";
 
  $j++;
  SKIP_HEADER_LINE:
}

close INFCLINV;

#number of elements in clinvar_variants array; 
  $l_siz_cvarr = scalar @cv_col1_alleleid; 


#print $l_siz_cvarr, " ", $k_siz_cbioarr;


#searching for c.602G>A part of cbio enst mutation, in the larger string of
#the nm mutation given in clinvar; matches were identified using the
#pattern operator; if there is a match, the cbio and clinvar cols are printed;
for ($m = 0; $m < $k_siz_cbioarr; $m++)
{
    printf OUTFIL "%s\t%s\t%s\t%s\t%s\t", $cbio_col1_gene[$m],$cbio_col2_hgvsc[$m],$cbio_col3_protchng[$m],$cbio_col4_clinv[$m],$cbio_col5_oncokb[$m];

    @cdot_cbiomutn = split (":", $cbio_col2_hgvsc[$m]);
    $enst_fromcbio = $cdot_cbiomutn[0];
    $mutn_fromcbio = $cdot_cbiomutn[1];

    for ($n = 0; $n < $l_siz_cvarr; $n++)
    {

        $search_in1 = $cv_col5_genesymbl[$n];
        $search_in2 = $cv_col3_mutname[$n];
        $search_for1 = $cbio_col1_gene[$m];
        $search_for2 = $mutn_fromcbio; 
        if (($search_in1 =~ m/$search_for1/) && ($search_in2 =~ m/$search_for2/))
        {
#       print $cbio_col1_gene[$m],"\t",$cbio_col2_hgvsc[$m],"\t",$cbio_col3_protchng[$m],"\t",$cbio_col4_clinv[$m],"\t",$cbio_col5_oncokb[$m], "\t";
#       print $cv_col1_alleleid[$n],"\t",$cv_col2_mutype[$n],"\t",$cv_col3_mutname[$n],"\t",$cv_col5_genesymbl[$n],"\t",$cv_col7_clinsignificance[$n],"\t",$cv_col10_rsdbsnp[$n],"\t",$cv_col12_rcvclinvar[$n], "\n";
#       printf "%s\t%s\t%s\t%s\t%s\t", $cbio_col1_gene[$m],$cbio_col2_hgvsc[$m],$cbio_col3_protchng[$m],$cbio_col4_clinv[$m],$cbio_col5_oncokb[$m];
 
        printf OUTFIL "%s\t%s\t%s\t%s\t%s\t%s\t%s\n", $cv_col1_alleleid[$n],$cv_col2_mutype[$n],$cv_col3_mutname[$n],$cv_col5_genesymbl[$n],$cv_col7_clinsignificance[$n],$cv_col10_rsdbsnp[$n],$cv_col12_rcvclinvar[$n];

        goto JUMP_OUT_OF_CLINVAR_LOOP;
        }

    }
    printf OUTFIL "\n";

    JUMP_OUT_OF_CLINVAR_LOOP:
}

exit; 

######################################################################
######################################################################

#matrixofreactions_onwhich_oncokb_blairmel_genes_converge.pl
#! /usr/bin/perl
 
#perl matrixofreactions_onwhich_oncokb_blairmel_genes_converge.pl all_reactions_for_1186_oncokb_blairmel_genes.txt genewise_reactions_for_1186_oncokb_blairmel_genes.txt reactionsonwhich_genes_converge.out

$file_all_pway_genes = $ARGV[0];     #all drivers
$file_path_wise_genes = $ARGV[1];    #cancer wise drivers
$outfile = $ARGV[2];

open (INF1, $file_all_pway_genes); 
$i = 0;
foreach $agene (<INF1>)
{
   chomp $agene;
   push @{ $multi_pway_g_mtx[0][$i] }, $agene;
#  print "@{ $multi_pway_g_mtx[0][$i] } \n";
   $i++;
}

print "i = ", $i, "\n";

open (INF2, $file_path_wise_genes); 
open (OUTF1, ">$outfile");

$txtchk = 0;
$npath = 0;
$yes = "+";
$no = "-";
$multipath = 0;

$pos = tell(INF2);
#print "pos ", $pos, "\n";

print OUTF1 "        "; 

while ($pgene = <INF2>) 
{ 
    chomp $pgene;
#   print $pgene, "\n";
#o  if ($pgene =~ /txt/) 
    if ($pgene =~ /_Identifier/) 
    {
      $txtchk++;
        if ($txtchk == 1) 
        {
        $pathname = $pgene;
#o      $pathname =~ s/\.txt//;
        print OUTF1 $pathname, " "; 
        $npath++;

        for ($j=0; $j<$i; $j++) { @{ $multi_pway_g_mtx[$npath][$j] } = $no; } 

        }
        if ($txtchk > 1) 
        { 
#             $postmp = tell(INF2);
#             print "postmp ", $postmp, "\n";
          seek (INF2, $pos, 0); 
#             $postmp2 = tell(INF2);
#             print "postmp2 ", $postmp2, "\n";
          $txtchk = 0;
        }
    }

    else   #i.e., $pgene does not contain "_Identifier"; it is a pway name;
    {
            for ($j=0; $j<$i; $j++)

            {
                $arr_2_var = join (//, @{ $multi_pway_g_mtx[0][$j] });
#               print $pgene, "  ", $arr_2_var, "  ", @{ $multi_pway_g_mtx[0][$j] }, "\n";
                if ($pgene eq $arr_2_var) 
                {
                  @{ $multi_pway_g_mtx[$npath][$j] } = $yes; 
#                 print $pathname, "  ", @{ $multi_pway_g_mtx[0][$j] } , "  ", $pgene, "  ", @{ $multi_pway_g_mtx[$npath][$j] }, "\n";
                }
            }
    }
} continue 
   {
   $pos = tell(INF2);
#print "pos2 ", $pos, "\n";
   }   #end of while ($pgene = <INF2>)

        print "npath = ", $npath, "\n";

        print OUTF1 "\n"; 

#printing multi_pway_g_mtx;
#Counting '+'s; 
              for ($l=0; $l<$i; $l++)
              {
                  for ($k=1; $k<=$npath; $k++)
                  {
                      $mtx_element = join(//, @{ $multi_pway_g_mtx[$k][$l] });
#                     print @{ $multi_pway_g_mtx[0][$l]}, "  ", $mtx_element, "\n";
                      if ($mtx_element eq $yes) 
                      {
#                        print $mtx_element, "\n";

                         $multipath++;
                     }
                  }     

#for genes in more than one pathway, ($multipath > 1); 
#this line may be modified to ($multipath > 2, > 3, etc., for genes in more than
#2, 3 pathways;
                     print @{ $multi_pway_g_mtx[0][$l] }, " multipath = ", $multipath, "\n"; 
                     print OUTF1 @{ $multi_pway_g_mtx[0][$l] }, "   ";  
                           for ($m=1; $m<=$npath; $m++)
                             {
                             print OUTF1 @{ $multi_pway_g_mtx[$m][$l] }, "   ";   
                             }
                             print OUTF1 $multipath;
                             print OUTF1 "\n";
                             $multipath = 0;
              }

exit;

######################################################################
######################################################################

#gene_pway_fingerprint_mtx.pl
#! /usr/bin/perl
 
#perl gene_pway_fingerprint_mtx.pl all_reactome_hierarchies.txt gene_wise_hierarchies_kirc.txt kirc_genes_pway_fingerprint_mtx.out 

$file_all_pway_genes = $ARGV[0];     #all hierarchies
$file_path_wise_genes = $ARGV[1];    #cancer wise hierarchies
$outfile = $ARGV[2];

open (INF1, $file_all_pway_genes); 
$i = 0;
foreach $agene (<INF1>)
{
   chomp $agene;
   push @{ $multi_pway_g_mtx[0][$i] }, $agene;
#  print "@{ $multi_pway_g_mtx[0][$i] } \n";
         $no_n_rns_in_hierarchy = $agene;                                              #added
         $no_n_rns_in_hierarchy =~ s/[0-9]+\|/\|/;                                     #added
#        print $no_n_rns_in_hierarchy, "\n";                                           #added
         push @{ $n_rns_removed_from_hierarchy[0][$i] }, $no_n_rns_in_hierarchy;       #added
#        print "@{ $n_rns_removed_from_hierarchy[0][$i] } \n";                         #added
   $i++;
}

print "i = ", $i, "\n";

open (INF2, $file_path_wise_genes); 
open (OUTF1, ">$outfile");

$txtchk = 0;
$npath = 0;
# $yes = "+";                           #original statement commented 
# $no = "-";                             #original statement commented 
$no = 0;
$multipath = 0;

$pos = tell(INF2);
#print "pos ", $pos, "\n";

print OUTF1 "        "; 

while ($pgene = <INF2>) 
{ 
    chomp $pgene;
#   print $pgene, "\n";
#o  if ($pgene =~ /txt/) 
    if ($pgene =~ /_\(/) 
    {
      $txtchk++;
        if ($txtchk == 1) 
        {
        $pathname = $pgene;
#o      $pathname =~ s/\.txt//;
        print OUTF1 $pathname, " "; 
        $npath++;

        for ($j=0; $j<$i; $j++) { @{ $multi_pway_g_mtx[$npath][$j] } = $no; } 

        }
        if ($txtchk > 1) 
        { 
#             $postmp = tell(INF2);
#             print "postmp ", $postmp, "\n";
          seek (INF2, $pos, 0); 
#             $postmp2 = tell(INF2);
#             print "postmp2 ", $postmp2, "\n";
          $txtchk = 0;
        }
    }

    else   #i.e., $pgene does not contain "_("; it is a hierarchy;
    {
#****make a copy of $pgene; use =~ s/.../ to remove n_rns; 
#****make a copy of $pgene; use split to create array; 
#****use shift to store n_rns; use the value instead of $yes; 

      $genewise_pway_n_rns_removed = $pgene;                                             #added
      $genewise_pway_n_rns_removed =~ s/[0-9]+\|/\|/;                                    #added

      $copy_pgene = $pgene;                                                              #added

      @n_rns_genewise_pway_hier = split (/\|/, $copy_pgene);                             #added
      $n_rns_for_genewise_pway = shift(@n_rns_genewise_pway_hier);                       #added
#     print $n_rns_for_genewise_pway, "\n", $genewise_pway_n_rns_removed, "\n";          #added
       
            for ($j=0; $j<$i; $j++)

            {
#****use join to make a variable of @{ $n_rns_removed_from_hierarchy[0][$i] } above; i.e., $arr_n_rns_removed_2_var;
#****compare $genewise_pway_n_rns_removed with the var, $arr_n_rns_removed_2_var;  
#****i.e, copy of pgene with n_rns removed is being compared with the var created from n_rns_removed_from_hierarchy; 
#               $arr_2_var = join (//, @{ $multi_pway_g_mtx[0][$j] });                   #original statement commented
#               print $pgene, "  ", $arr_2_var, "  ", @{ $multi_pway_g_mtx[0][$j] }, "\n";

                $arr_n_rns_removed_2_var = join (//, @{ $n_rns_removed_from_hierarchy[0][$j] });            #added
#               print $genewise_pway_n_rns_removed, "  ", $arr_n_rns_removed_2_var, "  ", @{ $n_rns_removed_from_hierarchy[0][$j] }, "\n";     #added

#               if ($pgene eq $arr_2_var)                       #original statement commented
                if ($genewise_pway_n_rns_removed eq $arr_n_rns_removed_2_var)              #added
                {
#                 @{ $multi_pway_g_mtx[$npath][$j] } = $yes;    #original statement commented
#****instead of storing $yes, storing the var, n_rns_for_genewise_pway, in the original array @{ multi_pway_g_mtx[$npath][$j] }; 
                  @{ $multi_pway_g_mtx[$npath][$j] } = $n_rns_for_genewise_pway;           #added
#                 print $pathname, "  ", @{ $multi_pway_g_mtx[0][$j] } , "  ", $pgene, "  ", @{ $multi_pway_g_mtx[$npath][$j] }, "\n";
#                 print $pathname, "  ", @{ $multi_pway_g_mtx[0][$j] } , "  ", $genewise_pway_n_rns_removed, "  ", @{ $multi_pway_g_mtx[$npath][$j] }, "\n";        #added
                }
            }
    }
} continue 
{
   $pos = tell(INF2);
#print "pos2 ", $pos, "\n";
}   #end of while ($pgene = <INF2>)

        print "npath = ", $npath, "\n";

        print OUTF1 "\n"; 

#printing multi_pway_g_mtx;
#Counting '+'s; 
              for ($l=0; $l<$i; $l++)
              {
                  for ($k=1; $k<=$npath; $k++)
                  {
                      $mtx_element = join(//, @{ $multi_pway_g_mtx[$k][$l] });
#                     print @{ $multi_pway_g_mtx[0][$l]}, "  ", $mtx_element, "\n";
#                     if ($mtx_element eq $yes)                 #original statement commented
#****made if statement as: if ( mtx_element > 0 )
                      if ($mtx_element > 0)                     #added
                      {
#                        print $mtx_element, "\n";

                         $multipath++;
                     }
                  }     

#for genes in more than one pathway, ($multipath > 1); 
#this line may be modified to ($multipath > 2, > 3, etc., for genes in more than
#2, 3 pathways;
                     print @{ $multi_pway_g_mtx[0][$l] }, " multipath = ", $multipath, "\n"; 
#                    print OUTF1 @{ $multi_pway_g_mtx[0][$l] }, "   ";      #original statement commented
                     print OUTF1 @{ $multi_pway_g_mtx[0][$l] }, "     ";  
                           for ($m=1; $m<=$npath; $m++)
                             {
#                            print OUTF1 @{ $multi_pway_g_mtx[$m][$l] }, "   ";      #original statement commented
                             print OUTF1 @{ $multi_pway_g_mtx[$m][$l] }, "     ";   
                             }
                             print OUTF1 $multipath;
                             print OUTF1 "\n";
                             $multipath = 0;
              }

exit;

######################################################################
######################################################################